{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"for",
				"fori\tfor i,v in ipairs()"
			],
			[
				"con",
				"const"
			],
			[
				"im",
				"img-fluid"
			],
			[
				"b",
				"best"
			],
			[
				"val",
				"values"
			],
			[
				"best",
				"best"
			],
			[
				"bes",
				"bestDist"
			],
			[
				"dis",
				"distToClosestSqr"
			],
			[
				"dist",
				"distToClosestSqr"
			],
			[
				"num",
				"numValues"
			],
			[
				"pla",
				"playRadius"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Package Control Messages\n========================\n\n\nMarkdownPreview\n---------------\n\n  # MarkdownPreview\n  \n  Welcome to MarkdownPreview!\n  \n  A restart of Sublime Text is recommended to ensure all dependencies get  \n  loaded properly.\n  \n  For information on how to use, check out the documentation:\n  https://facelessuser.github.io/MarkdownPreview/.\n",
			"settings":
			{
				"buffer_size": 352,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"package_control_message",
					{
						"message": "\n\nMarkdownPreview\n---------------\n\n  # MarkdownPreview\n  \n  Welcome to MarkdownPreview!\n  \n  A restart of Sublime Text is recommended to ensure all dependencies get  \n  loaded properly.\n  \n  For information on how to use, check out the documentation:\n  https://facelessuser.github.io/MarkdownPreview/.\n"
					},
					"AQAAAAAAAAAAAAAAYAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 3488,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB1AAAAAAAAAAUAAAAjIFdJUA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "Bhe"
					},
					"BAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALAAAAAAAAAAoAAABwYXRoZmluZGVyCwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAAAwAAAAAAAAADAAAAAAAAAABAAAAZQsAAAAAAAAACwAAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "hevior"
					},
					"BgAAAAsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAABIAAAAAAAAAEgAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "Tree"
					},
					"BAAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAAAFgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "library"
					},
					"CAAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAYAAAAAAAAADAAAABhbmQgQSogc29sdmVyIChhc3RhciBvciBhLXN0YXIpIG5hdGl2ZSBleHRlbnNpb24YAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwAAAAAAAAAXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"paste",
					null,
					"AgAAAEIAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABbAAAAAAAAAAsAAABNaWNyb1BhdGhlcg",
					"AQAAAAAAAAABAAAAQgAAAAAAAABNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					2,
					"left_delete",
					null,
					"AgAAAEMAAAAAAAAAQwAAAAAAAAAMAAAAd25lciBhdmF0YXIKQgAAAAAAAABCAAAAAAAAAAEAAABP",
					"AQAAAAAAAAABAAAAQwAAAAAAAABPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAE0AAAAAAAAATQAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAATgAAAAAAAABOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"paste",
					null,
					"AgAAAAoAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAASAAAAAAAAAAcAAABCaGV2aW9y",
					"AQAAAAAAAAABAAAACgAAAAAAAAARAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " Runtim"
					},
					"CAAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAYAAAAAAAAAAEAAAAgGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAB4AAAAAAAAAHwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB8AAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAD0AAAAAAAAAPQAAAAAAAAAaAAAALCBidWlsdCB1c2luZyBtaWRkbGVjbGFzcy4",
					"AQAAAAAAAAABAAAAPQAAAAAAAABXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAD0AAAAAAAAAPgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAGkAAAAAAAAAagAAAAAAAAAAAAAAagAAAAAAAABrAAAAAAAAAAAAAABrAAAAAAAAAGwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"paste",
					null,
					"AQAAAGwAAAAAAAAA3DYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"cut",
					null,
					"AQAAAEQAAAAAAAAARAAAAAAAAAAlAAAACmh0dHBzOi8vYXJ4aXYub3JnL3BkZi8xNTA2LjAyMzEyLnBkZg",
					"AQAAAAAAAAABAAAAaQAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"cut",
					null,
					"AQAAAEAAAAAAAAAAQAAAAAAAAAAFAAAALS0tCgo",
					"AQAAAAAAAAABAAAARQAAAAAAAABAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					2,
					"left_delete",
					null,
					"AgAAAEAAAAAAAAAAQAAAAAAAAAABAAAACj8AAAAAAAAAPwAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					5,
					"left_delete",
					null,
					"BQAAAGEAAAAAAAAAYQAAAAAAAAAMAAAAQSogZXh0ZW5zaW9uYAAAAAAAAABgAAAAAAAAAAEAAAAgXwAAAAAAAABfAAAAAAAAAAEAAABlXgAAAAAAAABeAAAAAAAAAAEAAABoXQAAAAAAAABdAAAAAAAAAAEAAAB0",
					"AQAAAAAAAAABAAAAYQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "this"
					},
					"BAAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAABfAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAYQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " library"
					},
					"CAAAAGEAAAAAAAAAYgAAAAAAAAAAAAAAYgAAAAAAAABjAAAAAAAAAAAAAABjAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAZQAAAAAAAAAAAAAAZQAAAAAAAABmAAAAAAAAAAAAAABmAAAAAAAAAGcAAAAAAAAAAAAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQAAAAAAAABhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert_snippet",
					{
						"contents": "${TM_CURRENT_LINE/^\\s*((?:>\\s*)+).*/\n$1/}"
					},
					"AQAAAJIBAAAAAAAAlAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgEAAAAAAACSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"paste",
					null,
					"AQAAAJQBAAAAAAAA0QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAEAAAAAAACUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"left_delete",
					null,
					"AQAAAJQBAAAAAAAAlAEAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAlQEAAAAAAACVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"paste",
					null,
					"AgAAAJQBAAAAAAAA0AEAAAAAAAAAAAAA0AEAAAAAAADQAQAAAAAAADwAAABodHRwczovL2dpdGh1Yi5jb20vc2VsaW1hbmFjL2RlZm9sZC1hc3Rhci9hcmNoaXZlL21hc3Rlci56aXA",
					"AQAAAAAAAAABAAAAlAEAAAAAAADQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"cut",
					null,
					"AQAAANIBAAAAAAAA0gEAAAAAAABlAAAAb3IgeW91IGNhbiBhZGQgc3RhYmxlIHZlcnNpb25zIGZyb20gW3JlbGVhc2VzXShodHRwczovL2dpdGh1Yi5jb20vc2VsaW1hbmFjL2RlZm9sZC1hc3Rhci9yZWxlYXNlcykuICA",
					"AQAAAAAAAAABAAAANwIAAAAAAADSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"left_delete",
					null,
					"AQAAAOEBAAAAAAAA4QEAAAAAAACKAAAASGV4YWdvbiBleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20vc2VsaW1hbmFjL2RlZm9sZC1hc3Rhci1oZXgtZXhhbXBsZSAgCgpPbGQgZXhhbXBsZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxpbWFuYWMvZGVmb2xkLWFzdGFyLWV4YW1wbGVz",
					"AQAAAAAAAAABAAAA4QEAAAAAAABrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "WIP"
					},
					"AwAAAOEBAAAAAAAA4gEAAAAAAAAAAAAA4gEAAAAAAADjAQAAAAAAAAAAAADjAQAAAAAAAOQBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					2,
					"left_delete",
					null,
					"AgAAANIBAAAAAAAA0gEAAAAAAAABAAAACtEBAAAAAAAA0QEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA0wEAAAAAAADTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": " based"
					},
					"BgAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAABCAAAAAAAAAAAAAABCAAAAAAAAAEMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " on"
					},
					"AwAAAEMAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABFAAAAAAAAAAAAAABFAAAAAAAAAEYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEYAAAAAAAAARwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"paste",
					null,
					"AQAAAEcAAAAAAAAAWgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "old"
					},
					"AwAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEoAAAAAAAAASwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert_snippet",
					{
						"contents": "[$SELECTION]$0"
					},
					"AgAAAEsAAAAAAAAASwAAAAAAAAAJAAAAQmVoYXZpb3IzSwAAAAAAAABWAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwAAAAAAAABUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFYAAAAAAAAAWAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgAAAAAAAABWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"paste",
					null,
					"AQAAAFcAAAAAAAAAcwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwAAAAAAAABXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					2,
					"insert_snippet",
					{
						"contents": "${TM_CURRENT_LINE/^\\s*((?:>\\s*)+).*/\n$1/}"
					},
					"AgAAABECAAAAAAAAEwIAAAAAAAAAAAAAEwIAAAAAAAAVAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQIAAAAAAAARAgAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"paste",
					null,
					"AQAAABUCAAAAAAAAJQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQIAAAAAAAAVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"left_delete",
					null,
					"AQAAABICAAAAAAAAEgIAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAEwIAAAAAAAASAgAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"left_delete",
					null,
					"AQAAABMCAAAAAAAAEwIAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAFAIAAAAAAAAUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "Editor"
					},
					"BwAAABYCAAAAAAAAFwIAAAAAAAAAAAAAFwIAAAAAAAAXAgAAAAAAAAgAAABFeGFtcGxlcxcCAAAAAAAAGAIAAAAAAAAAAAAAGAIAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABoCAAAAAAAAAAAAABoCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAcAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgIAAAAAAAAeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"cut",
					null,
					"AQAAAB4CAAAAAAAAHgIAAAAAAAADAAAAV0lQ",
					"AQAAAAAAAAABAAAAIQIAAAAAAAAeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "WIP"
					},
					"BAAAAD0CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA+AgAAAAAAAC4AAABodHRwczovL2ZvcnVtLmRlZm9sZC5jb20vdC9hLW5hdGl2ZS1leHRlbnNpb24vPgIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAEACAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQIAAAAAAABrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAK0DAAAAAAAArgMAAAAAAAAAAAAArgMAAAAAAACuAwAAAAAAAAMAAAAxLjE",
					"AQAAAAAAAAABAAAArQMAAAAAAACwAwAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"left_delete",
					null,
					"AQAAAK8DAAAAAAAArwMAAAAAAADsBgAACi0gTWlub3IgZWRnZSBjYXNlIGZpeCBvbiBNaWNyb3BhdGhlciBjb3JlLiAKLSBNaW5vciBjb2RlIHJlZmFjdG9yaW5nLiAKCiMjIyAxLjEuMAoKVGhpcyBpcyBhIG1ham9yIHJlbGVhc2UuIENvbnNpZGVyIGl0IGEgQmV0YSB2ZXJzaW9uLiBOZXcgZXhhbXBsZXMgb24gdGhlIHdheS4gIApGZWVsIGZyZWUgdG8gb3BlbiBhbiBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxpbWFuYWMvZGVmb2xkLWFzdGFyL2lzc3VlcykgaWYgeW91IGVuY291bnRlciBhbnkgcHJvYmxlbXMuCgoKLSBOb3cgc3VwcG9ydCBvZGQtciwgZXZlbi1yLCBvZGQtcSBhbmQgZXZlbi1xIFtoZXhhZ29uYWwgZ3JpZHNdKGh0dHBzOi8vd3d3LnJlZGJsb2JnYW1lcy5jb20vZ3JpZHMvaGV4YWdvbnMvI2Nvb3JkaW5hdGVzLW9mZnNldCkuIAotIEVudGl0aWVzOiBZb3UgY2FuIG5vdyB0YXJnZXQgZW50aXRpZXMgbGlrZSBwb3Rpb25zLCBjaGVzdHMsIG9yIGVuZW1pZXMsIHdoaWNoIHdlcmUgbm90IHBvc3NpYmxlIHRvIHNvbHZlIG9uIHRoZSBtYXAgYmVmb3JlLiBZb3UgY2FuIHRvZ2dsZSBgYXN0YXIudXNlX2VudGl0aWVzKClgIGJlZm9yZSBjYWxsaW5nIHRoZSBgYXN0YXIuc29sdmUoKWAgYW5kIGBhc3Rhci5zb2x2ZV9uZWFyKClgIG1ldGhvZHMuIAotIFBhcnRpYWwgY29kZSByZWZhY3RvcmluZyhuZWFybHkgJTMwKSBmb3IgYmV0dGVyIHJlYWRhYmlsaXR5LCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudChtaW5pbWFsKSBhbmQgRGVmb2xkIGNvbXBhdGliaWxpdHkuIEknbGwgY29udGludWUgdG8gaW1wcm92ZSBpdC4gQWxtb3N0IGV2ZXJ5dGhpbmcgaXMgbm93IHByZWFsbG9jYXRlZC4gWW91IG1heSBoaXQgdGhlIGxpbWl0cy4gSWYgc28sIGZlZWwgZnJlZSB0byBvcGVuIGFuIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL3NlbGltYW5hYy9kZWZvbGQtYXN0YXIvaXNzdWVzKQotIGBhc3Rhci5wcmludF9tYXAoKWAgYWRkZWQuIFlvdSBjYW4gcHJpbnQgdGhlIGxhdGVzdCBtYXAgc3RhdGUgZm9yIGRlYnVnIHB1cnBvc2VzLgotIGBhc3Rhci5zb2x2ZSgpYCBhbmQgYGFzdGFyLnNvbHZlX25lYXIoKWAgbm93IGFsc28gcmV0dXJucyB0aWxlIGNvbnRlbnQgSUQuCi0gYGFzdGFyLm1hcF92ZmxpcCgpYCBhbmQgYGFzdGFyLm1hcF9oZmxpcCgpYCBhZGRlZC4gWW91IGNhbiBub3cgZmxpcCB0aGUgbWFwLgotIGBhc3Rhci5yZXNldCgpYCBhZGRlZC4gSXQgY2xlYW5zIHVwIGV2ZXJ5dGhpbmcuIAotIE9wdGlvbmFsIHZlcnRpY2FsbHkgZmxpcCBtYXAgYWRkZWQgdG8gYXN0YXIuc2V0dXAoKS4gCi0gQVBJIERvY3VtZW50YXRpb24gdXBkYXRlZC4KCioqISEgQlJFQUtJTkcgQ0hBTkdFICEhKiogCgpUaGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGFibGVzIGFuZCB0aWxlIHBvc2l0aW9ucyBzdGFydHMgYXQgMS4gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHlvdSBjYW4gc2ltcGx5IHRvZ2dsZSBpdCBpbiBgYXN0YXIuc2V0dXAoKWAgb3IgYnkgdXNpbmcgYGFzdGFyLnVzZV96ZXJvKHRydWUpYC4KCgoxLjAuMyAgCgotIE5vIGNoYW5nZXMuIFRoaXMgaXMgdGhlIGZpbmFsIHJlbGVhc2UgYmVmb3JlIHYxLjEuCgoxLjAuMiAgCgotIGFzdGFyLnNldF9hdCBhbmQgYXN0YXIuZ2V0X2F0IGFkZGVkLgotIGFzdGFyLnRvb2dsZV96ZXJvIGFkZGVkLiAKCjEuMC4xICAKClNtYWxsIGJ1ZyBmaXhlcy4gW01vcmUgZGV0YWlsc10oaHR0cHM6Ly9mb3J1bS5kZWZvbGQuY29tL3QvYS1uYXRpdmUtZXh0ZW5zaW9uLzYwNDA1Lzk/dT1zZWxpbWFuYWMpIAoKMS4wICA",
					"AQAAAAAAAAABAAAArwMAAAAAAACbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"left_delete",
					null,
					"AQAAAK4DAAAAAAAArgMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAArwMAAAAAAACvAwAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"paste",
					null,
					"AQAAAB4CAAAAAAAASgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgIAAAAAAAAeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "\nSource:"
					},
					"CAAAAEoCAAAAAAAASwIAAAAAAAAAAAAASwIAAAAAAABMAgAAAAAAAAAAAABMAgAAAAAAAE0CAAAAAAAAAAAAAE0CAAAAAAAATgIAAAAAAAAAAAAATgIAAAAAAABPAgAAAAAAAAAAAABPAgAAAAAAAFACAAAAAAAAAAAAAFACAAAAAAAAUQIAAAAAAAAAAAAAUQIAAAAAAABSAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgIAAAAAAABKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFICAAAAAAAAUwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgIAAAAAAABSAgAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"paste",
					null,
					"AQAAAFMCAAAAAAAAhwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwIAAAAAAABTAgAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEoCAAAAAAAASwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgIAAAAAAABKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"insert",
					{
						"characters": "TODO"
					},
					"BQAAAKcCAAAAAAAAqAIAAAAAAAAAAAAAqAIAAAAAAACoAgAAAAAAAAMAAABXSVCoAgAAAAAAAKkCAAAAAAAAAAAAAKkCAAAAAAAAqgIAAAAAAAAAAAAAqgIAAAAAAACrAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgIAAAAAAACnAgAAAAAAAAAAAAAAAAAA"
				],
				[
					261,
					1,
					"paste",
					null,
					"AgAAAJcCAAAAAAAAmwIAAAAAAAAAAAAAmwIAAAAAAACbAgAAAAAAAAMAAABXSVA",
					"AQAAAAAAAAABAAAAlwIAAAAAAACaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"cut",
					null,
					"AQAAAF0FAAAAAAAAXQUAAAAAAACvBwAAKiBgYGBtYXBfaGVpZ2h0YGBgIChpbnQpIC0gSGVpZ2h0IG9mIHlvdXIgbWFwLiBUaGlzIGlzIGdlbmVyYWxseSB3aWR0aCBvZiB5b3VyIHRpbGVtYXAuIAoqIGBgYGRpcmVjdGlvbmBgYCAoZW51bSkgLSBNb3ZlbWVudCBkaXJlY3Rpb24gKGFzdGFyLkRJUkVDVElPTl9GT1VSIG9yIGFzdGFyLkRJUkVDVElPTl9FSUdIVCkKCgkqKmFzdGFyLkRJUkVDVElPTl9GT1VSKio6IE9uIGEgc3F1YXJlIGdyaWQgdGhhdCBhbGxvd3MgNCBkaXJlY3Rpb25zIG9mIG1vdmVtZW50IHVzaW5nIFtNYW5oYXR0YW4gZGlzdGFuY2VdKGh0dHA6Ly90aGVvcnkuc3RhbmZvcmQuZWR1L35hbWl0cC9HYW1lUHJvZ3JhbW1pbmcvSGV1cmlzdGljcy5odG1sI21hbmhhdHRhbi1kaXN0YW5jZSkgIAoJKiphc3Rhci5ESVJFQ1RJT05fRUlHSFQqKjogT24gYSBzcXVhcmUgZ3JpZCB0aGF0IGFsbG93cyA4IGRpcmVjdGlvbnMgb2YgbW92ZW1lbnQgdXNpbmcgW0V1Y2xpZGVhbiBkaXN0YW5jZV0oaHR0cDovL3RoZW9yeS5zdGFuZm9yZC5lZHUvfmFtaXRwL0dhbWVQcm9ncmFtbWluZy9IZXVyaXN0aWNzLmh0bWwjZXVjbGlkZWFuLWRpc3RhbmNlKQoKKiBgYGBhbGxvY2F0ZWBgYCAoaW50KSAtIEhvdyBtYW55IHN0YXRlcyBzaG91bGQgYmUgaW50ZXJuYWxseSBhbGxvY2F0ZWQgYXQgYSB0aW1lLiBUaGlzIGNhbiBiZSBoYXJkIHRvIGdldCBjb3JyZWN0LiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSwgdGhlIG1vcmUgbWVtb3J5IFBhdGZpbmRlciB3aWxsIHVzZS4KCgktIElmIHlvdSBoYXZlIGEgc21hbGwgbWFwIChhIGZldyB0aG91c2FuZCBzdGF0ZXM/KSBpdCBtYXkgbWFrZSBzZW5zZSB0byBwYXNzIGluIHRoZSBtYXhpbXVtIHZhbHVlLiBUaGlzIHdpbGwgY2FjaGUgZXZlcnl0aGluZywgYW5kIE1pY3JvUGF0aGVyIHdpbGwgb25seSBuZWVkIG9uZSBtYWluIG1lbW9yeSBhbGxvY2F0aW9uLiBGb3IgYSBjaGVzcyBib2FyZCwgYWxsb2NhdGUgIHdvdWxkIGJlIHNldCB0byA4eDggKDY0KQoJLSBJZiB5b3VyIG1hcCBpcyBsYXJnZSwgc29tZXRoaW5nIGxpa2UgMS80IHRoZSBudW1iZXIgb2YgcG9zc2libGUgc3RhdGVzIGlzIGdvb2QuCgktIElmIHlvdXIgc3RhdGUgc3BhY2UgaXMgaHVnZSwgdXNlIGEgbXVsdGlwbGUgKDUtMTB4KSBvZiB0aGUgbm9ybWFsIHBhdGguICJPY2Nhc2lvbmFsbHkiIGNhbGwgYGFzdGFyLnJlc2V0X2NhY2hlKClgIHRvIGZyZWUgdW51c2VkIG1lbW9yeS4KCiogYGBgdHlwaWNhbF9hZGphY2VudGBgYCAoaW50KSAtIFVzZWQgdG8gZGV0ZXJtaW5lIGNhY2hlIHNpemUuIFRoZSB0eXBpY2FsIG51bWJlciBvZiBhZGphY2VudCBzdGF0ZXMgdG8gYSBnaXZlbiBzdGF0ZS4gKE9uIGEgY2hlc3Nib2FyZCwgOC4pIEhpZ2hlciB2YWx1ZXMgdXNlIGEgbGl0dGxlIG1vcmUgbWVtb3J5LgoKKiBgYGBjYWNoZWBgYCAoYm9vbClbb3B0aW9uYWxdIC0gVHVybiBvbiBwYXRoIGNhY2hpbmcuIFVzZXMgbW9yZSBtZW1vcnkgKHlldCBhZ2FpbikgYnV0IGF0IGEgaHVnZSBzcGVlZCBhZHZhbnRhZ2UgaWYgeW91IG1heSBjYWxsIHRoZSBwYXRoZXIgd2l0aCB0aGUgc2FtZSBwYXRoIG9yIHN1Yi1wYXRoLCB3aGljaCBpcyBjb21tb24gZm9yIHBhdGhpbmcgb3ZlciBtYXBzIGluIGdhbWVzLiAgRGVmYXVsdCBpcyBgdHJ1ZWAKCiogIGBgYHVzZV96ZXJvYGBgIChib29sKVtvcHRpb25hbF0gLSBUb2dnbGUgc3RhcnQgaW5kZXggMCBvciAxIGZvciB0YWJsZXMgYW5kIHRpbGUgcG9zaXRpb25zLiBBbHNvIHlvdSBjYW4gc2V0IGl0IGJ5IGNhbGwgYGFzdGFyLnVzZV96ZXJvKClgLiAgRGVmYXVsdCBpcyBgZmFsc2VgCgoqIGBgYG1hcF92ZmxpcGBgYCAoYm9vbClbb3B0aW9uYWxdIC0gRmxpcHMgdGhlIG1hcCB2ZXJ0aWNhbGx5LiBUaGlzIGRvZXNuJ3QgZmxpcCB0aGUgY29vcmRpbmF0ZXMuIEFsc28geW91IGNhbiBzZXQgaXQgYnkgY2FsbCBgYXN0YXIubWFwX3ZmbGlwKClgLiBEZWZhdWx0IGlzIGBmYWxzZWA",
					"AQAAAAAAAAABAAAAXQUAAAAAAAAMDQAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF0FAAAAAAAAXgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQUAAAAAAABdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"paste",
					null,
					"AQAAAF4FAAAAAAAAfQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"insert_snippet",
					{
						"contents": "${TM_CURRENT_LINE/^(?:\\s*((?:>\\s*)*)([-+*])(\\s+)).*/\n$1$2$3/}"
					},
					"AQAAAH0FAAAAAAAAgAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQUAAAAAAAB9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"run_macro_file",
					{
						"file": "Packages/MarkdownEditing/macros/Delete Empty List Item.sublime-macro"
					},
					"AgAAAH4FAAAAAAAAfgUAAAAAAAACAAAAKiB+BQAAAAAAAH4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAUAAAAAAACABQAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAH4FAAAAAAAAfwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgUAAAAAAAB+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "IMPORTANT"
					},
					"CQAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIkAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					11,
					"left_delete",
					null,
					"CwAAAIoAAAAAAAAAigAAAAAAAAABAAAAIIkAAAAAAAAAiQAAAAAAAAABAAAAOogAAAAAAAAAiAAAAAAAAAABAAAAVIcAAAAAAAAAhwAAAAAAAAABAAAAToYAAAAAAAAAhgAAAAAAAAABAAAAQYUAAAAAAAAAhQAAAAAAAAABAAAAVIQAAAAAAAAAhAAAAAAAAAABAAAAUoMAAAAAAAAAgwAAAAAAAAABAAAAT4IAAAAAAAAAggAAAAAAAAABAAAAUIEAAAAAAAAAgQAAAAAAAAABAAAATYAAAAAAAAAAgAAAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					2,
					"left_delete",
					null,
					"AgAAAIEAAAAAAAAAgQAAAAAAAAABAAAACoAAAAAAAAAAgAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAAAA"
				],
				[
					334,
					1,
					"paste",
					null,
					"AgAAADQEAAAAAAAAYAQAAAAAAAAAAAAAYAQAAAAAAABgBAAAAAAAAGwAAABhc3Rhci5zZXR1cChtYXBfd2lkdGgsIG1hcF9oZWlnaHQsIGRpcmVjdGlvbiwgYWxsb2NhdGUsIHR5cGljYWxfYWRqYWNlbnQsIFtjYWNoZV0sIFt1c2VfemVyb10sIFttYXBfdmZsaXBdICk",
					"AQAAAAAAAAABAAAANAQAAAAAAACgBAAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "Parse"
					},
					"BgAAAGIEAAAAAAAAYwQAAAAAAAAAAAAAYwQAAAAAAABjBAAAAAAAAE4AAABJbml0aWFsIHNldHVwLiBZb3UgaGF2ZSB0byBzZXR1cCB0aGUgYXN0YXIgYmVmb3JlIGNhbGxpbmcgYW55IG90aGVyIG1ldGhvZHMuICBjBAAAAAAAAGQEAAAAAAAAAAAAAGQEAAAAAAAAZQQAAAAAAAAAAAAAZQQAAAAAAABmBAAAAAAAAAAAAABmBAAAAAAAAGcEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgQAAAAAAACwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAGcEAAAAAAAAaAQAAAAAAAAAAAAAaAQAAAAAAABpBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwQAAAAAAABnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"left_delete",
					null,
					"AQAAAGgEAAAAAAAAaAQAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAaQQAAAAAAABpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "b3"
					},
					"AgAAAGgEAAAAAAAAaQQAAAAAAAAAAAAAaQQAAAAAAABqBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAQAAAAAAABoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": " Editor"
					},
					"BwAAAGoEAAAAAAAAawQAAAAAAAAAAAAAawQAAAAAAABsBAAAAAAAAAAAAABsBAAAAAAAAG0EAAAAAAAAAAAAAG0EAAAAAAAAbgQAAAAAAAAAAAAAbgQAAAAAAABvBAAAAAAAAAAAAABvBAAAAAAAAHAEAAAAAAAAAAAAAHAEAAAAAAAAcQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagQAAAAAAABqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHEEAAAAAAAAcgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQQAAAAAAABxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "project"
					},
					"BwAAAHIEAAAAAAAAcwQAAAAAAAAAAAAAcwQAAAAAAAB0BAAAAAAAAAAAAAB0BAAAAAAAAHUEAAAAAAAAAAAAAHUEAAAAAAAAdgQAAAAAAAAAAAAAdgQAAAAAAAB3BAAAAAAAAAAAAAB3BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAeQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgQAAAAAAAByBAAAAAAAAAAAAAAAAPC/"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": " jsop"
					},
					"BQAAAHkEAAAAAAAAegQAAAAAAAAAAAAAegQAAAAAAAB7BAAAAAAAAAAAAAB7BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAfQQAAAAAAAAAAAAAfQQAAAAAAAB+BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"left_delete",
					null,
					"AQAAAH0EAAAAAAAAfQQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAfgQAAAAAAAB+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAH0EAAAAAAAAfgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQQAAAAAAAB9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": " value."
					},
					"BwAAAH4EAAAAAAAAfwQAAAAAAAAAAAAAfwQAAAAAAACABAAAAAAAAAAAAACABAAAAAAAAIEEAAAAAAAAAAAAAIEEAAAAAAAAggQAAAAAAAAAAAAAggQAAAAAAACDBAAAAAAAAAAAAACDBAAAAAAAAIQEAAAAAAAAAAAAAIQEAAAAAAAAhQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgQAAAAAAAB+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIUEAAAAAAAAhgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQQAAAAAAACFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					8,
					"left_delete",
					null,
					"CAAAAIUEAAAAAAAAhQQAAAAAAAABAAAAIIQEAAAAAAAAhAQAAAAAAAABAAAALoMEAAAAAAAAgwQAAAAAAAABAAAAZYIEAAAAAAAAggQAAAAAAAABAAAAdYEEAAAAAAAAgQQAAAAAAAABAAAAbIAEAAAAAAAAgAQAAAAAAAABAAAAYX8EAAAAAAAAfwQAAAAAAAABAAAAdn4EAAAAAAAAfgQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhgQAAAAAAACGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAH4EAAAAAAAAfwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgQAAAAAAAB+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH8EAAAAAAAAgAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwQAAAAAAAB/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "json"
					},
					"BAAAAGgEAAAAAAAAaQQAAAAAAAAAAAAAaQQAAAAAAABqBAAAAAAAAAAAAABqBAAAAAAAAGsEAAAAAAAAAAAAAGsEAAAAAAAAbAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAQAAAAAAABoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": " file"
					},
					"BQAAAGwEAAAAAAAAbQQAAAAAAAAAAAAAbQQAAAAAAABuBAAAAAAAAAAAAABuBAAAAAAAAG8EAAAAAAAAAAAAAG8EAAAAAAAAcAQAAAAAAAAAAAAAcAQAAAAAAABxBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAQAAAAAAABsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": " ex"
					},
					"AwAAAHEEAAAAAAAAcgQAAAAAAAAAAAAAcgQAAAAAAABzBAAAAAAAAAAAAABzBAAAAAAAAHQEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQQAAAAAAABxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": "ported"
					},
					"BgAAAHQEAAAAAAAAdQQAAAAAAAAAAAAAdQQAAAAAAAB2BAAAAAAAAAAAAAB2BAAAAAAAAHcEAAAAAAAAAAAAAHcEAAAAAAAAeAQAAAAAAAAAAAAAeAQAAAAAAAB5BAAAAAAAAAAAAAB5BAAAAAAAAHoEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAAHoEAAAAAAAAewQAAAAAAAAAAAAAewQAAAAAAAB8BAAAAAAAAAAAAAB8BAAAAAAAAH0EAAAAAAAAAAAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB/BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH8EAAAAAAAAgAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwQAAAAAAAB/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"left_delete",
					null,
					"AQAAAIoEAAAAAAAAigQAAAAAAAAPAAAAcHJvamVjdCBqc29uLiAg",
					"AQAAAAAAAAABAAAAigQAAAAAAACZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAIoEAAAAAAAAiwQAAAAAAAAAAAAAiwQAAAAAAACMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigQAAAAAAACKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwEAAAAAAAAjQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAQAAAAAAACMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "Project"
					},
					"BwAAAI0EAAAAAAAAjgQAAAAAAAAAAAAAjgQAAAAAAACPBAAAAAAAAAAAAACPBAAAAAAAAJAEAAAAAAAAAAAAAJAEAAAAAAAAkQQAAAAAAAAAAAAAkQQAAAAAAACSBAAAAAAAAAAAAACSBAAAAAAAAJMEAAAAAAAAAAAAAJMEAAAAAAAAlAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQQAAAAAAACNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAJQEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACWBAAAAAAAAAAAAACWBAAAAAAAAJcEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAQAAAAAAACUBAAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcEAAAAAAAAmAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwQAAAAAAACXBAAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": "using"
					},
					"BgAAAIoEAAAAAAAAiwQAAAAAAAAAAAAAiwQAAAAAAACLBAAAAAAAAAIAAAAtPosEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACNBAAAAAAAAAAAAACNBAAAAAAAAI4EAAAAAAAAAAAAAI4EAAAAAAAAjwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigQAAAAAAACMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": "Export"
					},
					"BgAAAJsEAAAAAAAAnAQAAAAAAAAAAAAAnAQAAAAAAACdBAAAAAAAAAAAAACdBAAAAAAAAJ4EAAAAAAAAAAAAAJ4EAAAAAAAAnwQAAAAAAAAAAAAAnwQAAAAAAACgBAAAAAAAAAAAAACgBAAAAAAAAKEEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwQAAAAAAACbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAKEEAAAAAAAAogQAAAAAAAAAAAAAogQAAAAAAACjBAAAAAAAAAAAAACjBAAAAAAAAKQEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQQAAAAAAAChBAAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKQEAAAAAAAApQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAQAAAAAAACkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					389,
					1,
					"insert",
					{
						"characters": "Project"
					},
					"BwAAAKUEAAAAAAAApgQAAAAAAAAAAAAApgQAAAAAAACnBAAAAAAAAAAAAACnBAAAAAAAAKgEAAAAAAAAAAAAAKgEAAAAAAAAqQQAAAAAAAAAAAAAqQQAAAAAAACqBAAAAAAAAAAAAACqBAAAAAAAAKsEAAAAAAAAAAAAAKsEAAAAAAAArAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQQAAAAAAAClBAAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAKwEAAAAAAAArQQAAAAAAAAAAAAArQQAAAAAAACuBAAAAAAAAAAAAACuBAAAAAAAAK8EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAQAAAAAAACsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					391,
					1,
					"insert",
					{
						"characters": " JSON"
					},
					"BQAAAK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAACxBAAAAAAAALIEAAAAAAAAAAAAALIEAAAAAAAAswQAAAAAAAAAAAAAswQAAAAAAAC0BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"insert_snippet",
					{
						"contents": "[$SELECTION]$0"
					},
					"AgAAAIAEAAAAAAAAgAQAAAAAAAAJAAAAYjMgRWRpdG9ygAQAAAAAAACLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAQAAAAAAACJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIsEAAAAAAAAjQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwQAAAAAAACLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"paste",
					null,
					"AQAAAIwEAAAAAAAAuAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAQAAAAAAACMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					1,
					"",
					null,
					"AQAAAMAEAAAAAAAAwQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAQAAAAAAADABAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"",
					null,
					"AQAAAMAEAAAAAAAAwAQAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAA5QQAAAAAAADlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAMAEAAAAAAAAwQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAQAAAAAAADABAAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"",
					null,
					"AQAAAMEEAAAAAAAAwgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQQAAAAAAADBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"",
					null,
					"AQAAAMEEAAAAAAAAwQQAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAwgQAAAAAAADCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAMEEAAAAAAAAwgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQQAAAAAAADBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					1,
					"cut",
					null,
					"AQAAAMEEAAAAAAAAwQQAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAwQQAAAAAAADCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"paste",
					null,
					"AQAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QQAAAAAAADlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"insert_snippet",
					{
						"contents": "[$SELECTION]$0"
					},
					"AgAAAFEEAAAAAAAAUQQAAAAAAAAOAAAAY3VzdG9tTm9kZUxpc3RRBAAAAAAAAGEEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQQAAAAAAABfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"paste",
					null,
					"AgAAAAEFAAAAAAAACwUAAAAAAAAAAAAACwUAAAAAAAALBQAAAAAAAAkAAABtYXBfd2lkdGg",
					"AQAAAAAAAAABAAAAAQUAAAAAAAAKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": "json"
					},
					"BQAAABAFAAAAAAAAEQUAAAAAAAAAAAAAEQUAAAAAAAARBQAAAAAAAAMAAABpbnQRBQAAAAAAABIFAAAAAAAAAAAAABIFAAAAAAAAEwUAAAAAAAAAAAAAEwUAAAAAAAAUBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAUAAAAAAAATBQAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "json"
					},
					"BQAAABgFAAAAAAAAGQUAAAAAAAAAAAAAGQUAAAAAAAAZBQAAAAAAADwAAABXaWR0aCBvZiB5b3VyIG1hcC4gVGhpcyBpcyBnZW5lcmFsbHkgd2lkdGggb2YgeW91ciB0aWxlbWFwLiAZBQAAAAAAABoFAAAAAAAAAAAAABoFAAAAAAAAGwUAAAAAAAAAAAAAGwUAAAAAAAAcBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAUAAAAAAABUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABwFAAAAAAAAHQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAUAAAAAAAAcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAAB0FAAAAAAAAHgUAAAAAAAAAAAAAHgUAAAAAAAAfBQAAAAAAAAAAAAAfBQAAAAAAACAFAAAAAAAAAAAAACAFAAAAAAAAIQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQUAAAAAAAAdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACEFAAAAAAAAIgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQUAAAAAAAAhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "n3"
					},
					"AgAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgUAAAAAAAAiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": " E"
					},
					"AgAAACQFAAAAAAAAJQUAAAAAAAAAAAAAJQUAAAAAAAAmBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAUAAAAAAAAkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					4,
					"left_delete",
					null,
					"BAAAACUFAAAAAAAAJQUAAAAAAAABAAAARSQFAAAAAAAAJAUAAAAAAAABAAAAICMFAAAAAAAAIwUAAAAAAAABAAAAMyIFAAAAAAAAIgUAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAJgUAAAAAAAAmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					1,
					"insert",
					{
						"characters": "b3"
					},
					"AgAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgUAAAAAAAAiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": " Editor"
					},
					"BwAAACQFAAAAAAAAJQUAAAAAAAAAAAAAJQUAAAAAAAAmBQAAAAAAAAAAAAAmBQAAAAAAACcFAAAAAAAAAAAAACcFAAAAAAAAKAUAAAAAAAAAAAAAKAUAAAAAAAApBQAAAAAAAAAAAAApBQAAAAAAACoFAAAAAAAAAAAAACoFAAAAAAAAKwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAUAAAAAAAAkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert_snippet",
					{
						"contents": "${TM_CURRENT_LINE/^(?:\\s*((?:>\\s*)*)([-+*])(\\s+)).*/\n$1$2$3/}"
					},
					"AQAAACwFAAAAAAAALwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAUAAAAAAAAsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"paste",
					null,
					"AQAAAC8FAAAAAAAAXwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwUAAAAAAAAvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					474,
					1,
					"left_delete",
					null,
					"AQAAAC0FAAAAAAAALQUAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAALgUAAAAAAAAuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"paste",
					null,
					"AgAAADMFAAAAAAAAQQUAAAAAAAAAAAAAQQUAAAAAAABBBQAAAAAAAAoAAABkYXRhX3RhYmxl",
					"AQAAAAAAAAABAAAAMwUAAAAAAAA9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"left_delete",
					null,
					"AQAAAC0FAAAAAAAALQUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAALgUAAAAAAAAuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"paste",
					null,
					"AQAAAEoFAAAAAAAAVQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgUAAAAAAABKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": "table"
					},
					"BgAAAEUFAAAAAAAARgUAAAAAAAAAAAAARgUAAAAAAABGBQAAAAAAAAQAAABqc29uRgUAAAAAAABHBQAAAAAAAAAAAABHBQAAAAAAAEgFAAAAAAAAAAAAAEgFAAAAAAAASQUAAAAAAAAAAAAASQUAAAAAAABKBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQUAAAAAAABJBQAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"insert",
					{
						"characters": "custrom"
					},
					"CAAAAFkFAAAAAAAAWgUAAAAAAAAAAAAAWgUAAAAAAABaBQAAAAAAABQAAABqc29uIGZyb20gYjMgRWRpdG9yIFoFAAAAAAAAWwUAAAAAAAAAAAAAWwUAAAAAAABcBQAAAAAAAAAAAABcBQAAAAAAAF0FAAAAAAAAAAAAAF0FAAAAAAAAXgUAAAAAAAAAAAAAXgUAAAAAAABfBQAAAAAAAAAAAABfBQAAAAAAAGAFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQUAAAAAAABtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					3,
					"left_delete",
					null,
					"AwAAAF8FAAAAAAAAXwUAAAAAAAABAAAAbV4FAAAAAAAAXgUAAAAAAAABAAAAb10FAAAAAAAAXQUAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAYAUAAAAAAABgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": "om"
					},
					"AgAAAF0FAAAAAAAAXgUAAAAAAAAAAAAAXgUAAAAAAABfBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQUAAAAAAABdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": " node"
					},
					"BQAAAF8FAAAAAAAAYAUAAAAAAAAAAAAAYAUAAAAAAABhBQAAAAAAAAAAAABhBQAAAAAAAGIFAAAAAAAAAAAAAGIFAAAAAAAAYwUAAAAAAAAAAAAAYwUAAAAAAABkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": " cl"
					},
					"AwAAAGQFAAAAAAAAZQUAAAAAAAAAAAAAZQUAAAAAAABmBQAAAAAAAAAAAABmBQAAAAAAAGcFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAUAAAAAAABkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAAGcFAAAAAAAAaAUAAAAAAAAAAAAAaAUAAAAAAABpBQAAAAAAAAAAAABpBQAAAAAAAGoFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwUAAAAAAABnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": " list"
					},
					"BQAAAGoFAAAAAAAAawUAAAAAAAAAAAAAawUAAAAAAABsBQAAAAAAAAAAAABsBQAAAAAAAG0FAAAAAAAAAAAAAG0FAAAAAAAAbgUAAAAAAAAAAAAAbgUAAAAAAABvBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagUAAAAAAABqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAG8FAAAAAAAAcAUAAAAAAAAAAAAAcAUAAAAAAABxBQAAAAAAAAAAAABxBQAAAAAAAHIFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwUAAAAAAABvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": " table"
					},
					"BgAAAHIFAAAAAAAAcwUAAAAAAAAAAAAAcwUAAAAAAAB0BQAAAAAAAAAAAAB0BQAAAAAAAHUFAAAAAAAAAAAAAHUFAAAAAAAAdgUAAAAAAAAAAAAAdgUAAAAAAAB3BQAAAAAAAAAAAAB3BQAAAAAAAHgFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgUAAAAAAAByBQAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"run_macro_file",
					{
						"file": "Packages/MarkdownEditing/macros/Add Line and Delete Trailing Hashes.sublime-macro"
					},
					"AgAAACoEAAAAAAAAKgQAAAAAAAAFAAAAIyBBUEkqBAAAAAAAADAEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwQAAAAAAAAvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADAEAAAAAAAAMQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAQAAAAAAAAwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": "This"
					},
					"BAAAADEEAAAAAAAAMgQAAAAAAAAAAAAAMgQAAAAAAAAzBAAAAAAAAAAAAAAzBAAAAAAAADQEAAAAAAAAAAAAADQEAAAAAAAANQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQQAAAAAAAAxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": " li"
					},
					"AwAAADUEAAAAAAAANgQAAAAAAAAAAAAANgQAAAAAAAA3BAAAAAAAAAAAAAA3BAAAAAAAADgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQQAAAAAAAA1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": "brary"
					},
					"BQAAADgEAAAAAAAAOQQAAAAAAAAAAAAAOQQAAAAAAAA6BAAAAAAAAAAAAAA6BAAAAAAAADsEAAAAAAAAAAAAADsEAAAAAAAAPAQAAAAAAAAAAAAAPAQAAAAAAAA9BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAQAAAAAAAA4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					531,
					1,
					"insert",
					{
						"characters": " usa"
					},
					"BAAAAD0EAAAAAAAAPgQAAAAAAAAAAAAAPgQAAAAAAAA/BAAAAAAAAAAAAAA/BAAAAAAAAEAEAAAAAAAAAAAAAEAEAAAAAAAAQQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQQAAAAAAAA9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"left_delete",
					null,
					"AQAAAEAEAAAAAAAAQAQAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAQQQAAAAAAABBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAAEAEAAAAAAAAQQQAAAAAAAAAAAAAQQQAAAAAAABCBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAQAAAAAAABABAAAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIEAAAAAAAAQwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgQAAAAAAABCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					535,
					1,
					"paste",
					null,
					"AQAAAEMEAAAAAAAATgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwQAAAAAAABDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"insert_snippet",
					{
						"contents": "[$SELECTION]$0"
					},
					"AgAAAEMEAAAAAAAAQwQAAAAAAAALAAAAbWlkZGxlY2xhc3NDBAAAAAAAAFAEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwQAAAAAAABOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFAEAAAAAAAAUgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAQAAAAAAABQBAAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					1,
					"paste",
					null,
					"AQAAAFEEAAAAAAAAdgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQQAAAAAAABRBAAAAAAAAAAAAAAAAPC/"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": " internally."
					},
					"DAAAAHcEAAAAAAAAeAQAAAAAAAAAAAAAeAQAAAAAAAB5BAAAAAAAAAAAAAB5BAAAAAAAAHoEAAAAAAAAAAAAAHoEAAAAAAAAewQAAAAAAAAAAAAAewQAAAAAAAB8BAAAAAAAAAAAAAB8BAAAAAAAAH0EAAAAAAAAAAAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB/BAAAAAAAAAAAAAB/BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAgQQAAAAAAAAAAAAAgQQAAAAAAACCBAAAAAAAAAAAAACCBAAAAAAAAIMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwQAAAAAAAB3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIMEAAAAAAAAhAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwQAAAAAAACDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "If"
					},
					"AgAAAIQEAAAAAAAAhQQAAAAAAAAAAAAAhQQAAAAAAACGBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAQAAAAAAACEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					550,
					1,
					"insert",
					{
						"characters": " you"
					},
					"BAAAAIYEAAAAAAAAhwQAAAAAAAAAAAAAhwQAAAAAAACIBAAAAAAAAAAAAACIBAAAAAAAAIkEAAAAAAAAAAAAAIkEAAAAAAAAigQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgQAAAAAAACGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": " are"
					},
					"BAAAAIoEAAAAAAAAiwQAAAAAAAAAAAAAiwQAAAAAAACMBAAAAAAAAAAAAACMBAAAAAAAAI0EAAAAAAAAAAAAAI0EAAAAAAAAjgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigQAAAAAAACKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					552,
					1,
					"insert",
					{
						"characters": " planning"
					},
					"CQAAAI4EAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACQBAAAAAAAAAAAAACQBAAAAAAAAJEEAAAAAAAAAAAAAJEEAAAAAAAAkgQAAAAAAAAAAAAAkgQAAAAAAACTBAAAAAAAAAAAAACTBAAAAAAAAJQEAAAAAAAAAAAAAJQEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACWBAAAAAAAAAAAAACWBAAAAAAAAJcEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgQAAAAAAACOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAJcEAAAAAAAAmAQAAAAAAAAAAAAAmAQAAAAAAACZBAAAAAAAAAAAAACZBAAAAAAAAJoEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwQAAAAAAACXBAAAAAAAAAAAAAAAAPC/"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": " create"
					},
					"BwAAAJoEAAAAAAAAmwQAAAAAAAAAAAAAmwQAAAAAAACcBAAAAAAAAAAAAACcBAAAAAAAAJ0EAAAAAAAAAAAAAJ0EAAAAAAAAngQAAAAAAAAAAAAAngQAAAAAAACfBAAAAAAAAAAAAACfBAAAAAAAAKAEAAAAAAAAAAAAAKAEAAAAAAAAoQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgQAAAAAAACaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": " custom"
					},
					"BwAAAKEEAAAAAAAAogQAAAAAAAAAAAAAogQAAAAAAACjBAAAAAAAAAAAAACjBAAAAAAAAKQEAAAAAAAAAAAAAKQEAAAAAAAApQQAAAAAAAAAAAAApQQAAAAAAACmBAAAAAAAAAAAAACmBAAAAAAAAKcEAAAAAAAAAAAAAKcEAAAAAAAAqAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQQAAAAAAAChBAAAAAAAAAAAAAAAAPC/"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": " nodes,"
					},
					"BwAAAKgEAAAAAAAAqQQAAAAAAAAAAAAAqQQAAAAAAACqBAAAAAAAAAAAAACqBAAAAAAAAKsEAAAAAAAAAAAAAKsEAAAAAAAArAQAAAAAAAAAAAAArAQAAAAAAACtBAAAAAAAAAAAAACtBAAAAAAAAK4EAAAAAAAAAAAAAK4EAAAAAAAArwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAQAAAAAAACoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					557,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8EAAAAAAAAsAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"insert",
					{
						"characters": "you"
					},
					"AwAAALAEAAAAAAAAsQQAAAAAAAAAAAAAsQQAAAAAAACyBAAAAAAAAAAAAACyBAAAAAAAALMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAQAAAAAAACwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": " have"
					},
					"BQAAALMEAAAAAAAAtAQAAAAAAAAAAAAAtAQAAAAAAAC1BAAAAAAAAAAAAAC1BAAAAAAAALYEAAAAAAAAAAAAALYEAAAAAAAAtwQAAAAAAAAAAAAAtwQAAAAAAAC4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswQAAAAAAACzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAALgEAAAAAAAAuQQAAAAAAAAAAAAAuQQAAAAAAAC6BAAAAAAAAAAAAAC6BAAAAAAAALsEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAQAAAAAAAC4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"insert",
					{
						"characters": " famil"
					},
					"BgAAALsEAAAAAAAAvAQAAAAAAAAAAAAAvAQAAAAAAAC9BAAAAAAAAAAAAAC9BAAAAAAAAL4EAAAAAAAAAAAAAL4EAAAAAAAAvwQAAAAAAAAAAAAAvwQAAAAAAADABAAAAAAAAAAAAADABAAAAAAAAMEEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwQAAAAAAAC7BAAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": "ei"
					},
					"AgAAAMEEAAAAAAAAwgQAAAAAAAAAAAAAwgQAAAAAAADDBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQQAAAAAAADBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAMMEAAAAAAAAxAQAAAAAAAAAAAAAxAQAAAAAAADFBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwQAAAAAAADDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": " with"
					},
					"BQAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADHBAAAAAAAAAAAAADHBAAAAAAAAMgEAAAAAAAAAAAAAMgEAAAAAAAAyQQAAAAAAAAAAAAAyQQAAAAAAADKBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQQAAAAAAADFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoEAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygQAAAAAAADKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"paste",
					null,
					"AQAAAMsEAAAAAAAA1gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywQAAAAAAADLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					577,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAANYEAAAAAAAA1wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gQAAAAAAADWBAAAAAAAAAAAAAAAAPC/"
				],
				[
					583,
					1,
					"insert",
					{
						"characters": "be"
					},
					"AgAAALwEAAAAAAAAvQQAAAAAAAAAAAAAvQQAAAAAAAC+BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAQAAAAAAAC8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					584,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL4EAAAAAAAAvwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgQAAAAAAAC+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAC0GAAAAAAAALgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQYAAAAAAAAtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					617,
					1,
					"paste",
					null,
					"AgAAADcGAAAAAAAASQYAAAAAAAAAAAAASQYAAAAAAABJBgAAAAAAAAUAAAB2YWx1ZQ",
					"AQAAAAAAAAABAAAANwYAAAAAAAA8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					622,
					1,
					"insert",
					{
						"characters": "table"
					},
					"BgAAAE4GAAAAAAAATwYAAAAAAAAAAAAATwYAAAAAAABPBgAAAAAAAAMAAABpbnRPBgAAAAAAAFAGAAAAAAAAAAAAAFAGAAAAAAAAUQYAAAAAAAAAAAAAUQYAAAAAAABSBgAAAAAAAAAAAABSBgAAAAAAAFMGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgYAAAAAAABRBgAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFQGAAAAAAAAVQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAYAAAAAAABUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					629,
					1,
					"insert",
					{
						"characters": "Tree"
					},
					"BAAAAFUGAAAAAAAAVgYAAAAAAAAAAAAAVgYAAAAAAABXBgAAAAAAAAAAAABXBgAAAAAAAFgGAAAAAAAAAAAAAFgGAAAAAAAAWQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQYAAAAAAABVBgAAAAAAAAAAAAAAAPC/"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": " table"
					},
					"BgAAAFkGAAAAAAAAWgYAAAAAAAAAAAAAWgYAAAAAAABbBgAAAAAAAAAAAABbBgAAAAAAAFwGAAAAAAAAAAAAAFwGAAAAAAAAXQYAAAAAAAAAAAAAXQYAAAAAAABeBgAAAAAAAAAAAABeBgAAAAAAAF8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQYAAAAAAABZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					631,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8GAAAAAAAAYAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwYAAAAAAABfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					632,
					1,
					"insert",
					{
						"characters": "paired"
					},
					"BgAAAGAGAAAAAAAAYQYAAAAAAAAAAAAAYQYAAAAAAABiBgAAAAAAAAAAAABiBgAAAAAAAGMGAAAAAAAAAAAAAGMGAAAAAAAAZAYAAAAAAAAAAAAAZAYAAAAAAABlBgAAAAAAAAAAAABlBgAAAAAAAGYGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAYAAAAAAABgBgAAAAAAAAAAAAAAAPC/"
				],
				[
					633,
					1,
					"insert",
					{
						"characters": " by"
					},
					"AwAAAGYGAAAAAAAAZwYAAAAAAAAAAAAAZwYAAAAAAABoBgAAAAAAAAAAAABoBgAAAAAAAGkGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgYAAAAAAABmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					634,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkGAAAAAAAAagYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQYAAAAAAABpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"insert",
					{
						"characters": "Tree"
					},
					"BAAAAGoGAAAAAAAAawYAAAAAAAAAAAAAawYAAAAAAABsBgAAAAAAAAAAAABsBgAAAAAAAG0GAAAAAAAAAAAAAG0GAAAAAAAAbgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagYAAAAAAABqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4GAAAAAAAAbwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgYAAAAAAABuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					637,
					1,
					"insert",
					{
						"characters": "ban"
					},
					"AwAAAG8GAAAAAAAAcAYAAAAAAAAAAAAAcAYAAAAAAABxBgAAAAAAAAAAAABxBgAAAAAAAHIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwYAAAAAAABvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					3,
					"left_delete",
					null,
					"AwAAAHEGAAAAAAAAcQYAAAAAAAABAAAAbnAGAAAAAAAAcAYAAAAAAAABAAAAYW8GAAAAAAAAbwYAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAcgYAAAAAAAByBgAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": "names"
					},
					"BQAAAG8GAAAAAAAAcAYAAAAAAAAAAAAAcAYAAAAAAABxBgAAAAAAAAAAAABxBgAAAAAAAHIGAAAAAAAAAAAAAHIGAAAAAAAAcwYAAAAAAAAAAAAAcwYAAAAAAAB0BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwYAAAAAAABvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"cut",
					null,
					"AQAAAHYGAAAAAAAAdgYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdwYAAAAAAAB2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"left_delete",
					null,
					"AQAAAHUGAAAAAAAAdQYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdgYAAAAAAAB2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					660,
					1,
					"paste",
					null,
					"AgAAAIsGAAAAAAAA0QcAAAAAAAAAAAAA0QcAAAAAAADRBwAAAAAAAKABAABsb2NhbCBtYXBfd2lkdGggPSA1CmxvY2FsIG1hcF9oZWlnaHQgPSA0CmxvY2FsIGRpcmVjdGlvbiA9IGFzdGFyLkRJUkVDVElPTl9FSUdIVApsb2NhbCBhbGxvY2F0ZSA9IG1hcF93aWR0aCAqIG1hcF9oZWlnaHQKbG9jYWwgdHlwaWNhbF9hZGphY2VudCA9IDgKbG9jYWwgY2FjaGUgPSB0cnVlICAgICAtLSBPcHRpb25hbC4gRGVmYXVsdCBpcyB0cnVlCmxvY2FsIHVzZV96ZXJvID0gZmFsc2UgLS0gcHRpb25hbC4gRGVmYXVsdCBpcyBmYWxzZSA9IDEgYmFzZWQKbG9jYWwgZmxpcF9tYXAgPSBmYWxzZSAtLSBPcHRpb25hbC4gRGVmYXVsdCBpcyBmYWxzZQoKYXN0YXIuc2V0dXAobWFwX3dpZHRoLCBtYXBfaGVpZ2h0LCBkaXJlY3Rpb24sIGFsbG9jYXRlLCB0eXBpY2FsX2FkamFjZW50LCBjYWNoZSwgdXNlX3plcm8sIGZsaXBfbWFwKQ",
					"AQAAAAAAAAABAAAAKwgAAAAAAACLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					1,
					"insert",
					{
						"characters": "path_t"
					},
					"BwAAALcGAAAAAAAAuAYAAAAAAAAAAAAAuAYAAAAAAAC4BgAAAAAAAAkAAABtYWluL2pzb264BgAAAAAAALkGAAAAAAAAAAAAALkGAAAAAAAAugYAAAAAAAAAAAAAugYAAAAAAAC7BgAAAAAAAAAAAAC7BgAAAAAAALwGAAAAAAAAAAAAALwGAAAAAAAAvQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwYAAAAAAADABgAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAL0GAAAAAAAAvgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQYAAAAAAAC9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"cut",
					null,
					"AQAAAL8GAAAAAAAAvwYAAAAAAAAFAAAAdGVzdF8",
					"AQAAAAAAAAABAAAAvwYAAAAAAADEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					694,
					1,
					"insert",
					{
						"characters": "your"
					},
					"BQAAAGUHAAAAAAAAZgcAAAAAAAAAAAAAZgcAAAAAAABmBwAAAAAAAAQAAABtYWluZgcAAAAAAABnBwAAAAAAAAAAAABnBwAAAAAAAGgHAAAAAAAAAAAAAGgHAAAAAAAAaQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQcAAAAAAABpBwAAAAAAAAAAAAAAAPC/"
				],
				[
					724,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAAGoGAAAAAAAAawYAAAAAAAAAAAAAawYAAAAAAABrBgAAAAAAAAEAAABU",
					"AQAAAAAAAAABAAAAagYAAAAAAABrBgAAAAAAAAAAAAAAAPC/"
				],
				[
					727,
					1,
					"paste",
					null,
					"AQAAAGoGAAAAAAAAawYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagYAAAAAAABqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					730,
					1,
					"paste",
					null,
					"AQAAAHUGAAAAAAAAdgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQYAAAAAAAB1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					741,
					1,
					"paste",
					null,
					"AgAAANcHAAAAAAAACAgAAAAAAAAAAAAACAgAAAAAAAAICAAAAAAAABYAAABhc3Rhci51c2VfemVybyh0b2dnbGUp",
					"AQAAAAAAAAABAAAA1wcAAAAAAADtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					748,
					1,
					"left_delete",
					null,
					"AQAAAOUHAAAAAAAA5QcAAAAAAAAIAAAAbW92ZV9iM18",
					"AQAAAAAAAAABAAAA5QcAAAAAAADtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					756,
					1,
					"paste",
					null,
					"AgAAAAIIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACGCAAAAAAAAG8BAABUb2dnbGUgc3RhcnQgaW5kZXggMCBvciAxIGZvciB0YWJsZXMgYW5kIHRpbGUgcG9zaXRpb25zLgoKSWYgc2V0IHRvIGBmYWxzZWAsIFthc3Rhci5zb2x2ZV0oI2FzdGFyc29sdmVzdGFydF94LXN0YXJ0X3ktZW5kX3gtZW5kX3kpLCBbYXN0YXIuc29sdmVfbmVhcl0oI2FzdGFyc29sdmVfbmVhcnN0YXJ0X3gtc3RhcnRfeS1tYXhfY29zdCksIFthc3Rhci5nZXRfYXRdKCNhc3RhcmdldF9hdHgteSksIFthc3Rhci5zZXRfYXRdKCNhc3RhcnNldF9hdHgteS12YWx1ZSkgbWV0aG9kcyBleHBlY3QgcG9zaXRpb25zIHN0YXJ0IHdpdGggMSBhbmQgcmV0dXJucyB0YWJsZSBpbmRleGVzIGZyb20gKioxKiouICAgCgpEZWZhdWx0IGlzIGBmYWxzZWAgPSAx",
					"AQAAAAAAAAABAAAAcQkAAAAAAAACCAAAAAAAAAAAAAAAAPC/"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "Tree"
					},
					"BQAAAHYIAAAAAAAAdwgAAAAAAAAAAAAAdwgAAAAAAAB3CAAAAAAAAAcAAABQcm9qZWN0dwgAAAAAAAB4CAAAAAAAAAAAAAB4CAAAAAAAAHkIAAAAAAAAAAAAAHkIAAAAAAAAeggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdggAAAAAAAB9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					770,
					1,
					"paste",
					null,
					"AgAAAJUIAAAAAAAAEQkAAAAAAAAAAAAAEQkAAAAAAAARCQAAAAAAACIAAAAqIGBgYHRvZ2dsZWBgYCAoYm9vbCkgLSB0cnVlL2ZhbHNl",
					"AQAAAAAAAAABAAAAtwgAAAAAAACVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					781,
					1,
					"paste",
					null,
					"AgAAACgJAAAAAAAAZwoAAAAAAAAAAAAAZwoAAAAAAABnCgAAAAAAABUAAABhc3Rhci51c2VfemVybyhmYWxzZSk",
					"AQAAAAAAAAABAAAAPQkAAAAAAAAoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					788,
					1,
					"insert",
					{
						"characters": "tree"
					},
					"BQAAAFwJAAAAAAAAXQkAAAAAAAAAAAAAXQkAAAAAAABdCQAAAAAAAAcAAABwcm9qZWN0XQkAAAAAAABeCQAAAAAAAAAAAABeCQAAAAAAAF8JAAAAAAAAAAAAAF8JAAAAAAAAYAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					1,
					"paste",
					null,
					"AgAAADsKAAAAAAAARQoAAAAAAAAAAAAARQoAAAAAAABFCgAAAAAAAA0AAABwYXJzZV9wcm9qZWN0",
					"AQAAAAAAAAABAAAAOwoAAAAAAABICgAAAAAAAAAAAAAAAPC/"
				],
				[
					815,
					1,
					"left_delete",
					null,
					"AQAAAGIKAAAAAAAAYgoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAYwoAAAAAAABjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					819,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAADEEAAAAAAAAMgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQQAAAAAAAAxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					820,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADIEAAAAAAAAMwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgQAAAAAAAAyBAAAAAAAAAAAAAAAAPC/"
				],
				[
					823,
					1,
					"insert_snippet",
					{
						"contents": "${TM_CURRENT_LINE/^(?:\\s*((?:>\\s*)*)([-+*])(\\s+)).*/\n$1$2$3/}"
					},
					"AQAAANwEAAAAAAAA3wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AQAAAAAAADcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					824,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAN8EAAAAAAAA4AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wQAAAAAAADfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					825,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOAEAAAAAAAA4QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AQAAAAAAADgBAAAAAAAAAAAAAAAAPC/"
				],
				[
					826,
					2,
					"left_delete",
					null,
					"AgAAAOAEAAAAAAAA4AQAAAAAAAABAAAAIN8EAAAAAAAA3wQAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAA4QQAAAAAAADhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					1,
					"insert",
					{
						"characters": "It"
					},
					"AgAAAN8EAAAAAAAA4AQAAAAAAAAAAAAA4AQAAAAAAADhBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wQAAAAAAADfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAOEEAAAAAAAA4gQAAAAAAAAAAAAA4gQAAAAAAADjBAAAAAAAAAAAAADjBAAAAAAAAOQEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QQAAAAAAADhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					829,
					1,
					"insert",
					{
						"characters": " you"
					},
					"BAAAAOQEAAAAAAAA5QQAAAAAAAAAAAAA5QQAAAAAAADmBAAAAAAAAAAAAADmBAAAAAAAAOcEAAAAAAAAAAAAAOcEAAAAAAAA6AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AQAAAAAAADkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					830,
					1,
					"insert",
					{
						"characters": " responsib"
					},
					"CgAAAOgEAAAAAAAA6QQAAAAAAAAAAAAA6QQAAAAAAADqBAAAAAAAAAAAAADqBAAAAAAAAOsEAAAAAAAAAAAAAOsEAAAAAAAA7AQAAAAAAAAAAAAA7AQAAAAAAADtBAAAAAAAAAAAAADtBAAAAAAAAO4EAAAAAAAAAAAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA7wQAAAAAAADwBAAAAAAAAAAAAADwBAAAAAAAAPEEAAAAAAAAAAAAAPEEAAAAAAAA8gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AQAAAAAAADoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					831,
					1,
					"insert",
					{
						"characters": "ilty"
					},
					"BAAAAPIEAAAAAAAA8wQAAAAAAAAAAAAA8wQAAAAAAAD0BAAAAAAAAAAAAAD0BAAAAAAAAPUEAAAAAAAAAAAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gQAAAAAAADyBAAAAAAAAAAAAAAAAPC/"
				],
				[
					832,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAPYEAAAAAAAA9wQAAAAAAAAAAAAA9wQAAAAAAAD4BAAAAAAAAAAAAAD4BAAAAAAAAPkEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gQAAAAAAAD2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					833,
					1,
					"insert",
					{
						"characters": " load"
					},
					"BQAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA+gQAAAAAAAD7BAAAAAAAAAAAAAD7BAAAAAAAAPwEAAAAAAAAAAAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA/QQAAAAAAAD+BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QQAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					834,
					1,
					"insert",
					{
						"characters": " json"
					},
					"BQAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA/wQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAEFAAAAAAAAAAAAAAEFAAAAAAAAAgUAAAAAAAAAAAAAAgUAAAAAAAADBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					835,
					1,
					"insert",
					{
						"characters": " data."
					},
					"BgAAAAMFAAAAAAAABAUAAAAAAAAAAAAABAUAAAAAAAAFBQAAAAAAAAAAAAAFBQAAAAAAAAYFAAAAAAAAAAAAAAYFAAAAAAAABwUAAAAAAAAAAAAABwUAAAAAAAAIBQAAAAAAAAAAAAAIBQAAAAAAAAkFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwUAAAAAAAADBQAAAAAAAAAAAAAAAPC/"
				],
				[
					836,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAkFAAAAAAAACgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQUAAAAAAAAJBQAAAAAAAAAAAAAAAPC/"
				],
				[
					837,
					1,
					"insert",
					{
						"characters": "You"
					},
					"AwAAAAoFAAAAAAAACwUAAAAAAAAAAAAACwUAAAAAAAAMBQAAAAAAAAAAAAAMBQAAAAAAAA0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgUAAAAAAAAKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": " can"
					},
					"BAAAAA0FAAAAAAAADgUAAAAAAAAAAAAADgUAAAAAAAAPBQAAAAAAAAAAAAAPBQAAAAAAABAFAAAAAAAAAAAAABAFAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQUAAAAAAAANBQAAAAAAAAAAAAAAAPC/"
				],
				[
					839,
					1,
					"insert",
					{
						"characters": " use"
					},
					"BAAAABEFAAAAAAAAEgUAAAAAAAAAAAAAEgUAAAAAAAATBQAAAAAAAAAAAAATBQAAAAAAABQFAAAAAAAAAAAAABQFAAAAAAAAFQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					840,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUFAAAAAAAAFgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQUAAAAAAAAVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					841,
					1,
					"insert",
					{
						"characters": "Custom"
					},
					"BgAAABYFAAAAAAAAFwUAAAAAAAAAAAAAFwUAAAAAAAAYBQAAAAAAAAAAAAAYBQAAAAAAABkFAAAAAAAAAAAAABkFAAAAAAAAGgUAAAAAAAAAAAAAGgUAAAAAAAAbBQAAAAAAAAAAAAAbBQAAAAAAABwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgUAAAAAAAAWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert",
					{
						"characters": " Res"
					},
					"BAAAABwFAAAAAAAAHQUAAAAAAAAAAAAAHQUAAAAAAAAeBQAAAAAAAAAAAAAeBQAAAAAAAB8FAAAAAAAAAAAAAB8FAAAAAAAAIAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAUAAAAAAAAcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					843,
					1,
					"insert",
					{
						"characters": "ources"
					},
					"BgAAACAFAAAAAAAAIQUAAAAAAAAAAAAAIQUAAAAAAAAiBQAAAAAAAAAAAAAiBQAAAAAAACMFAAAAAAAAAAAAACMFAAAAAAAAJAUAAAAAAAAAAAAAJAUAAAAAAAAlBQAAAAAAAAAAAAAlBQAAAAAAACYFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAUAAAAAAAAgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					844,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAACYFAAAAAAAAJwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgUAAAAAAAAmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					850,
					1,
					"insert_snippet",
					{
						"contents": "[$SELECTION]$0"
					},
					"AgAAABYFAAAAAAAAFgUAAAAAAAAQAAAAQ3VzdG9tIFJlc291cmNlcxYFAAAAAAAAKAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgUAAAAAAAAmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					851,
					1,
					"insert",
					{
						"characters": "(="
					},
					"AgAAACgFAAAAAAAAKQUAAAAAAAAAAAAAKQUAAAAAAAAqBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAUAAAAAAAAoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					852,
					1,
					"left_delete",
					null,
					"AQAAACkFAAAAAAAAKQUAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAKgUAAAAAAAAqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					853,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACkFAAAAAAAAKgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQUAAAAAAAApBQAAAAAAAAAAAAAAAPC/"
				],
				[
					855,
					1,
					"paste",
					null,
					"AQAAACkFAAAAAAAAZgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQUAAAAAAAApBQAAAAAAAAAAAAAAAPC/"
				],
				[
					865,
					1,
					"insert",
					{
						"characters": "may"
					},
					"BAAAAA4FAAAAAAAADwUAAAAAAAAAAAAADwUAAAAAAAAPBQAAAAAAAAMAAABjYW4PBQAAAAAAABAFAAAAAAAAAAAAABAFAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					878,
					1,
					"left_delete",
					null,
					"AQAAAPcKAAAAAAAA9woAAAAAAABnHAAACgojIyBhc3Rhci5zZXRfbWFwX3R5cGUodHlwZSkKCllvdSBjYW4gc2V0IGRpZmZlcmVudCB0eXBlIG9mIG1hcCBjb29yZGluYXRlcy4gRGVmYXVsdCBpcyBgYXN0YXIuR1JJRF9DTEFTU0lDYC4KCk1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaGV4YWdvbmFsIGdyaWQgb2Zmc2V0IGNvb3JkaW5hdGVzIHN5c3RlbXM6IFtSZWQgQmxvYiBHYW1lc10oaHR0cHM6Ly93d3cucmVkYmxvYmdhbWVzLmNvbS9ncmlkcy9oZXhhZ29ucy8jY29vcmRpbmF0ZXMtb2Zmc2V0KQoKKipQQVJBTUVURVJTKioKCiogYGBgdHlwZWBgYCAoZW51bSkgLSBUeXBlIG9mIHRoZSBtYXAgY29vcmRpbmF0ZXMuCgoJKiphc3Rhci5HUklEX0NMQVNTSUMqKiA6IGNsYXNzaWMgZ3JpZC4gIAoJKiphc3Rhci5IRVhfT0REUioqIDogb2RkLXIgaGV4YWdvbmFsIGdyaWQuICAKCSoqYXN0YXIuSEVYX0VWRU5SKiogOiBldmVuLXIgaGV4YWdvbmFsIGdyaWQuICAKCSoqYXN0YXIuSEVYX09ERFEqKiA6IG9kZC1xIGhleGFnb25hbCBncmlkLiAgCgkqKmFzdGFyLkhFWF9FVkVOUSoqIDogZXZlbi1xIGhleGFnb25hbCBncmlkLiAgCgkKCioqRVhBTVBMRSoqCgpgYGBsdWEKCmFzdGFyLnNldF9tYXBfdHlwZShhc3Rhci5IRVhfT0REUikKCmBgYAoKIyMgYXN0YXIuc2V0X21hcCh3b3JsZCkKClNldCB5b3VyIG1hcCBkYXRhLiAgCjAuMCBvciAxLjEgaXMgdG9wLWxlZnQuICAKCipTZXR0aW5nIG5ldyBtYXAgZGF0YSByZXNldCB0aGUgY3VycmVudCBjYWNoZS4gIAoKKipQQVJBTUVURVJTKiogCgoqIGBgYHdvcmxkYGBgICh0YWJsZSkgLSBZb3VyIHRpbGVtYXAgZGF0YS4gS2VlcCBpdCBzaW1wbGUgYXMgbXVjaCBhcyB5b3UgY2FuLgoKKipFWEFNUExFKiogIAoKYGBgbHVhCgpsb2NhbCB3b3JsZCA9IHsKCTIsIDAsIDAsIDAsIDAsCgkwLCAwLCAwLCAwLCAwLAoJMCwgMCwgMSwgMCwgMCwKCTEsIDAsIDAsIDAsIDIsCn0KCmFzdGFyLnNldF9tYXAod29ybGQpCgpgYGAKCiMjIGFzdGFyLm1hcF92ZmxpcCgpCgpFdmVyeSB0aW1lIHlvdSBjYWxsIHRoaXMgZnVuY3Rpb24sIGl0IGZsaXBzIHRoZSBtYXAgdmVydGljYWxseS4gVGhpcyBkb2VzIG5vdCBmbGlwIHRoZSBjb29yZGluYXRlcwoKKkZsaXBwaW5nIHRoZSBtYXAgcmVzZXQgdGhlIGN1cnJlbnQgY2FjaGUuICAKCgoqKkVYQU1QTEUqKiAgCgpgYGBsdWEKCmxvY2FsIHdvcmxkID0gewoJMiwgMCwgMCwgMCwgMCwKCTAsIDAsIDAsIDAsIDAsCgkwLCAwLCAxLCAwLCAwLAoJMSwgMCwgMCwgMCwgMiwKfQoKYXN0YXIuc2V0X21hcCh3b3JsZCkKYXN0YXIubWFwX3ZmbGlwKCkKYXN0YXIucHJpbnRfbWFwKCkKYGBgCgoKIyMgYXN0YXIubWFwX2hmbGlwKCkKCkV2ZXJ5IHRpbWUgeW91IGNhbGwgdGhpcyBmdW5jdGlvbiwgaXQgZmxpcHMgdGhlIG1hcCBob3Jpem9udGFsbHkuIFRoaXMgZG9lcyBub3QgZmxpcCB0aGUgY29vcmRpbmF0ZXMKCipGbGlwcGluZyB0aGUgbWFwIHJlc2V0IHRoZSBjdXJyZW50IGNhY2hlLiAgCgoKKipFWEFNUExFKiogIAoKYGBgbHVhCgpsb2NhbCB3b3JsZCA9IHsKCTIsIDAsIDAsIDAsIDAsCgkwLCAwLCAwLCAwLCAwLAoJMCwgMCwgMSwgMCwgMCwKCTEsIDAsIDAsIDAsIDIsCn0KCmFzdGFyLnNldF9tYXAod29ybGQpCmFzdGFyLm1hcF9oZmxpcCgpCmFzdGFyLnByaW50X21hcCgpCmBgYAoKCgoKIyMgYXN0YXIuc2V0X2Nvc3RzKGNvc3RzKQoKU2V0IGNvc3RzIGZvciB5b3VyIHBhc3NhYmxlIHRpbGVzIG9uIHlvdXIgYHdvcmxkYCB0YWJsZS4gVGhpcyB0YWJsZSBrZXlzIGRldGVybWluZXMgdGhlIHBhc3NhYmxlIGFyZWEuIEluIHRoaXMgZXhhbXBsZSBvbmx5IG51bWJlcmVkICIwIiB0aWxlcyBhcmUgcGFzc2FibGUuICAgCgpUYWJsZSdzIHN1bSBtdXN0IGJlIHRoZSBgYXN0YXIuRElSRUNUSU9OX0ZPVVJgICg0KSBvciBgYXN0YXIuRElSRUNUSU9OX0VJR0hUYCAoOCkuIEluIHRoaXMgZXhhbXBsZSB3ZSB3YW50IHRvIG1vdmUgOCBkaXJlY3Rpb24uIAoKKlNldHRpbmcgbmV3IGNvc3QgZGF0YSByZXNldCB0aGUgY3VycmVudCBjYWNoZS4KCioqUEFSQU1FVEVSUyoqLiAKCiogYGBgY29zdHNgYGAgKHRhYmxlKSAtIFlvdXIgdGlsZSBjb3N0IGRhdGEuICAKCioqRVhBTVBMRSoqCgpgYGBsdWEKCi0tIEZvciBhc3Rhci5ESVJFQ1RJT05fRUlHSFQKbG9jYWwgY29zdHMgPSB7CiAgICBbMF0gPSB7CiAgICAgICAgMS4wLCAtLSBFCiAgICAgICAgMS4wLCAtLSBOCiAgICAgICAgMS4wLCAtLSBXCiAgICAgICAgMS4wLCAtLSBTCiAgICAgICAgMS40MSwgLS0gTkUKICAgICAgICAxLjQxLCAtLSBOVwogICAgICAgIDEuNDEsIC0tIFNXCiAgICAgICAgMS40MSAtLSBTRQogICAgfQp9Cgphc3Rhci5zZXRfY29zdHMoY29zdHMpCi0tIE9SCi0tIEZvciBhc3Rhci5ESVJFQ1RJT05fRk9VUgpsb2NhbCBjb3N0cyA9IHsKICAgIFswXSA9IHsKICAgICAgICAxLjAsIC0tIEUKICAgICAgICAxLjAsIC0tIE4KICAgICAgICAxLjAsIC0tIFcKICAgICAgICAxLjAgLS0gUwogICAgfQp9Cgphc3Rhci5zZXRfY29zdHMoY29zdHMpCgoKYGBgCgojIyBhc3Rhci5zZXRfZW50aXRpZXMoZW50aXRpZXMpCgpFbnRpdGllcyBhcmUgdXNhbGx5IG5vdCBwYXNzaWJsZSBpdGVtcyBsaWtlIGVuZW1pZXMgb3IgY2hlc3RzLiBZb3UgbWlnaHQgd2FudCB0byB0YXJnZXQgdGhvc2UgdGlsZXMgYnV0IGFsc28gd2FudCB0byBrZWVwIHRoZW0gbm90IHBhc3NhYmxlLiBZb3UgY2FuIHNldCB0aG9zZSBlbnRpdHkgaWRzIGFzIHRhYmxlLiBZb3VyIHdvcmxkIHRhYmxlIHNob3VsZCBjb250YWluIHRob3NlIGVudGl0aWVzLiAKCllvdSBoYXZlIHRvIHRvZ2dsZSBgYXN0YXIuZ2V0X2VudGl0aWVzKClgIGJlZm9yZSBjYWxsaW5nIGBhc3Rhci5zb2x2ZSgpYCBvciBgYXN0YXIuc29sdmVfbmVhcigpYC4gCgoKKipQQVJBTUVURVJTKiogIAoKKiBgYGBlbnRpdGllc2BgYCAodGFibGUpIC0gWW91ciBlbnRpdGllcyBkYXRhLgoKCioqRVhBTVBMRSoqICAKCmBgYGx1YQoKLS0gSURzIG9mIHRoZSBlbnRpdGllcwpsb2NhbCBlbnRpdGllcyA9IHsKCTEsIDIKfQoKYXN0YXIuc2V0X2VudGl0aWVzKGVudGl0aWVzKQoKYGBgCgoKIyMgYXN0YXIudXNlX2VudGl0aWVzKHRvb2dsZSkuCgpJZiB5b3Ugd2FudCB0byBpbmNsdWRlIHlvdXIgZW50aXRpZXMgdG8geW91ciBzb2x2ZSBvcGVyYXRpb25zLCB5b3UgaGF2ZSB0byBzZXQgaXQgdHJ1ZSBiZWZvcmUgY2FsbGluZyBgYXN0YXIuc29sdmUoKWAgb3IgYGFzdGFyLnNvbHZlX25lYXIoKWAuICAgCgpJZiBzZXQgdGhlIGB0cnVlYDogICAKCmBhc3Rhci5zb2x2ZSgpYCBvbmx5IGluY2x1ZGVzIHRoZSBlbmQvbGFzdCB0YXJnZXQgdGlsZSB0byB0aGUgcGF0aCByZXN1bHQuIE90aGVyIGVudGl0aWVzIGFsb25nIHRoZSBwYXRoIHN0YXlzIGFzIG5vdCBwYXNzYWJsZS4KCmBhc3Rhci5zb2x2ZV9uZWFyKClgIGluY2x1ZGVzIGFsbCBlbnRpdGllcyBmcm9tIGVudGl0aWVzIHRhYmxlLgoKKldoZW4geW91IGNhbGwgdGhlIGBhc3Rhci51c2VfZW50aXRpZXMoKWAsIHRoZSBjdXJyZW50IGNhY2hlIHdpbGwgYmUgcmVzZXQuCgoqKlBBUkFNRVRFUlMqKiAKCiogYGBgdG9vZ2xlYGBgIChib29sZWFuKSAtIFRvb2dsZSB0cnVlIG9yIGZhbHNlLiBEZWZhdWx0IGlzIGZhbHNlCgoKKipFWEFNUExFKioKCmBgYGx1YQoKLS0gSURzIG9mIHRoZSBlbnRpdGllcwpsb2NhbCBlbnRpdGllcyA9IHsKCTEsIDIKfQoKYXN0YXIuc2V0X2VudGl0aWVzKGVudGl0aWVzKQphc3Rhci51c2VfZW50aXRpZXModHJ1ZSkKCmBgYAoKIyMgYXN0YXIuZ2V0X2F0KHgsIHkpCgpSZXR1cm5zIHRoZSB2YWx1ZSBmcm9tIHRoZSBtYXAgYXJyYXkgYnkgY29vcmRpbmF0ZXMuCgoqKlBBUkFNRVRFUlMqKgoKWCwgWSBvZiB0aGUgdGlsZSBwb3NzaXRpb24gb24gYXJyYXkgbm90IHRoZSBzY3JlZW4gcG9zaXRpb24uCgoqIGBgYHhgYGAgKGludCkgLSBUaWxlIFgKKiBgYGB5YGBgIChpbnQpIC0gVGlsZSBZCgoKKipSRVRVUk4qKgoKKiBgYGB2YWx1ZWBgYCAoaW50KQoKCioqRVhBTVBMRSoqCgpgYGBsdWEKCmxvY2FsIHZhbHVlID0gYXN0YXIuZ2V0X2F0KDEsIDEpCgpwcmludCh2YWx1ZSkKCmBgYAoKCiMjIGFzdGFyLnNldF9hdChgeGAsIGB5YCwgYHZhbHVlYCkKClNldCB5b3VyIHZhbHVlIHRvIHRoZSBtYXAgYXJyYXkgYnkgY29vcmRpbmF0ZXMuCgoqU2V0dGluZyBuZXcgZGF0YSByZXNldCB0aGUgY3VycmVudCBjYWNoZS4KCioqUEFSQU1FVEVSUyoqCgpYLCBZIG9mIHRoZSB0aWxlIHBvc3NpdGlvbiBvbiBhcnJheSBub3QgdGhlIHNjcmVlbiBwb3NpdGlvbi4KCiogYGBgeGBgYCAoaW50KSAtIFRpbGUgWAoqIGBgYHlgYGAgKGludCkgLSBUaWxlIFkKKiBgYGB2YWx1ZWBgYCAoaW50KSAKCgoqKkVYQU1QTEUqKgoKYGBgbHVhCgphc3Rhci5zZXRfYXQoMSwgMSwgMCkgCgpgYGAKCgojIyBhc3Rhci5wcmludF9tYXAoKQoKUHJpbnRzIHRoZSBtYXAgc3RhdGUgZm9yIGRlYnVnIHB1cnBvc2VzLgoKKipFWEFNUExFKioKCmBgYGx1YQoKYXN0YXIucHJpbnRfbWFwKCkKCmBgYAoKCmBgYHRleHQKCmNvbHMveDoKMQkyCTMJNAk1CQotCS0JLQktCS0JCjIJMAkwCTAJMAkJLSByb3cveTogMQowCTAJMAkwCTAJCS0gcm93L3k6IDIKMAkwCTEJMAkwCQktIHJvdy95OiAzCjEJMAkwCTAJMgkJLSByb3cveTogNAoKYGBgCgojIyBhc3Rhci5zb2x2ZShzdGFydF94LCBzdGFydF95LCBlbmRfeCwgZW5kX3kpCgpTb2x2ZXMgdGhlIHBhdGguICAgCgoqKlBBUkFNRVRFUlMqKgoKWCwgWSBvZiB0aGUgdGlsZSBwb3NzaXRpb24gb24gYXJyYXkgbm90IHRoZSBzY3JlZW4gcG9zaXRpb24uCgoqIGBgYHN0YXJ0X3hgYGAgKGludCkgLSBTdGFydCB0aWxlIFgKKiBgYGBzdGFydF95YGBgIChpbnQpIC0gU3RhcnQgdGlsZSBZCiogYGBgZW5kX3hgYGAgKGludCkgLSBFbmQgdGlsZSBYCiogYGBgZW5kX3lgYGAgKGludCkgLSBFbmQgdGlsZSBZCgoqKlJFVFVSTioqCgoqIGBgYHN0YXR1c2BgYCAoZW51bSkgLQoKCSoqYXN0YXIuU09MVkVEKio6IFBhdGggc29sdmVkICAKCSoqYXN0YXIuTk9fU09MVVRJT04qKjogQ2FuJ3QgZmluZCB0aGUgcGF0aCAgCgkqKmFzdGFyLlNUQVJUX0VORF9TQU1FKio6IFN0YXJ0IGFuZCBFbmQgaXMgdGhlIHNhbWUgCgoqIGBgYHNpemVgYGAgKGludCkgLSBTaXplIG9mIHRoZSBwYXRoLgoqIGBgYHRvdGFsX2Nvc3RgYGAgKGludCkgLSBUb3RhbCBjb3N0IG9mIHRoZSBwYXRoCiogYGBgcGF0aGBgYCAodGFibGUpIC0gIFRhYmxlIHdpdGggeCwgeSBjb29yZGluYXRlcyBhbmQgdGlsZSBJRC4gRmlyc3QgdmFsdWUgaXMgdGhlIGdpdmVuIHN0YXJ0IHBvaW50LgoKKipFWEFNUExFKioKCmBgYGx1YQoKbG9jYWwgc3RhcnRfeCA9IDEKbG9jYWwgc3RhcnRfeSA9IDEKbG9jYWwgZW5kX3ggPSAzCmxvY2FsIGVuZF95ID0gMwoKbG9jYWwgc3RhdHVzLCBzaXplLCB0b3RhbF9jb3N0LCBwYXRoID0gYXN0YXIuc29sdmUoc3RhcnRfeCwgc3RhcnRfeSwgZW5kX3gsIGVuZF95KQoKaWYgc3RhdHVzID09IGFzdGFyLlNPTFZFRCB0aGVuCglwcmludCgiU09MVkVEIikKCXByaW50KCJQYXRoIFNpemUiLCBzaXplKQoJcHJpbnQoIlRvdGFsIENvc3Q6IiwgdG90YWxfY29zdCkKCglmb3IgXywgdGlsZSBpbiBpcGFpcnMocGF0aCkgZG8KCQlwcmludCgieDoiLCB0aWxlLngsICJ5OiAiLCB0aWxlLnksICJ0aWxlIElEOiAiLCB0aWxlLmlkKQoJZW5kCmVsc2VpZiBzdGF0dXMgPT0gYXN0YXIuTk9fU09MVVRJT04gdGhlbgoJcHJpbnQoIk5PX1NPTFVUSU9OIikKZWxzZWlmIHN0YXR1cyA9PSBhc3Rhci5TVEFSVF9FTkRfU0FNRSB0aGVuCglwcmludCgiU1RBUlRfRU5EX1NBTUUiKQplbmQKCmBgYAoKIyMgYXN0YXIuc29sdmVfbmVhcihzdGFydF94LCBzdGFydF95LCBtYXhfY29zdCkKCkZpbmRzIHRoZSBuZWlnaGJvdXJzIGFjY29yZGluZyB0byBnaXZlbiBjb3N0LiAgIAoKKipQQVJBTUVURVJTKiogCgoqIGBgYHN0YXJ0X3hgYGAgKGludCkgLSBTdGFydCB0aWxlIFgKKiBgYGBzdGFydF95YGBgIChpbnQpIC0gU3RhcnQgdGlsZSBZCiogYGBgbWF4X2Nvc3RgYGAgKGZsb2F0KSAtIE1heGltdW4gY29zdCBmb3IgZmluZGluZyBuZWlnaGJvdXJzCgoqKlJFVFVSTioqCgoqIGBgYG5lYXJfc3RhdHVzYGBgIChlbnVtKSAtIAoKCSoqYXN0YXIuU09MVkVEKio6IFBhdGggc29sdmVkICAKCSoqYXN0YXIuTk9fU09MVVRJT04qKjogQ2FuJ3QgZmluZCB0aGUgcGF0aCAgCgkqKmFzdGFyLlNUQVJUX0VORF9TQU1FKio6IFN0YXJ0IGFuZCBFbmQgaXMgdGhlIHNhbWUgCgoqIGBgYG5lYXJfc2l6ZWBgYCAoZW51bSkgLSBTaXplIG9mIHRoZSBmb3VuZCBuZWlnaGJvdXJzLgoqIGBgYG5lYXJzYGBgIChlbnVtKSAtIFRhYmxlIHdpdGggeCBhbmQgeSBjb29yZGluYXRlcy4gRmlyc3QgdmFsdWUgaXMgdGhlIGdpdmVuIHN0YXJ0IHBvaW50LiAgCgoqKkVYQU1QTEUqKgoKYGBgbHVhCgpsb2NhbCBzdGFydF94ID0gMQpsb2NhbCBzdGFydF95ID0gMQpsb2NhbCBtYXhfY29zdCA9IDMuMCAtLSBuZWFyCgpsb2NhbCBuZWFyX3N0YXR1cywgbmVhcl9zaXplLCBuZWFycyA9IGFzdGFyLnNvbHZlX25lYXIoc3RhcnRfeCwgc3RhcnRfeSwgbWF4X2Nvc3QpCgppZiBuZWFyX3N0YXR1cyA9PSBhc3Rhci5TT0xWRUQgdGhlbgoJcHJpbnQoIk5FQVIgU09MVkVEIikKCXByaW50KCJOZWFyIFNpemU6IiwgbmVhcl9zaXplKQoJZm9yIF8sIHRpbGUgaW4gaXBhaXJzKG5lYXJzKSBkbwoJCXByaW50KCJ4OiIsIHRpbGUueCwgInk6ICIsIHRpbGUueSwgInRpbGUgSUQ6ICIsIHRpbGUuaWQpCgllbmQKZWxzZWlmIG5lYXJfc3RhdHVzID09IGFzdGFyLk5PX1NPTFVUSU9OIHRoZW4KCXByaW50KCJOT19TT0xVVElPTiIpCmVsc2VpZiBuZWFyX3N0YXR1cyA9PSBhc3Rhci5TVEFSVF9FTkRfU0FNRSB0aGVuCglwcmludCgiU1RBUlRfRU5EX1NBTUUiKQplbmQKCmBgYAoKCiMjIGFzdGFyLnJlc2V0X2NhY2hlKCkKCklmIHlvdXIgc3RhdGUgc3BhY2UgaXMgaHVnZSwgb2NjYXNpb25hbGx5IGNhbGwgYXN0YXIucmVzZXRfY2FjaGUoKSB0byBmcmVlIHVudXNlZCBtZW1vcnkuCgoqKkVYQU1QTEUqKgoKYGBgbHVhCgphc3Rhci5yZXNldF9jYWNoZSgpCgpgYGAKCiMjIGFzdGFyLnJlc2V0KCkKClRoaXMgbWV0aG9kIHJlbW92ZXMgZXZlcnl0aGluZyByZWxlYXRlZCB0byBhc3RhciBsaWJyYXJ5IGFuZCBmcmVlcyB0aGUgbWVtb3J5LiBJdCBtYXkgYmUgdXNlZCB3aGVuIHRoZSBwbGF5ZXIgY29tcGxldGVzL2V4aXRzIHRoZSBsZXZlbC9nYW1lLgoKKipFWEFNUExFKioKCmBgYGx1YQoKYXN0YXIucmVzZXQoKQoKYGBgCgo",
					"AQAAAAAAAAABAAAA9woAAAAAAABeJwAAAAAAAAAAAAAAAPC/"
				],
				[
					881,
					2,
					"left_delete",
					null,
					"AgAAAPcKAAAAAAAA9woAAAAAAAB3AgAACgotLS0KCiMjIEdhbWVzIHVzaW5nIEEtU3RhcgoKCiMjIyBNb25rZXkgTWFydAoKIVtNb25rZXkgTWFydF0oLy5naXRodWIvbW9ua2V5X21hcnQuanBnP3Jhdz10cnVlKQoKKipEZXZlbG9wZXI6KiogW1RpbnkgRG9iYmluc10oaHR0cDovL3Rpbnlkb2JiaW5zLmNvbS8pICAKKipSZWxlYXNlIERhdGU6KiogOCBEZWMsIDIwMjIgIAoqKlBva2k6KiogaHR0cHM6Ly9wb2tpLmNvbS9lbi9nL21vbmtleS1tYXJ0ICAKKipHb29nbGUgUGxheToqKiBodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9Y29tLnRpbnlkb2JiaW5zLm1vbmtleW1hcnQgICAKKipBcHAgU3RvcmU6KiogaHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS90ci9hcHAvbW9ua2V5LW1hcnQvaWQ2NDgwMjA4MjY1ICAKCiMjIyBYZmlyZQoKIVtYZmlyZV0oLy5naXRodWIveGZpcmUucG5nP3Jhdz10cnVlKQoKKipEZXZlbG9wZXI6KiogWzE3MURldl0oaHR0cHM6Ly93d3cuMTcxZGV2LnVrKSAgCioqUmVsZWFzZSBEYXRlOioqIDI4IE1heSwgMjAyNCAgCioqaXRjaC5pbzoqKiBodHRwczovL2JlbmphbWVzMTcxLml0Y2guaW8veGZpcmUgIAoqKlNvdXJjZToqKiBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtZXMtMTcxL3hmaXJlIPYKAAAAAAAA9goAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA9woAAAAAAABuDQAAAAAAAAAAAAAAAPC/"
				],
				[
					894,
					1,
					"insert",
					{
						"characters": "tree"
					},
					"BQAAALEKAAAAAAAAsgoAAAAAAAAAAAAAsgoAAAAAAACyCgAAAAAAAAcAAABwcm9qZWN0sgoAAAAAAACzCgAAAAAAAAAAAACzCgAAAAAAALQKAAAAAAAAAAAAALQKAAAAAAAAtQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQoAAAAAAAC4CgAAAAAAAAAAAAAAAPC/"
				],
				[
					904,
					1,
					"insert_snippet",
					{
						"contents": "${TM_CURRENT_LINE/^(?:\\s*((?:>\\s*)*)([-+*])(\\s+)).*/\n$1$2$3/}"
					},
					"AQAAAJ8JAAAAAAAAogkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwkAAAAAAACfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					905,
					1,
					"run_macro_file",
					{
						"file": "Packages/MarkdownEditing/macros/Delete Empty List Item.sublime-macro"
					},
					"AgAAAKAJAAAAAAAAoAkAAAAAAAACAAAAKiCgCQAAAAAAAKAJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					906,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKAJAAAAAAAAoQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAkAAAAAAACgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					907,
					1,
					"paste",
					null,
					"AQAAAKEJAAAAAAAA8gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQkAAAAAAAChCQAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"paste",
					null,
					"AgAAALMJAAAAAAAAwgkAAAAAAAAAAAAAwgkAAAAAAADCCQAAAAAAABIAAABwcm9qZWN0X2RhdGFfdGFibGU",
					"AQAAAAAAAAABAAAAswkAAAAAAADFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					923,
					1,
					"insert",
					{
						"characters": "Single"
					},
					"BgAAAM4JAAAAAAAAzwkAAAAAAAAAAAAAzwkAAAAAAADQCQAAAAAAAAAAAADQCQAAAAAAANEJAAAAAAAAAAAAANEJAAAAAAAA0gkAAAAAAAAAAAAA0gkAAAAAAADTCQAAAAAAAAAAAADTCQAAAAAAANQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgkAAAAAAADOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					924,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANQJAAAAAAAA1QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AkAAAAAAADUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					926,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAANUJAAAAAAAA1gkAAAAAAAAAAAAA1gkAAAAAAADWCQAAAAAAAAEAAABU",
					"AQAAAAAAAAABAAAA1QkAAAAAAADWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					929,
					1,
					"left_delete",
					null,
					"AQAAAN8JAAAAAAAA3wkAAAAAAAAXAAAAIHBhaXJlZCBieSAqdHJlZSBuYW1lcyo",
					"AQAAAAAAAAABAAAA3wkAAAAAAAD2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					933,
					1,
					"insert",
					{
						"characters": "Multiple"
					},
					"CAAAAOMGAAAAAAAA5AYAAAAAAAAAAAAA5AYAAAAAAADlBgAAAAAAAAAAAADlBgAAAAAAAOYGAAAAAAAAAAAAAOYGAAAAAAAA5wYAAAAAAAAAAAAA5wYAAAAAAADoBgAAAAAAAAAAAADoBgAAAAAAAOkGAAAAAAAAAAAAAOkGAAAAAAAA6gYAAAAAAAAAAAAA6gYAAAAAAADrBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wYAAAAAAADjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					934,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOsGAAAAAAAA7AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wYAAAAAAADrBgAAAAAAAAAAAAAAAPC/"
				],
				[
					936,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAAOwGAAAAAAAA7QYAAAAAAAAAAAAA7QYAAAAAAADtBgAAAAAAAAEAAABU",
					"AQAAAAAAAAABAAAA7AYAAAAAAADtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					1,
					"insert",
					{
						"characters": " set"
					},
					"BAAAAA0HAAAAAAAADgcAAAAAAAAAAAAADgcAAAAAAAAPBwAAAAAAAAAAAAAPBwAAAAAAABAHAAAAAAAAAAAAABAHAAAAAAAAEQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQcAAAAAAAANBwAAAAAAAAAAAAAAAPC/"
				],
				[
					950,
					1,
					"insert",
					{
						"characters": " on"
					},
					"AwAAABEHAAAAAAAAEgcAAAAAAAAAAAAAEgcAAAAAAAATBwAAAAAAAAAAAAATBwAAAAAAABQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQcAAAAAAAARBwAAAAAAAAAAAAAAAPC/"
				],
				[
					951,
					1,
					"insert",
					{
						"characters": " Editor"
					},
					"BwAAABQHAAAAAAAAFQcAAAAAAAAAAAAAFQcAAAAAAAAWBwAAAAAAAAAAAAAWBwAAAAAAABcHAAAAAAAAAAAAABcHAAAAAAAAGAcAAAAAAAAAAAAAGAcAAAAAAAAZBwAAAAAAAAAAAAAZBwAAAAAAABoHAAAAAAAAAAAAABoHAAAAAAAAGwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAcAAAAAAAAUBwAAAAAAAAAAAAAAAPC/"
				],
				[
					952,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAABsHAAAAAAAAHAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwcAAAAAAAAbBwAAAAAAAAAAAAAAAPC/"
				],
				[
					955,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BQAAABIHAAAAAAAAEwcAAAAAAAAAAAAAEwcAAAAAAAATBwAAAAAAAAIAAABvbhMHAAAAAAAAFAcAAAAAAAAAAAAAFAcAAAAAAAAVBwAAAAAAAAAAAAAVBwAAAAAAABYHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgcAAAAAAAAUBwAAAAAAAAAAAAAAAPC/"
				],
				[
					977,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEsLAAAAAAAATAsAAAAAAAAAAAAATAsAAAAAAABNCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwsAAAAAAABLCwAAAAAAAAAAAAAAAPC/"
				],
				[
					978,
					1,
					"paste",
					null,
					"AQAAAE0LAAAAAAAAHA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQsAAAAAAABNCwAAAAAAAAAAAAAAAPC/"
				],
				[
					981,
					1,
					"paste",
					null,
					"AgAAAFALAAAAAAAAYwsAAAAAAAAAAAAAYwsAAAAAAABjCwAAAAAAACkAAABiMzpwYXJzZV90cmVlKGRhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0KQ",
					"AQAAAAAAAAABAAAAUAsAAAAAAAB5CwAAAAAAAAAAAAAAAPC/"
				],
				[
					984,
					1,
					"left_delete",
					null,
					"AQAAAGULAAAAAAAAZQsAAAAAAACBAAAAUGFyc2UganNvbiBmaWxlIGV4cG9ydGVkIGZyb20gW2IzIEVkaXRvcl0oaHR0cHM6Ly9zZWxpbWFuYWMuZ2l0aHViLmlvL2RlZm9sZC1iMy1lZGl0b3IpIHVzaW5nIGBQcm9qZWN0IC0+IEV4cG9ydCAtPiBUcmVlIGFzIEpTT05g",
					"AQAAAAAAAAABAAAA5gsAAAAAAABlCwAAAAAAAAAAAAAAAPC/"
				],
				[
					998,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEsLAAAAAAAATAsAAAAAAAAAAAAATAsAAAAAAABNCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwsAAAAAAABLCwAAAAAAAAAAAAAAAPC/"
				],
				[
					999,
					1,
					"paste",
					null,
					"AQAAAE0LAAAAAAAAYwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQsAAAAAAABNCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1007,
					1,
					"paste",
					null,
					"AgAAAFALAAAAAAAAWgsAAAAAAAAAAAAAWgsAAAAAAABaCwAAAAAAABMAAABiMy5CbGFja0JvYXJkOm5ldygp",
					"AQAAAAAAAAABAAAAUAsAAAAAAABjCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1013,
					1,
					"insert",
					{
						"characters": "\n---"
					},
					"BAAAAEwLAAAAAAAATQsAAAAAAAAAAAAATQsAAAAAAABOCwAAAAAAAAAAAABOCwAAAAAAAE8LAAAAAAAAAAAAAE8LAAAAAAAAUAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAsAAAAAAABMCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1014,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFALAAAAAAAAUQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAsAAAAAAABQCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1015,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFELAAAAAAAAUgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQsAAAAAAABRCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1021,
					1,
					"paste",
					null,
					"AQAAAJwNAAAAAAAAoA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnA0AAAAAAACcDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "\nhttps://arxiv.org/pdf/1506.02312.pdf",
			"settings":
			{
				"buffer_size": 37,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "b3/b3.lua",
			"settings":
			{
				"buffer_size": 6616,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1560,
					1,
					"insert",
					{
						"characters": "\nlocal"
					},
					"BwAAAH4MAAAAAAAAfwwAAAAAAAAAAAAAfwwAAAAAAACDDAAAAAAAAAAAAACDDAAAAAAAAIQMAAAAAAAAAAAAAIQMAAAAAAAAhQwAAAAAAAAAAAAAhQwAAAAAAACGDAAAAAAAAAAAAACGDAAAAAAAAIcMAAAAAAAAAAAAAIcMAAAAAAAAiAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgwAAAAAAAB+DAAAAAAAAAAAAAAAAPC/"
				],
				[
					1561,
					1,
					"insert",
					{
						"characters": " resu"
					},
					"BQAAAIgMAAAAAAAAiQwAAAAAAAAAAAAAiQwAAAAAAACKDAAAAAAAAAAAAACKDAAAAAAAAIsMAAAAAAAAAAAAAIsMAAAAAAAAjAwAAAAAAAAAAAAAjAwAAAAAAACNDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAwAAAAAAACIDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1562,
					1,
					"insert",
					{
						"characters": "lt"
					},
					"AgAAAI0MAAAAAAAAjgwAAAAAAAAAAAAAjgwAAAAAAACPDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQwAAAAAAACNDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1563,
					6,
					"left_delete",
					null,
					"BgAAAI4MAAAAAAAAjgwAAAAAAAABAAAAdI0MAAAAAAAAjQwAAAAAAAABAAAAbIwMAAAAAAAAjAwAAAAAAAABAAAAdYsMAAAAAAAAiwwAAAAAAAABAAAAc4oMAAAAAAAAigwAAAAAAAABAAAAZYkMAAAAAAAAiQwAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAjwwAAAAAAACPDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1564,
					1,
					"insert",
					{
						"characters": "tree"
					},
					"BAAAAIkMAAAAAAAAigwAAAAAAAAAAAAAigwAAAAAAACLDAAAAAAAAAAAAACLDAAAAAAAAIwMAAAAAAAAAAAAAIwMAAAAAAAAjQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQwAAAAAAACJDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1565,
					4,
					"left_delete",
					null,
					"BAAAAIwMAAAAAAAAjAwAAAAAAAABAAAAZYsMAAAAAAAAiwwAAAAAAAABAAAAZYoMAAAAAAAAigwAAAAAAAABAAAAcokMAAAAAAAAiQwAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAjQwAAAAAAACNDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1566,
					1,
					"insert",
					{
						"characters": "project_t"
					},
					"CQAAAIkMAAAAAAAAigwAAAAAAAAAAAAAigwAAAAAAACLDAAAAAAAAAAAAACLDAAAAAAAAIwMAAAAAAAAAAAAAIwMAAAAAAAAjQwAAAAAAAAAAAAAjQwAAAAAAACODAAAAAAAAAAAAACODAAAAAAAAI8MAAAAAAAAAAAAAI8MAAAAAAAAkAwAAAAAAAAAAAAAkAwAAAAAAACRDAAAAAAAAAAAAACRDAAAAAAAAJIMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQwAAAAAAACJDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1567,
					1,
					"insert",
					{
						"characters": "ree"
					},
					"AwAAAJIMAAAAAAAAkwwAAAAAAAAAAAAAkwwAAAAAAACUDAAAAAAAAAAAAACUDAAAAAAAAJUMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgwAAAAAAACSDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1568,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAJUMAAAAAAAAlgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQwAAAAAAACVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1569,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJYMAAAAAAAAmAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgwAAAAAAACWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1571,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local class = require(\"b3.core.middleclass\")\nlocal const = require(\"b3.const\")\n\n-- Class Declaration\nlocal B3 = class(\"B3\")\n\n-- Core\nB3.BlackBoard = require(\"b3.core.blackboard\")\nB3.Tick = require(\"b3.core.tick\")\n\n-- Actions\nB3.Failer = require(\"b3.actions.failer\")\nB3.Succeeder = require(\"b3.actions.succeeder\")\nB3.Runner = require(\"b3.actions.runner\")\nB3.Error = require(\"b3.actions.error\")\nB3.Wait = require(\"b3.actions.wait\")\n\n--Composites\nB3.Sequence = require(\"b3.composites.sequence\")\nB3.Priority = require(\"b3.composites.selector\")\nB3.MemSequence = require(\"b3.composites.mem_sequence\")\nB3.MemPriority = require(\"b3.composites.mem_selector\")\nB3.WeightPriority = require(\"b3.composites.weight_selector\") -- ??\n\n--Decorators\nB3.Repeater = require(\"b3.decorators.repeater\")\nB3.RepeatUntilFailure = require(\"b3.decorators.repeat_until_failure\")\nB3.RepeatUntilSuccess = require(\"b3.decorators.repeat_until_success\")\nB3.MaxTime = require(\"b3.decorators.max_time\")\nB3.Inverter = require(\"b3.decorators.inverter\")\nB3.Limiter = require(\"b3.decorators.limiter\")\n\n---@param data table Behavior Tree data\n---@param customNodeList table Table contain custom node classes\n---@param debug boolean Tick debug print\nfunction B3:initialize(data, customNodeList, debug)\n    self.title = \"The behavior tree\"\n    self.description = \"Default description\"\n    self.properties = {}\n    self.root = nil\n\n    self.debug = debug or nil\n\n    self:load(data, customNodeList)\nend\n\nlocal function tree_parser(self, data, nodeList)\n    if type(data) ~= \"table\" then\n        return false\n    end\n\n    nodeList = nodeList or {}\n    local nodes = {}\n    local node\n\n    local data_id = data.id or uuid4.generate()\n    local title = data.title or self.title\n    local description = data.description or self.description\n\n\n\n    for id, nodeData in pairs(data.nodes) do\n        local Cls = nodeList[nodeData.name] or B3[nodeData.name]\n        assert(Cls, string.format(\"unkonw node name:%s\", nodeData.name))\n        node = Cls:new(nodeData)\n        nodes[id] = node\n    end\n\n    for id, nodeData in pairs(data.nodes) do\n        node = nodes[id]\n        if node.category == const.COMPOSITE and nodeData.children then\n            for i = 1, #nodeData.children do\n                local cid = nodeData.children[i]\n                node.children[i] = nodes[cid]\n            end\n        elseif node.category == const.DECORATOR and nodeData.child then\n            node.child = nodes[nodeData.child]\n            assert(node.child, \"not have a child\")\n        end\n    end\n\n    if self ~= nil then\n        self.id = data_id\n        self.title = title\n        self.description = description\n        self.root = nodes[data.root]\n    else\n        nodes['data_id'] = data_id\n        nodes['title'] = title\n        nodes['description'] = description\n        print('NODEID:', nodes['data_id'])\n    end\n\n    return nodes[data.root]\nend\n\n---@param data table Behavior Tree data table\n---@param nodeList table Table contain custom node classes\nfunction B3:load(data, nodeList)\n    tree_parser(self, data, nodeList)\nend\n\nfunction B3:parse_tree(data, nodeList)\n    return tree_parser(nil, data, nodeList)\nend\n\nfunction B3:parse_project(data, nodeList)\n    local project_tree = {}\n    for i, v in ipairs(data['trees']) do\n\n    end\n    return tree_parser(nil, data, nodeList)\nend\n\nfunction B3:set_tree(data)\n    self.id = data.data_id or uuid4.generate()\n    self.title = data.title or self.title\n    self.description = data.description or self.description\n    self.properties = {}\n    self.root = nil\n    self.root = data\nend\n\nfunction B3:dump()\n    local data = {}\n    local customNames = {}\n\n    data.title = self.title\n    data.description = self.description\n    data.properties = self.properties\n    data.nodes = {}\n    data.custom_nodes = {}\n\n    if self.root then\n        data.root = self.root.id\n    else\n        return data\n    end\n\n    local stack = { self.root }\n\n    while #stack > 0 do\n        local node = table.remove(stack, #stack)\n        local nodeData = {}\n        nodeData.id = node.id\n        nodeData.name = node.name\n        nodeData.title = node.title\n        nodeData.description = node.description\n        nodeData.properties = node.properties\n        nodeData.parameters = node.parameters\n\n        --verify custom node\n        local proto\n        if node.constructor then\n            proto = node.constructor.prototype\n        end\n        local nodeName = (proto and proto.name) or node.name\n        if not B3[nodeName] and not customNames[nodeName] then\n            local subdata = {}\n            subdata.name = nodeName\n            subdata.title = (proto and proto.title) or node.title\n            subdata.category = node.category\n            customNames[nodeName] = true\n            table.insert(data.custom_nodes, subdata)\n        end\n\n        --store children/child\n        local category = node.category\n        if category == const.COMPOSITE and node.children then\n            local children = {}\n            for i = 1, #node.children do\n                table.insert(children, node.children[i].id)\n                table.insert(stack, node.children[i])\n            end\n            nodeData.children = children\n        elseif category == const.DECORATOR and node.child then\n            table.insert(stack, node.child)\n            nodeData.child = node.child.id\n        end\n        data.nodes[node.id] = nodeData\n    end\n    return data\nend\n\nfunction B3:tick(tick)\n    assert(tick, \"tick object is important for tick method\")\n    assert(tick.agent, \"agent is important for tick method\")\n    assert(tick.worldBlackboard, \"worldBlackboard is important for tick method\")\n\n    tick.debug = self.debug\n    tick.tree = self\n\n    --TICK NODE\n    local state = self.root:execute(tick)\n    local agentBlackboard = tick.agent\n    local lastOpenNodes = agentBlackboard:get(\"openNodes\", self.id)\n    local currOpenNodes = tick.openNodes\n\n    --does not close if it is still open in this tick\n    local start = 1\n    local lastOpenNodesNum = #lastOpenNodes\n    for i = 1, math.min(lastOpenNodesNum, #currOpenNodes) do\n        start = i + 1\n        if lastOpenNodes[i] ~= currOpenNodes[i] then\n            break\n        end\n    end\n\n    --close the nodes\n    if lastOpenNodesNum > 0 then\n        for i = lastOpenNodesNum, start, -1 do\n            lastOpenNodes[i]:close(tick)\n        end\n    end\n\n    --populate blackboard\n    agentBlackboard:set(\"openNodes\", currOpenNodes, self.id)\n    agentBlackboard:set(\"nodeCount\", tick.nodeCount, self.id)\n\n    return state\nend\n\nreturn B3\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 223
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"AQAAAAAAAAABAAAAlwwAAAAAAACXDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1578,
					1,
					"reindent",
					null,
					"AQAAAMQMAAAAAAAAzAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAwAAAAAAADEDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1587,
					1,
					"paste",
					null,
					"AQAAAMwMAAAAAAAA2AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAwAAAAAAADMDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1588,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAANgMAAAAAAAA2gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AwAAAAAAADYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1594,
					1,
					"paste",
					null,
					"AQAAANkMAAAAAAAA2gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QwAAAAAAADZDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1597,
					1,
					"insert",
					{
						"characters": "tree"
					},
					"BQAAAKYMAAAAAAAApwwAAAAAAAAAAAAApwwAAAAAAACnDAAAAAAAAAEAAAB2pwwAAAAAAACoDAAAAAAAAAAAAACoDAAAAAAAAKkMAAAAAAAAAAAAAKkMAAAAAAAAqgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgwAAAAAAACnDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1607,
					1,
					"paste",
					null,
					"AgAAANwMAAAAAAAA4AwAAAAAAAAAAAAA4AwAAAAAAADgDAAAAAAAAAEAAAB2",
					"AQAAAAAAAAABAAAA3AwAAAAAAADdDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1608,
					1,
					"insert",
					{
						"characters": ".ç"
					},
					"AgAAAOAMAAAAAAAA4QwAAAAAAAAAAAAA4QwAAAAAAADiDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AwAAAAAAADgDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1611,
					1,
					"left_delete",
					null,
					"AQAAAOEMAAAAAAAA4QwAAAAAAAACAAAAw6c",
					"AQAAAAAAAAABAAAA4gwAAAAAAADiDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1612,
					1,
					"paste",
					null,
					"AQAAAOEMAAAAAAAA5gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QwAAAAAAADhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1615,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOcMAAAAAAAA6AwAAAAAAAAAAAAA6AwAAAAAAADpDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wwAAAAAAADnDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1616,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOkMAAAAAAAA6gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QwAAAAAAADpDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1624,
					1,
					"paste",
					null,
					"AQAAAOoMAAAAAAAACQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gwAAAAAAADqDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1627,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAOoMAAAAAAAA6wwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gwAAAAAAADqDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1635,
					1,
					"paste",
					null,
					"AgAAAB4NAAAAAAAAKg0AAAAAAAAAAAAAKg0AAAAAAAAqDQAAAAAAACAAAAB0cmVlX3BhcnNlcihuaWwsIGRhdGEsIG5vZGVMaXN0KQ",
					"AQAAAAAAAAABAAAAHg0AAAAAAAA+DQAAAAAAAAAAAAAAAPC/"
				],
				[
					1657,
					1,
					"paste",
					null,
					"AgAAAPsMAAAAAAAA/wwAAAAAAAAAAAAA/wwAAAAAAAD/DAAAAAAAAAQAAABkYXRh",
					"AQAAAAAAAAABAAAA+wwAAAAAAAD/DAAAAAAAAAAAAAAAAPC/"
				],
				[
					1663,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local class = require(\"b3.core.middleclass\")\nlocal const = require(\"b3.const\")\n\n-- Class Declaration\nlocal B3 = class(\"B3\")\n\n-- Core\nB3.BlackBoard = require(\"b3.core.blackboard\")\nB3.Tick = require(\"b3.core.tick\")\n\n-- Actions\nB3.Failer = require(\"b3.actions.failer\")\nB3.Succeeder = require(\"b3.actions.succeeder\")\nB3.Runner = require(\"b3.actions.runner\")\nB3.Error = require(\"b3.actions.error\")\nB3.Wait = require(\"b3.actions.wait\")\n\n--Composites\nB3.Sequence = require(\"b3.composites.sequence\")\nB3.Priority = require(\"b3.composites.selector\")\nB3.MemSequence = require(\"b3.composites.mem_sequence\")\nB3.MemPriority = require(\"b3.composites.mem_selector\")\nB3.WeightPriority = require(\"b3.composites.weight_selector\") -- ??\n\n--Decorators\nB3.Repeater = require(\"b3.decorators.repeater\")\nB3.RepeatUntilFailure = require(\"b3.decorators.repeat_until_failure\")\nB3.RepeatUntilSuccess = require(\"b3.decorators.repeat_until_success\")\nB3.MaxTime = require(\"b3.decorators.max_time\")\nB3.Inverter = require(\"b3.decorators.inverter\")\nB3.Limiter = require(\"b3.decorators.limiter\")\n\n---@param data table Behavior Tree data\n---@param customNodeList table Table contain custom node classes\n---@param debug boolean Tick debug print\nfunction B3:initialize(data, customNodeList, debug)\n    self.title = \"The behavior tree\"\n    self.description = \"Default description\"\n    self.properties = {}\n    self.root = nil\n\n    self.debug = debug or nil\n\n    self:load(data, customNodeList)\nend\n\nlocal function tree_parser(self, data, nodeList)\n    if type(data) ~= \"table\" then\n        return false\n    end\n\n    nodeList = nodeList or {}\n    local nodes = {}\n    local node\n\n    local data_id = data.id or uuid4.generate()\n    local title = data.title or self.title\n    local description = data.description or self.description\n\n\n\n    for id, nodeData in pairs(data.nodes) do\n        local Cls = nodeList[nodeData.name] or B3[nodeData.name]\n        assert(Cls, string.format(\"unkonw node name:%s\", nodeData.name))\n        node = Cls:new(nodeData)\n        nodes[id] = node\n    end\n\n    for id, nodeData in pairs(data.nodes) do\n        node = nodes[id]\n        if node.category == const.COMPOSITE and nodeData.children then\n            for i = 1, #nodeData.children do\n                local cid = nodeData.children[i]\n                node.children[i] = nodes[cid]\n            end\n        elseif node.category == const.DECORATOR and nodeData.child then\n            node.child = nodes[nodeData.child]\n            assert(node.child, \"not have a child\")\n        end\n    end\n\n    if self ~= nil then\n        self.id = data_id\n        self.title = title\n        self.description = description\n        self.root = nodes[data.root]\n    else\n        nodes['data_id'] = data_id\n        nodes['title'] = title\n        nodes['description'] = description\n        print('NODEID:', nodes['data_id'])\n    end\n\n    return nodes[data.root]\nend\n\n---@param data table Behavior Tree data table\n---@param nodeList table Table contain custom node classes\nfunction B3:load(data, nodeList)\n    tree_parser(self, data, nodeList)\nend\n\nfunction B3:parse_tree(data, nodeList)\n    return tree_parser(nil, data, nodeList)\nend\n\nfunction B3:parse_project(data, nodeList)\n    local project_tree = {}\n    for i, tree in ipairs(data['trees']) do\n        project_tree[tree.title] = tree_parser(nil, tree, nodeList)\n    end\n    return project_tree\nend\n\nfunction B3:set_tree(data)\n    self.id = data.data_id or uuid4.generate()\n    self.title = data.title or self.title\n    self.description = data.description or self.description\n    self.properties = {}\n    self.root = nil\n    self.root = data\nend\n\nfunction B3:dump()\n    local data = {}\n    local customNames = {}\n\n    data.title = self.title\n    data.description = self.description\n    data.properties = self.properties\n    data.nodes = {}\n    data.custom_nodes = {}\n\n    if self.root then\n        data.root = self.root.id\n    else\n        return data\n    end\n\n    local stack = { self.root }\n\n    while #stack > 0 do\n        local node = table.remove(stack, #stack)\n        local nodeData = {}\n        nodeData.id = node.id\n        nodeData.name = node.name\n        nodeData.title = node.title\n        nodeData.description = node.description\n        nodeData.properties = node.properties\n        nodeData.parameters = node.parameters\n\n        --verify custom node\n        local proto\n        if node.constructor then\n            proto = node.constructor.prototype\n        end\n        local nodeName = (proto and proto.name) or node.name\n        if not B3[nodeName] and not customNames[nodeName] then\n            local subdata = {}\n            subdata.name = nodeName\n            subdata.title = (proto and proto.title) or node.title\n            subdata.category = node.category\n            customNames[nodeName] = true\n            table.insert(data.custom_nodes, subdata)\n        end\n\n        --store children/child\n        local category = node.category\n        if category == const.COMPOSITE and node.children then\n            local children = {}\n            for i = 1, #node.children do\n                table.insert(children, node.children[i].id)\n                table.insert(stack, node.children[i])\n            end\n            nodeData.children = children\n        elseif category == const.DECORATOR and node.child then\n            table.insert(stack, node.child)\n            nodeData.child = node.child.id\n        end\n        data.nodes[node.id] = nodeData\n    end\n    return data\nend\n\nfunction B3:tick(tick)\n    assert(tick, \"tick object is important for tick method\")\n    assert(tick.agent, \"agent is important for tick method\")\n    assert(tick.worldBlackboard, \"worldBlackboard is important for tick method\")\n\n    tick.debug = self.debug\n    tick.tree = self\n\n    --TICK NODE\n    local state = self.root:execute(tick)\n    local agentBlackboard = tick.agent\n    local lastOpenNodes = agentBlackboard:get(\"openNodes\", self.id)\n    local currOpenNodes = tick.openNodes\n\n    --does not close if it is still open in this tick\n    local start = 1\n    local lastOpenNodesNum = #lastOpenNodes\n    for i = 1, math.min(lastOpenNodesNum, #currOpenNodes) do\n        start = i + 1\n        if lastOpenNodes[i] ~= currOpenNodes[i] then\n            break\n        end\n    end\n\n    --close the nodes\n    if lastOpenNodesNum > 0 then\n        for i = lastOpenNodesNum, start, -1 do\n            lastOpenNodes[i]:close(tick)\n        end\n    end\n\n    --populate blackboard\n    agentBlackboard:set(\"openNodes\", currOpenNodes, self.id)\n    agentBlackboard:set(\"nodeCount\", tick.nodeCount, self.id)\n\n    return state\nend\n\nreturn B3\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 223
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAvxkAAAAAAAC/GQAAbG9jYWwgY2xhc3MgPSByZXF1aXJlKCJiMy5jb3JlLm1pZGRsZWNsYXNzIikKbG9jYWwgY29uc3QgPSByZXF1aXJlKCJiMy5jb25zdCIpCgotLSBDbGFzcyBEZWNsYXJhdGlvbgpsb2NhbCBCMyA9IGNsYXNzKCJCMyIpCgotLSBDb3JlCkIzLkJsYWNrQm9hcmQgPSByZXF1aXJlKCJiMy5jb3JlLmJsYWNrYm9hcmQiKQpCMy5UaWNrID0gcmVxdWlyZSgiYjMuY29yZS50aWNrIikKCi0tIEFjdGlvbnMKQjMuRmFpbGVyID0gcmVxdWlyZSgiYjMuYWN0aW9ucy5mYWlsZXIiKQpCMy5TdWNjZWVkZXIgPSByZXF1aXJlKCJiMy5hY3Rpb25zLnN1Y2NlZWRlciIpCkIzLlJ1bm5lciA9IHJlcXVpcmUoImIzLmFjdGlvbnMucnVubmVyIikKQjMuRXJyb3IgPSByZXF1aXJlKCJiMy5hY3Rpb25zLmVycm9yIikKQjMuV2FpdCA9IHJlcXVpcmUoImIzLmFjdGlvbnMud2FpdCIpCgotLUNvbXBvc2l0ZXMKQjMuU2VxdWVuY2UgPSByZXF1aXJlKCJiMy5jb21wb3NpdGVzLnNlcXVlbmNlIikKQjMuUHJpb3JpdHkgPSByZXF1aXJlKCJiMy5jb21wb3NpdGVzLnNlbGVjdG9yIikKQjMuTWVtU2VxdWVuY2UgPSByZXF1aXJlKCJiMy5jb21wb3NpdGVzLm1lbV9zZXF1ZW5jZSIpCkIzLk1lbVByaW9yaXR5ID0gcmVxdWlyZSgiYjMuY29tcG9zaXRlcy5tZW1fc2VsZWN0b3IiKQpCMy5XZWlnaHRQcmlvcml0eSA9IHJlcXVpcmUoImIzLmNvbXBvc2l0ZXMud2VpZ2h0X3NlbGVjdG9yIikgLS0gPz8KCi0tRGVjb3JhdG9ycwpCMy5SZXBlYXRlciA9IHJlcXVpcmUoImIzLmRlY29yYXRvcnMucmVwZWF0ZXIiKQpCMy5SZXBlYXRVbnRpbEZhaWx1cmUgPSByZXF1aXJlKCJiMy5kZWNvcmF0b3JzLnJlcGVhdF91bnRpbF9mYWlsdXJlIikKQjMuUmVwZWF0VW50aWxTdWNjZXNzID0gcmVxdWlyZSgiYjMuZGVjb3JhdG9ycy5yZXBlYXRfdW50aWxfc3VjY2VzcyIpCkIzLk1heFRpbWUgPSByZXF1aXJlKCJiMy5kZWNvcmF0b3JzLm1heF90aW1lIikKQjMuSW52ZXJ0ZXIgPSByZXF1aXJlKCJiMy5kZWNvcmF0b3JzLmludmVydGVyIikKQjMuTGltaXRlciA9IHJlcXVpcmUoImIzLmRlY29yYXRvcnMubGltaXRlciIpCgotLS1AcGFyYW0gZGF0YSB0YWJsZSBCZWhhdmlvciBUcmVlIGRhdGEKLS0tQHBhcmFtIGN1c3RvbU5vZGVMaXN0IHRhYmxlIFRhYmxlIGNvbnRhaW4gY3VzdG9tIG5vZGUgY2xhc3NlcwotLS1AcGFyYW0gZGVidWcgYm9vbGVhbiBUaWNrIGRlYnVnIHByaW50CmZ1bmN0aW9uIEIzOmluaXRpYWxpemUoZGF0YSwgY3VzdG9tTm9kZUxpc3QsIGRlYnVnKQogICAgc2VsZi50aXRsZSA9ICJUaGUgYmVoYXZpb3IgdHJlZSIKICAgIHNlbGYuZGVzY3JpcHRpb24gPSAiRGVmYXVsdCBkZXNjcmlwdGlvbiIKICAgIHNlbGYucHJvcGVydGllcyA9IHt9CiAgICBzZWxmLnJvb3QgPSBuaWwKCiAgICBzZWxmLmRlYnVnID0gZGVidWcgb3IgbmlsCgogICAgc2VsZjpsb2FkKGRhdGEsIGN1c3RvbU5vZGVMaXN0KQplbmQKCmxvY2FsIGZ1bmN0aW9uIHRyZWVfcGFyc2VyKHNlbGYsIGRhdGEsIG5vZGVMaXN0KQogICAgaWYgdHlwZShkYXRhKSB+PSAidGFibGUiIHRoZW4KICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVuZAoKICAgIG5vZGVMaXN0ID0gbm9kZUxpc3Qgb3Ige30KICAgIGxvY2FsIG5vZGVzID0ge30KICAgIGxvY2FsIG5vZGUKCiAgICBsb2NhbCBkYXRhX2lkID0gZGF0YS5pZCBvciB1dWlkNC5nZW5lcmF0ZSgpCiAgICBsb2NhbCB0aXRsZSA9IGRhdGEudGl0bGUgb3Igc2VsZi50aXRsZQogICAgbG9jYWwgZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uIG9yIHNlbGYuZGVzY3JpcHRpb24KCgoKICAgIGZvciBpZCwgbm9kZURhdGEgaW4gcGFpcnMoZGF0YS5ub2RlcykgZG8KICAgICAgICBsb2NhbCBDbHMgPSBub2RlTGlzdFtub2RlRGF0YS5uYW1lXSBvciBCM1tub2RlRGF0YS5uYW1lXQogICAgICAgIGFzc2VydChDbHMsIHN0cmluZy5mb3JtYXQoInVua29udyBub2RlIG5hbWU6JXMiLCBub2RlRGF0YS5uYW1lKSkKICAgICAgICBub2RlID0gQ2xzOm5ldyhub2RlRGF0YSkKICAgICAgICBub2Rlc1tpZF0gPSBub2RlCiAgICBlbmQKCiAgICBmb3IgaWQsIG5vZGVEYXRhIGluIHBhaXJzKGRhdGEubm9kZXMpIGRvCiAgICAgICAgbm9kZSA9IG5vZGVzW2lkXQogICAgICAgIGlmIG5vZGUuY2F0ZWdvcnkgPT0gY29uc3QuQ09NUE9TSVRFIGFuZCBub2RlRGF0YS5jaGlsZHJlbiB0aGVuCiAgICAgICAgICAgIGZvciBpID0gMSwgI25vZGVEYXRhLmNoaWxkcmVuIGRvCiAgICAgICAgICAgICAgICBsb2NhbCBjaWQgPSBub2RlRGF0YS5jaGlsZHJlbltpXQogICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbltpXSA9IG5vZGVzW2NpZF0KICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZWlmIG5vZGUuY2F0ZWdvcnkgPT0gY29uc3QuREVDT1JBVE9SIGFuZCBub2RlRGF0YS5jaGlsZCB0aGVuCiAgICAgICAgICAgIG5vZGUuY2hpbGQgPSBub2Rlc1tub2RlRGF0YS5jaGlsZF0KICAgICAgICAgICAgYXNzZXJ0KG5vZGUuY2hpbGQsICJub3QgaGF2ZSBhIGNoaWxkIikKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGlmIHNlbGYgfj0gbmlsIHRoZW4KICAgICAgICBzZWxmLmlkID0gZGF0YV9pZAogICAgICAgIHNlbGYudGl0bGUgPSB0aXRsZQogICAgICAgIHNlbGYuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbgogICAgICAgIHNlbGYucm9vdCA9IG5vZGVzW2RhdGEucm9vdF0KICAgIGVsc2UKICAgICAgICBub2Rlc1snZGF0YV9pZCddID0gZGF0YV9pZAogICAgICAgIG5vZGVzWyd0aXRsZSddID0gdGl0bGUKICAgICAgICBub2Rlc1snZGVzY3JpcHRpb24nXSA9IGRlc2NyaXB0aW9uCiAgICAgICAgcHJpbnQoJ05PREVJRDonLCBub2Rlc1snZGF0YV9pZCddKQogICAgZW5kCgogICAgcmV0dXJuIG5vZGVzW2RhdGEucm9vdF0KZW5kCgotLS1AcGFyYW0gZGF0YSB0YWJsZSBCZWhhdmlvciBUcmVlIGRhdGEgdGFibGUKLS0tQHBhcmFtIG5vZGVMaXN0IHRhYmxlIFRhYmxlIGNvbnRhaW4gY3VzdG9tIG5vZGUgY2xhc3NlcwpmdW5jdGlvbiBCMzpsb2FkKGRhdGEsIG5vZGVMaXN0KQogICAgdHJlZV9wYXJzZXIoc2VsZiwgZGF0YSwgbm9kZUxpc3QpCmVuZAoKZnVuY3Rpb24gQjM6cGFyc2VfdHJlZShkYXRhLCBub2RlTGlzdCkKICAgIHJldHVybiB0cmVlX3BhcnNlcihuaWwsIGRhdGEsIG5vZGVMaXN0KQplbmQKCmZ1bmN0aW9uIEIzOnBhcnNlX3Byb2plY3QoZGF0YSwgbm9kZUxpc3QpCiAgICBsb2NhbCBwcm9qZWN0X3RyZWUgPSB7fQogICAgZm9yIGksIHRyZWUgaW4gaXBhaXJzKGRhdGFbJ3RyZWVzJ10pIGRvCiAgICAgICAgcHJvamVjdF90cmVlW3RyZWUudGl0bGVdID0gdHJlZV9wYXJzZXIobmlsLCB0cmVlLCBub2RlTGlzdCkKICAgIGVuZAogICAgcmV0dXJuIHByb2plY3RfdHJlZQplbmQKCmZ1bmN0aW9uIEIzOnNldF90cmVlKGRhdGEpCiAgICBzZWxmLmlkID0gZGF0YS5kYXRhX2lkIG9yIHV1aWQ0LmdlbmVyYXRlKCkKICAgIHNlbGYudGl0bGUgPSBkYXRhLnRpdGxlIG9yIHNlbGYudGl0bGUKICAgIHNlbGYuZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uIG9yIHNlbGYuZGVzY3JpcHRpb24KICAgIHNlbGYucHJvcGVydGllcyA9IHt9CiAgICBzZWxmLnJvb3QgPSBuaWwKICAgIHNlbGYucm9vdCA9IGRhdGEKZW5kCgpmdW5jdGlvbiBCMzpkdW1wKCkKICAgIGxvY2FsIGRhdGEgPSB7fQogICAgbG9jYWwgY3VzdG9tTmFtZXMgPSB7fQoKICAgIGRhdGEudGl0bGUgPSBzZWxmLnRpdGxlCiAgICBkYXRhLmRlc2NyaXB0aW9uID0gc2VsZi5kZXNjcmlwdGlvbgogICAgZGF0YS5wcm9wZXJ0aWVzID0gc2VsZi5wcm9wZXJ0aWVzCiAgICBkYXRhLm5vZGVzID0ge30KICAgIGRhdGEuY3VzdG9tX25vZGVzID0ge30KCiAgICBpZiBzZWxmLnJvb3QgdGhlbgogICAgICAgIGRhdGEucm9vdCA9IHNlbGYucm9vdC5pZAogICAgZWxzZQogICAgICAgIHJldHVybiBkYXRhCiAgICBlbmQKCiAgICBsb2NhbCBzdGFjayA9IHsgc2VsZi5yb290IH0KCiAgICB3aGlsZSAjc3RhY2sgPiAwIGRvCiAgICAgICAgbG9jYWwgbm9kZSA9IHRhYmxlLnJlbW92ZShzdGFjaywgI3N0YWNrKQogICAgICAgIGxvY2FsIG5vZGVEYXRhID0ge30KICAgICAgICBub2RlRGF0YS5pZCA9IG5vZGUuaWQKICAgICAgICBub2RlRGF0YS5uYW1lID0gbm9kZS5uYW1lCiAgICAgICAgbm9kZURhdGEudGl0bGUgPSBub2RlLnRpdGxlCiAgICAgICAgbm9kZURhdGEuZGVzY3JpcHRpb24gPSBub2RlLmRlc2NyaXB0aW9uCiAgICAgICAgbm9kZURhdGEucHJvcGVydGllcyA9IG5vZGUucHJvcGVydGllcwogICAgICAgIG5vZGVEYXRhLnBhcmFtZXRlcnMgPSBub2RlLnBhcmFtZXRlcnMKCiAgICAgICAgLS12ZXJpZnkgY3VzdG9tIG5vZGUKICAgICAgICBsb2NhbCBwcm90bwogICAgICAgIGlmIG5vZGUuY29uc3RydWN0b3IgdGhlbgogICAgICAgICAgICBwcm90byA9IG5vZGUuY29uc3RydWN0b3IucHJvdG90eXBlCiAgICAgICAgZW5kCiAgICAgICAgbG9jYWwgbm9kZU5hbWUgPSAocHJvdG8gYW5kIHByb3RvLm5hbWUpIG9yIG5vZGUubmFtZQogICAgICAgIGlmIG5vdCBCM1tub2RlTmFtZV0gYW5kIG5vdCBjdXN0b21OYW1lc1tub2RlTmFtZV0gdGhlbgogICAgICAgICAgICBsb2NhbCBzdWJkYXRhID0ge30KICAgICAgICAgICAgc3ViZGF0YS5uYW1lID0gbm9kZU5hbWUKICAgICAgICAgICAgc3ViZGF0YS50aXRsZSA9IChwcm90byBhbmQgcHJvdG8udGl0bGUpIG9yIG5vZGUudGl0bGUKICAgICAgICAgICAgc3ViZGF0YS5jYXRlZ29yeSA9IG5vZGUuY2F0ZWdvcnkKICAgICAgICAgICAgY3VzdG9tTmFtZXNbbm9kZU5hbWVdID0gdHJ1ZQogICAgICAgICAgICB0YWJsZS5pbnNlcnQoZGF0YS5jdXN0b21fbm9kZXMsIHN1YmRhdGEpCiAgICAgICAgZW5kCgogICAgICAgIC0tc3RvcmUgY2hpbGRyZW4vY2hpbGQKICAgICAgICBsb2NhbCBjYXRlZ29yeSA9IG5vZGUuY2F0ZWdvcnkKICAgICAgICBpZiBjYXRlZ29yeSA9PSBjb25zdC5DT01QT1NJVEUgYW5kIG5vZGUuY2hpbGRyZW4gdGhlbgogICAgICAgICAgICBsb2NhbCBjaGlsZHJlbiA9IHt9CiAgICAgICAgICAgIGZvciBpID0gMSwgI25vZGUuY2hpbGRyZW4gZG8KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChjaGlsZHJlbiwgbm9kZS5jaGlsZHJlbltpXS5pZCkKICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChzdGFjaywgbm9kZS5jaGlsZHJlbltpXSkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIG5vZGVEYXRhLmNoaWxkcmVuID0gY2hpbGRyZW4KICAgICAgICBlbHNlaWYgY2F0ZWdvcnkgPT0gY29uc3QuREVDT1JBVE9SIGFuZCBub2RlLmNoaWxkIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHN0YWNrLCBub2RlLmNoaWxkKQogICAgICAgICAgICBub2RlRGF0YS5jaGlsZCA9IG5vZGUuY2hpbGQuaWQKICAgICAgICBlbmQKICAgICAgICBkYXRhLm5vZGVzW25vZGUuaWRdID0gbm9kZURhdGEKICAgIGVuZAogICAgcmV0dXJuIGRhdGEKZW5kCgpmdW5jdGlvbiBCMzp0aWNrKHRpY2spCiAgICBhc3NlcnQodGljaywgInRpY2sgb2JqZWN0IGlzIGltcG9ydGFudCBmb3IgdGljayBtZXRob2QiKQogICAgYXNzZXJ0KHRpY2suYWdlbnQsICJhZ2VudCBpcyBpbXBvcnRhbnQgZm9yIHRpY2sgbWV0aG9kIikKICAgIGFzc2VydCh0aWNrLndvcmxkQmxhY2tib2FyZCwgIndvcmxkQmxhY2tib2FyZCBpcyBpbXBvcnRhbnQgZm9yIHRpY2sgbWV0aG9kIikKCiAgICB0aWNrLmRlYnVnID0gc2VsZi5kZWJ1ZwogICAgdGljay50cmVlID0gc2VsZgoKICAgIC0tVElDSyBOT0RFCiAgICBsb2NhbCBzdGF0ZSA9IHNlbGYucm9vdDpleGVjdXRlKHRpY2spCiAgICBsb2NhbCBhZ2VudEJsYWNrYm9hcmQgPSB0aWNrLmFnZW50CiAgICBsb2NhbCBsYXN0T3Blbk5vZGVzID0gYWdlbnRCbGFja2JvYXJkOmdldCgib3Blbk5vZGVzIiwgc2VsZi5pZCkKICAgIGxvY2FsIGN1cnJPcGVuTm9kZXMgPSB0aWNrLm9wZW5Ob2RlcwoKICAgIC0tZG9lcyBub3QgY2xvc2UgaWYgaXQgaXMgc3RpbGwgb3BlbiBpbiB0aGlzIHRpY2sKICAgIGxvY2FsIHN0YXJ0ID0gMQogICAgbG9jYWwgbGFzdE9wZW5Ob2Rlc051bSA9ICNsYXN0T3Blbk5vZGVzCiAgICBmb3IgaSA9IDEsIG1hdGgubWluKGxhc3RPcGVuTm9kZXNOdW0sICNjdXJyT3Blbk5vZGVzKSBkbwogICAgICAgIHN0YXJ0ID0gaSArIDEKICAgICAgICBpZiBsYXN0T3Blbk5vZGVzW2ldIH49IGN1cnJPcGVuTm9kZXNbaV0gdGhlbgogICAgICAgICAgICBicmVhawogICAgICAgIGVuZAogICAgZW5kCgogICAgLS1jbG9zZSB0aGUgbm9kZXMKICAgIGlmIGxhc3RPcGVuTm9kZXNOdW0gPiAwIHRoZW4KICAgICAgICBmb3IgaSA9IGxhc3RPcGVuTm9kZXNOdW0sIHN0YXJ0LCAtMSBkbwogICAgICAgICAgICBsYXN0T3Blbk5vZGVzW2ldOmNsb3NlKHRpY2spCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICAtLXBvcHVsYXRlIGJsYWNrYm9hcmQKICAgIGFnZW50QmxhY2tib2FyZDpzZXQoIm9wZW5Ob2RlcyIsIGN1cnJPcGVuTm9kZXMsIHNlbGYuaWQpCiAgICBhZ2VudEJsYWNrYm9hcmQ6c2V0KCJub2RlQ291bnQiLCB0aWNrLm5vZGVDb3VudCwgc2VsZi5pZCkKCiAgICByZXR1cm4gc3RhdGUKZW5kCgpyZXR1cm4gQjMK",
					"AQAAAAAAAAABAAAA/gwAAAAAAAD+DAAAAAAAAAAAAAAAAPC/"
				],
				[
					1673,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local class = require(\"b3.core.middleclass\")\nlocal const = require(\"b3.const\")\n\n-- Class Declaration\nlocal B3 = class(\"B3\")\n\n-- Core\nB3.BlackBoard = require(\"b3.core.blackboard\")\nB3.Tick = require(\"b3.core.tick\")\n\n-- Actions\nB3.Failer = require(\"b3.actions.failer\")\nB3.Succeeder = require(\"b3.actions.succeeder\")\nB3.Runner = require(\"b3.actions.runner\")\nB3.Error = require(\"b3.actions.error\")\nB3.Wait = require(\"b3.actions.wait\")\n\n--Composites\nB3.Sequence = require(\"b3.composites.sequence\")\nB3.Priority = require(\"b3.composites.selector\")\nB3.MemSequence = require(\"b3.composites.mem_sequence\")\nB3.MemPriority = require(\"b3.composites.mem_selector\")\nB3.WeightPriority = require(\"b3.composites.weight_selector\") -- ??\n\n--Decorators\nB3.Repeater = require(\"b3.decorators.repeater\")\nB3.RepeatUntilFailure = require(\"b3.decorators.repeat_until_failure\")\nB3.RepeatUntilSuccess = require(\"b3.decorators.repeat_until_success\")\nB3.MaxTime = require(\"b3.decorators.max_time\")\nB3.Inverter = require(\"b3.decorators.inverter\")\nB3.Limiter = require(\"b3.decorators.limiter\")\n\n---@param data table Behavior Tree data\n---@param customNodeList table Table contain custom node classes\n---@param debug boolean Tick debug print\nfunction B3:initialize(data, customNodeList, debug)\n    self.title = \"The behavior tree\"\n    self.description = \"Default description\"\n    self.properties = {}\n    self.root = nil\n\n    self.debug = debug or nil\n\n    self:load(data, customNodeList)\nend\n\nlocal function tree_parser(self, data, nodeList)\n    if type(data) ~= \"table\" then\n        return false\n    end\n\n    nodeList = nodeList or {}\n    local nodes = {}\n    local node\n\n    local data_id = data.id or uuid4.generate()\n    local title = data.title or self.title\n    local description = data.description or self.description\n\n\n\n    for id, nodeData in pairs(data.nodes) do\n        local Cls = nodeList[nodeData.name] or B3[nodeData.name]\n        assert(Cls, string.format(\"unkonw node name:%s\", nodeData.name))\n        node = Cls:new(nodeData)\n        nodes[id] = node\n    end\n\n    for id, nodeData in pairs(data.nodes) do\n        node = nodes[id]\n        if node.category == const.COMPOSITE and nodeData.children then\n            for i = 1, #nodeData.children do\n                local cid = nodeData.children[i]\n                node.children[i] = nodes[cid]\n            end\n        elseif node.category == const.DECORATOR and nodeData.child then\n            node.child = nodes[nodeData.child]\n            assert(node.child, \"not have a child\")\n        end\n    end\n\n    if self ~= nil then\n        self.id = data_id\n        self.title = title\n        self.description = description\n        self.root = nodes[data.root]\n    else\n        nodes['data_id'] = data_id\n        nodes['title'] = title\n        nodes['description'] = description\n        print('NODEID:', nodes['data_id'])\n    end\n\n    return nodes[data.root]\nend\n\n---@param data table Behavior Tree data table\n---@param nodeList table Table contain custom node classes\nfunction B3:load(data, nodeList)\n    tree_parser(self, data, nodeList)\nend\n\nfunction B3:parse_tree(data, nodeList)\n    return tree_parser(nil, data, nodeList)\nend\n\nfunction B3:parse_project(data, nodeList)\n    local project_tree = {}\n    for i, tree in ipairs(data['trees']) do\n        project_tree[tree.title] = tree_parser(nil, tree, nodeList)\n    end\n    return project_tree\nend\n\nfunction B3:set_tree(data)\n    self.id = data.data_id or uuid4.generate()\n    self.title = data.title or self.title\n    self.description = data.description or self.description\n    self.properties = {}\n    self.root = nil\n    self.root = data\nend\n\nfunction B3:dump()\n    local data = {}\n    local customNames = {}\n\n    data.title = self.title\n    data.description = self.description\n    data.properties = self.properties\n    data.nodes = {}\n    data.custom_nodes = {}\n\n    if self.root then\n        data.root = self.root.id\n    else\n        return data\n    end\n\n    local stack = { self.root }\n\n    while #stack > 0 do\n        local node = table.remove(stack, #stack)\n        local nodeData = {}\n        nodeData.id = node.id\n        nodeData.name = node.name\n        nodeData.title = node.title\n        nodeData.description = node.description\n        nodeData.properties = node.properties\n        nodeData.parameters = node.parameters\n\n        --verify custom node\n        local proto\n        if node.constructor then\n            proto = node.constructor.prototype\n        end\n        local nodeName = (proto and proto.name) or node.name\n        if not B3[nodeName] and not customNames[nodeName] then\n            local subdata = {}\n            subdata.name = nodeName\n            subdata.title = (proto and proto.title) or node.title\n            subdata.category = node.category\n            customNames[nodeName] = true\n            table.insert(data.custom_nodes, subdata)\n        end\n\n        --store children/child\n        local category = node.category\n        if category == const.COMPOSITE and node.children then\n            local children = {}\n            for i = 1, #node.children do\n                table.insert(children, node.children[i].id)\n                table.insert(stack, node.children[i])\n            end\n            nodeData.children = children\n        elseif category == const.DECORATOR and node.child then\n            table.insert(stack, node.child)\n            nodeData.child = node.child.id\n        end\n        data.nodes[node.id] = nodeData\n    end\n    return data\nend\n\nfunction B3:tick(tick)\n    assert(tick, \"tick object is important for tick method\")\n    assert(tick.agent, \"agent is important for tick method\")\n    assert(tick.worldBlackboard, \"worldBlackboard is important for tick method\")\n\n    tick.debug = self.debug\n    tick.tree = self\n\n    --TICK NODE\n    local state = self.root:execute(tick)\n    local agentBlackboard = tick.agent\n    local lastOpenNodes = agentBlackboard:get(\"openNodes\", self.id)\n    local currOpenNodes = tick.openNodes\n\n    --does not close if it is still open in this tick\n    local start = 1\n    local lastOpenNodesNum = #lastOpenNodes\n    for i = 1, math.min(lastOpenNodesNum, #currOpenNodes) do\n        start = i + 1\n        if lastOpenNodes[i] ~= currOpenNodes[i] then\n            break\n        end\n    end\n\n    --close the nodes\n    if lastOpenNodesNum > 0 then\n        for i = lastOpenNodesNum, start, -1 do\n            lastOpenNodes[i]:close(tick)\n        end\n    end\n\n    --populate blackboard\n    agentBlackboard:set(\"openNodes\", currOpenNodes, self.id)\n    agentBlackboard:set(\"nodeCount\", tick.nodeCount, self.id)\n\n    return state\nend\n\nreturn B3\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 223
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"AQAAAAAAAAABAAAACg0AAAAAAAAKDQAAAAAAAAAAAAAAAPC/"
				],
				[
					1686,
					1,
					"insert",
					{
						"characters": "--"
					},
					"AgAAAI0FAAAAAAAAjgUAAAAAAAAAAAAAjgUAAAAAAACPBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQUAAAAAAACNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1692,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK8FAAAAAAAAsAUAAAAAAAAAAAAAsAUAAAAAAACzBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwUAAAAAAACvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1749,
					1,
					"paste",
					null,
					"AQAAALMFAAAAAAAAxAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswUAAAAAAACzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1753,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local class = require(\"b3.core.middleclass\")\nlocal const = require(\"b3.const\")\n\n-- Class Declaration\nlocal B3 = class(\"B3\")\n\n-- Core\nB3.BlackBoard = require(\"b3.core.blackboard\")\nB3.Tick = require(\"b3.core.tick\")\n\n-- Actions\nB3.Failer = require(\"b3.actions.failer\")\nB3.Succeeder = require(\"b3.actions.succeeder\")\nB3.Runner = require(\"b3.actions.runner\")\nB3.Error = require(\"b3.actions.error\")\nB3.Wait = require(\"b3.actions.wait\")\n\n--Composites\nB3.Sequence = require(\"b3.composites.sequence\")\nB3.Priority = require(\"b3.composites.selector\")\nB3.MemSequence = require(\"b3.composites.mem_sequence\")\nB3.MemPriority = require(\"b3.composites.mem_selector\")\nB3.WeightPriority = require(\"b3.composites.weight_selector\") -- ??\n\n--Decorators\nB3.Repeater = require(\"b3.decorators.repeater\")\nB3.RepeatUntilFailure = require(\"b3.decorators.repeat_until_failure\")\nB3.RepeatUntilSuccess = require(\"b3.decorators.repeat_until_success\")\nB3.MaxTime = require(\"b3.decorators.max_time\")\nB3.Inverter = require(\"b3.decorators.inverter\")\nB3.Limiter = require(\"b3.decorators.limiter\")\n\n---@param data table Behavior Tree data\n---@param customNodeList table Table contain custom node classes\n---@param debug boolean Tick debug print\nfunction B3:initialize(data, customNodeList, debug)\n    self.title = \"The behavior tree\"\n    self.description = \"Default description\"\n    self.properties = {}\n    self.root = nil\n\n    self.debug = debug or nil\n\n    -- self:load(data, customNodeList)\n    B3:set_tree(data)\nend\n\nlocal function tree_parser(self, data, nodeList)\n    if type(data) ~= \"table\" then\n        return false\n    end\n\n    nodeList = nodeList or {}\n    local nodes = {}\n    local node\n\n    local data_id = data.id or uuid4.generate()\n    local title = data.title or self.title\n    local description = data.description or self.description\n\n\n\n    for id, nodeData in pairs(data.nodes) do\n        local Cls = nodeList[nodeData.name] or B3[nodeData.name]\n        assert(Cls, string.format(\"unkonw node name:%s\", nodeData.name))\n        node = Cls:new(nodeData)\n        nodes[id] = node\n    end\n\n    for id, nodeData in pairs(data.nodes) do\n        node = nodes[id]\n        if node.category == const.COMPOSITE and nodeData.children then\n            for i = 1, #nodeData.children do\n                local cid = nodeData.children[i]\n                node.children[i] = nodes[cid]\n            end\n        elseif node.category == const.DECORATOR and nodeData.child then\n            node.child = nodes[nodeData.child]\n            assert(node.child, \"not have a child\")\n        end\n    end\n\n    if self ~= nil then\n        self.id = data_id\n        self.title = title\n        self.description = description\n        self.root = nodes[data.root]\n    else\n        nodes['data_id'] = data_id\n        nodes['title'] = title\n        nodes['description'] = description\n        print('NODEID:', nodes['data_id'])\n    end\n\n    return nodes[data.root]\nend\n\n---@param data table Behavior Tree data table\n---@param nodeList table Table contain custom node classes\nfunction B3:load(data, nodeList)\n    tree_parser(self, data, nodeList)\nend\n\nfunction B3:parse_tree(data, nodeList)\n    return tree_parser(nil, data, nodeList)\nend\n\nfunction B3:parse_project(data, nodeList)\n    local project_tree = {}\n    for i, tree in ipairs(data['trees']) do\n        project_tree[tree.title] = tree_parser(nil, tree, nodeList)\n    end\n    return project_tree\nend\n\nfunction B3:set_tree(data)\n    self.id = data.data_id or uuid4.generate()\n    self.title = data.title or self.title\n    self.description = data.description or self.description\n    self.properties = {}\n    self.root = nil\n    self.root = data\nend\n\nfunction B3:dump()\n    local data = {}\n    local customNames = {}\n\n    data.title = self.title\n    data.description = self.description\n    data.properties = self.properties\n    data.nodes = {}\n    data.custom_nodes = {}\n\n    if self.root then\n        data.root = self.root.id\n    else\n        return data\n    end\n\n    local stack = { self.root }\n\n    while #stack > 0 do\n        local node = table.remove(stack, #stack)\n        local nodeData = {}\n        nodeData.id = node.id\n        nodeData.name = node.name\n        nodeData.title = node.title\n        nodeData.description = node.description\n        nodeData.properties = node.properties\n        nodeData.parameters = node.parameters\n\n        --verify custom node\n        local proto\n        if node.constructor then\n            proto = node.constructor.prototype\n        end\n        local nodeName = (proto and proto.name) or node.name\n        if not B3[nodeName] and not customNames[nodeName] then\n            local subdata = {}\n            subdata.name = nodeName\n            subdata.title = (proto and proto.title) or node.title\n            subdata.category = node.category\n            customNames[nodeName] = true\n            table.insert(data.custom_nodes, subdata)\n        end\n\n        --store children/child\n        local category = node.category\n        if category == const.COMPOSITE and node.children then\n            local children = {}\n            for i = 1, #node.children do\n                table.insert(children, node.children[i].id)\n                table.insert(stack, node.children[i])\n            end\n            nodeData.children = children\n        elseif category == const.DECORATOR and node.child then\n            table.insert(stack, node.child)\n            nodeData.child = node.child.id\n        end\n        data.nodes[node.id] = nodeData\n    end\n    return data\nend\n\nfunction B3:tick(tick)\n    assert(tick, \"tick object is important for tick method\")\n    assert(tick.agent, \"agent is important for tick method\")\n    assert(tick.worldBlackboard, \"worldBlackboard is important for tick method\")\n\n    tick.debug = self.debug\n    tick.tree = self\n\n    --TICK NODE\n    local state = self.root:execute(tick)\n    local agentBlackboard = tick.agent\n    local lastOpenNodes = agentBlackboard:get(\"openNodes\", self.id)\n    local currOpenNodes = tick.openNodes\n\n    --does not close if it is still open in this tick\n    local start = 1\n    local lastOpenNodesNum = #lastOpenNodes\n    for i = 1, math.min(lastOpenNodesNum, #currOpenNodes) do\n        start = i + 1\n        if lastOpenNodes[i] ~= currOpenNodes[i] then\n            break\n        end\n    end\n\n    --close the nodes\n    if lastOpenNodesNum > 0 then\n        for i = lastOpenNodesNum, start, -1 do\n            lastOpenNodes[i]:close(tick)\n        end\n    end\n\n    --populate blackboard\n    agentBlackboard:set(\"openNodes\", currOpenNodes, self.id)\n    agentBlackboard:set(\"nodeCount\", tick.nodeCount, self.id)\n\n    return state\nend\n\nreturn B3\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 224
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"AQAAAAAAAAABAAAAxAUAAAAAAADEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1757,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local class = require(\"b3.core.middleclass\")\nlocal const = require(\"b3.const\")\n\n-- Class Declaration\nlocal B3 = class(\"B3\")\n\n-- Core\nB3.BlackBoard = require(\"b3.core.blackboard\")\nB3.Tick = require(\"b3.core.tick\")\n\n-- Actions\nB3.Failer = require(\"b3.actions.failer\")\nB3.Succeeder = require(\"b3.actions.succeeder\")\nB3.Runner = require(\"b3.actions.runner\")\nB3.Error = require(\"b3.actions.error\")\nB3.Wait = require(\"b3.actions.wait\")\n\n--Composites\nB3.Sequence = require(\"b3.composites.sequence\")\nB3.Priority = require(\"b3.composites.selector\")\nB3.MemSequence = require(\"b3.composites.mem_sequence\")\nB3.MemPriority = require(\"b3.composites.mem_selector\")\nB3.WeightPriority = require(\"b3.composites.weight_selector\") -- ??\n\n--Decorators\nB3.Repeater = require(\"b3.decorators.repeater\")\nB3.RepeatUntilFailure = require(\"b3.decorators.repeat_until_failure\")\nB3.RepeatUntilSuccess = require(\"b3.decorators.repeat_until_success\")\nB3.MaxTime = require(\"b3.decorators.max_time\")\nB3.Inverter = require(\"b3.decorators.inverter\")\nB3.Limiter = require(\"b3.decorators.limiter\")\n\n---@param data table Behavior Tree data\n---@param customNodeList table Table contain custom node classes\n---@param debug boolean Tick debug print\nfunction B3:initialize(data, customNodeList, debug)\n    self.title = \"The behavior tree\"\n    self.description = \"Default description\"\n    self.properties = {}\n    self.root = nil\n\n    self.debug = debug or nil\n\n    -- self:load(data, customNodeList)\n    B3:set_tree(data)\nend\n\nlocal function tree_parser(self, data, nodeList)\n    if type(data) ~= \"table\" then\n        return false\n    end\n\n    nodeList = nodeList or {}\n    local nodes = {}\n    local node\n\n    local data_id = data.id or uuid4.generate()\n    local title = data.title or self.title\n    local description = data.description or self.description\n\n\n\n    for id, nodeData in pairs(data.nodes) do\n        local Cls = nodeList[nodeData.name] or B3[nodeData.name]\n        assert(Cls, string.format(\"unkonw node name:%s\", nodeData.name))\n        node = Cls:new(nodeData)\n        nodes[id] = node\n    end\n\n    for id, nodeData in pairs(data.nodes) do\n        node = nodes[id]\n        if node.category == const.COMPOSITE and nodeData.children then\n            for i = 1, #nodeData.children do\n                local cid = nodeData.children[i]\n                node.children[i] = nodes[cid]\n            end\n        elseif node.category == const.DECORATOR and nodeData.child then\n            node.child = nodes[nodeData.child]\n            assert(node.child, \"not have a child\")\n        end\n    end\n\n    if self ~= nil then\n        self.id = data_id\n        self.title = title\n        self.description = description\n        self.root = nodes[data.root]\n    else\n        nodes['data_id'] = data_id\n        nodes['title'] = title\n        nodes['description'] = description\n        print('NODEID:', nodes['data_id'])\n    end\n\n    return nodes[data.root]\nend\n\n---@param data table Behavior Tree data table\n---@param nodeList table Table contain custom node classes\nfunction B3:load(data, nodeList)\n    tree_parser(self, data, nodeList)\nend\n\nfunction B3:parse_tree(data, nodeList)\n    return tree_parser(nil, data, nodeList)\nend\n\nfunction B3:parse_project(data, nodeList)\n    local project_tree = {}\n    for i, tree in ipairs(data['trees']) do\n        project_tree[tree.title] = tree_parser(nil, tree, nodeList)\n    end\n    return project_tree\nend\n\nfunction B3:set_tree(data)\n    self.id = data.data_id or uuid4.generate()\n    self.title = data.title or self.title\n    self.description = data.description or self.description\n    self.properties = {}\n    self.root = nil\n    self.root = data\nend\n\nfunction B3:dump()\n    local data = {}\n    local customNames = {}\n\n    data.title = self.title\n    data.description = self.description\n    data.properties = self.properties\n    data.nodes = {}\n    data.custom_nodes = {}\n\n    if self.root then\n        data.root = self.root.id\n    else\n        return data\n    end\n\n    local stack = { self.root }\n\n    while #stack > 0 do\n        local node = table.remove(stack, #stack)\n        local nodeData = {}\n        nodeData.id = node.id\n        nodeData.name = node.name\n        nodeData.title = node.title\n        nodeData.description = node.description\n        nodeData.properties = node.properties\n        nodeData.parameters = node.parameters\n\n        --verify custom node\n        local proto\n        if node.constructor then\n            proto = node.constructor.prototype\n        end\n        local nodeName = (proto and proto.name) or node.name\n        if not B3[nodeName] and not customNames[nodeName] then\n            local subdata = {}\n            subdata.name = nodeName\n            subdata.title = (proto and proto.title) or node.title\n            subdata.category = node.category\n            customNames[nodeName] = true\n            table.insert(data.custom_nodes, subdata)\n        end\n\n        --store children/child\n        local category = node.category\n        if category == const.COMPOSITE and node.children then\n            local children = {}\n            for i = 1, #node.children do\n                table.insert(children, node.children[i].id)\n                table.insert(stack, node.children[i])\n            end\n            nodeData.children = children\n        elseif category == const.DECORATOR and node.child then\n            table.insert(stack, node.child)\n            nodeData.child = node.child.id\n        end\n        data.nodes[node.id] = nodeData\n    end\n    return data\nend\n\nfunction B3:tick(tick)\n    assert(tick, \"tick object is important for tick method\")\n    assert(tick.agent, \"agent is important for tick method\")\n    assert(tick.worldBlackboard, \"worldBlackboard is important for tick method\")\n\n    tick.debug = self.debug\n    tick.tree = self\n\n    --TICK NODE\n    local state = self.root:execute(tick)\n    local agentBlackboard = tick.agent\n    local lastOpenNodes = agentBlackboard:get(\"openNodes\", self.id)\n    local currOpenNodes = tick.openNodes\n\n    --does not close if it is still open in this tick\n    local start = 1\n    local lastOpenNodesNum = #lastOpenNodes\n    for i = 1, math.min(lastOpenNodesNum, #currOpenNodes) do\n        start = i + 1\n        if lastOpenNodes[i] ~= currOpenNodes[i] then\n            break\n        end\n    end\n\n    --close the nodes\n    if lastOpenNodesNum > 0 then\n        for i = lastOpenNodesNum, start, -1 do\n            lastOpenNodes[i]:close(tick)\n        end\n    end\n\n    --populate blackboard\n    agentBlackboard:set(\"openNodes\", currOpenNodes, self.id)\n    agentBlackboard:set(\"nodeCount\", tick.nodeCount, self.id)\n\n    return state\nend\n\nreturn B3\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 224
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA2BkAAAAAAADYGQAAbG9jYWwgY2xhc3MgPSByZXF1aXJlKCJiMy5jb3JlLm1pZGRsZWNsYXNzIikKbG9jYWwgY29uc3QgPSByZXF1aXJlKCJiMy5jb25zdCIpCgotLSBDbGFzcyBEZWNsYXJhdGlvbgpsb2NhbCBCMyA9IGNsYXNzKCJCMyIpCgotLSBDb3JlCkIzLkJsYWNrQm9hcmQgPSByZXF1aXJlKCJiMy5jb3JlLmJsYWNrYm9hcmQiKQpCMy5UaWNrID0gcmVxdWlyZSgiYjMuY29yZS50aWNrIikKCi0tIEFjdGlvbnMKQjMuRmFpbGVyID0gcmVxdWlyZSgiYjMuYWN0aW9ucy5mYWlsZXIiKQpCMy5TdWNjZWVkZXIgPSByZXF1aXJlKCJiMy5hY3Rpb25zLnN1Y2NlZWRlciIpCkIzLlJ1bm5lciA9IHJlcXVpcmUoImIzLmFjdGlvbnMucnVubmVyIikKQjMuRXJyb3IgPSByZXF1aXJlKCJiMy5hY3Rpb25zLmVycm9yIikKQjMuV2FpdCA9IHJlcXVpcmUoImIzLmFjdGlvbnMud2FpdCIpCgotLUNvbXBvc2l0ZXMKQjMuU2VxdWVuY2UgPSByZXF1aXJlKCJiMy5jb21wb3NpdGVzLnNlcXVlbmNlIikKQjMuUHJpb3JpdHkgPSByZXF1aXJlKCJiMy5jb21wb3NpdGVzLnNlbGVjdG9yIikKQjMuTWVtU2VxdWVuY2UgPSByZXF1aXJlKCJiMy5jb21wb3NpdGVzLm1lbV9zZXF1ZW5jZSIpCkIzLk1lbVByaW9yaXR5ID0gcmVxdWlyZSgiYjMuY29tcG9zaXRlcy5tZW1fc2VsZWN0b3IiKQpCMy5XZWlnaHRQcmlvcml0eSA9IHJlcXVpcmUoImIzLmNvbXBvc2l0ZXMud2VpZ2h0X3NlbGVjdG9yIikgLS0gPz8KCi0tRGVjb3JhdG9ycwpCMy5SZXBlYXRlciA9IHJlcXVpcmUoImIzLmRlY29yYXRvcnMucmVwZWF0ZXIiKQpCMy5SZXBlYXRVbnRpbEZhaWx1cmUgPSByZXF1aXJlKCJiMy5kZWNvcmF0b3JzLnJlcGVhdF91bnRpbF9mYWlsdXJlIikKQjMuUmVwZWF0VW50aWxTdWNjZXNzID0gcmVxdWlyZSgiYjMuZGVjb3JhdG9ycy5yZXBlYXRfdW50aWxfc3VjY2VzcyIpCkIzLk1heFRpbWUgPSByZXF1aXJlKCJiMy5kZWNvcmF0b3JzLm1heF90aW1lIikKQjMuSW52ZXJ0ZXIgPSByZXF1aXJlKCJiMy5kZWNvcmF0b3JzLmludmVydGVyIikKQjMuTGltaXRlciA9IHJlcXVpcmUoImIzLmRlY29yYXRvcnMubGltaXRlciIpCgotLS1AcGFyYW0gZGF0YSB0YWJsZSBCZWhhdmlvciBUcmVlIGRhdGEKLS0tQHBhcmFtIGN1c3RvbU5vZGVMaXN0IHRhYmxlIFRhYmxlIGNvbnRhaW4gY3VzdG9tIG5vZGUgY2xhc3NlcwotLS1AcGFyYW0gZGVidWcgYm9vbGVhbiBUaWNrIGRlYnVnIHByaW50CmZ1bmN0aW9uIEIzOmluaXRpYWxpemUoZGF0YSwgY3VzdG9tTm9kZUxpc3QsIGRlYnVnKQogICAgc2VsZi50aXRsZSA9ICJUaGUgYmVoYXZpb3IgdHJlZSIKICAgIHNlbGYuZGVzY3JpcHRpb24gPSAiRGVmYXVsdCBkZXNjcmlwdGlvbiIKICAgIHNlbGYucHJvcGVydGllcyA9IHt9CiAgICBzZWxmLnJvb3QgPSBuaWwKCiAgICBzZWxmLmRlYnVnID0gZGVidWcgb3IgbmlsCgogICAgLS0gc2VsZjpsb2FkKGRhdGEsIGN1c3RvbU5vZGVMaXN0KQogICAgQjM6c2V0X3RyZWUoZGF0YSkKZW5kCgpsb2NhbCBmdW5jdGlvbiB0cmVlX3BhcnNlcihzZWxmLCBkYXRhLCBub2RlTGlzdCkKICAgIGlmIHR5cGUoZGF0YSkgfj0gInRhYmxlIiB0aGVuCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKCiAgICBub2RlTGlzdCA9IG5vZGVMaXN0IG9yIHt9CiAgICBsb2NhbCBub2RlcyA9IHt9CiAgICBsb2NhbCBub2RlCgogICAgbG9jYWwgZGF0YV9pZCA9IGRhdGEuaWQgb3IgdXVpZDQuZ2VuZXJhdGUoKQogICAgbG9jYWwgdGl0bGUgPSBkYXRhLnRpdGxlIG9yIHNlbGYudGl0bGUKICAgIGxvY2FsIGRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiBvciBzZWxmLmRlc2NyaXB0aW9uCgoKCiAgICBmb3IgaWQsIG5vZGVEYXRhIGluIHBhaXJzKGRhdGEubm9kZXMpIGRvCiAgICAgICAgbG9jYWwgQ2xzID0gbm9kZUxpc3Rbbm9kZURhdGEubmFtZV0gb3IgQjNbbm9kZURhdGEubmFtZV0KICAgICAgICBhc3NlcnQoQ2xzLCBzdHJpbmcuZm9ybWF0KCJ1bmtvbncgbm9kZSBuYW1lOiVzIiwgbm9kZURhdGEubmFtZSkpCiAgICAgICAgbm9kZSA9IENsczpuZXcobm9kZURhdGEpCiAgICAgICAgbm9kZXNbaWRdID0gbm9kZQogICAgZW5kCgogICAgZm9yIGlkLCBub2RlRGF0YSBpbiBwYWlycyhkYXRhLm5vZGVzKSBkbwogICAgICAgIG5vZGUgPSBub2Rlc1tpZF0KICAgICAgICBpZiBub2RlLmNhdGVnb3J5ID09IGNvbnN0LkNPTVBPU0lURSBhbmQgbm9kZURhdGEuY2hpbGRyZW4gdGhlbgogICAgICAgICAgICBmb3IgaSA9IDEsICNub2RlRGF0YS5jaGlsZHJlbiBkbwogICAgICAgICAgICAgICAgbG9jYWwgY2lkID0gbm9kZURhdGEuY2hpbGRyZW5baV0KICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW5baV0gPSBub2Rlc1tjaWRdCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2VpZiBub2RlLmNhdGVnb3J5ID09IGNvbnN0LkRFQ09SQVRPUiBhbmQgbm9kZURhdGEuY2hpbGQgdGhlbgogICAgICAgICAgICBub2RlLmNoaWxkID0gbm9kZXNbbm9kZURhdGEuY2hpbGRdCiAgICAgICAgICAgIGFzc2VydChub2RlLmNoaWxkLCAibm90IGhhdmUgYSBjaGlsZCIpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBpZiBzZWxmIH49IG5pbCB0aGVuCiAgICAgICAgc2VsZi5pZCA9IGRhdGFfaWQKICAgICAgICBzZWxmLnRpdGxlID0gdGl0bGUKICAgICAgICBzZWxmLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24KICAgICAgICBzZWxmLnJvb3QgPSBub2Rlc1tkYXRhLnJvb3RdCiAgICBlbHNlCiAgICAgICAgbm9kZXNbJ2RhdGFfaWQnXSA9IGRhdGFfaWQKICAgICAgICBub2Rlc1sndGl0bGUnXSA9IHRpdGxlCiAgICAgICAgbm9kZXNbJ2Rlc2NyaXB0aW9uJ10gPSBkZXNjcmlwdGlvbgogICAgICAgIHByaW50KCdOT0RFSUQ6Jywgbm9kZXNbJ2RhdGFfaWQnXSkKICAgIGVuZAoKICAgIHJldHVybiBub2Rlc1tkYXRhLnJvb3RdCmVuZAoKLS0tQHBhcmFtIGRhdGEgdGFibGUgQmVoYXZpb3IgVHJlZSBkYXRhIHRhYmxlCi0tLUBwYXJhbSBub2RlTGlzdCB0YWJsZSBUYWJsZSBjb250YWluIGN1c3RvbSBub2RlIGNsYXNzZXMKZnVuY3Rpb24gQjM6bG9hZChkYXRhLCBub2RlTGlzdCkKICAgIHRyZWVfcGFyc2VyKHNlbGYsIGRhdGEsIG5vZGVMaXN0KQplbmQKCmZ1bmN0aW9uIEIzOnBhcnNlX3RyZWUoZGF0YSwgbm9kZUxpc3QpCiAgICByZXR1cm4gdHJlZV9wYXJzZXIobmlsLCBkYXRhLCBub2RlTGlzdCkKZW5kCgpmdW5jdGlvbiBCMzpwYXJzZV9wcm9qZWN0KGRhdGEsIG5vZGVMaXN0KQogICAgbG9jYWwgcHJvamVjdF90cmVlID0ge30KICAgIGZvciBpLCB0cmVlIGluIGlwYWlycyhkYXRhWyd0cmVlcyddKSBkbwogICAgICAgIHByb2plY3RfdHJlZVt0cmVlLnRpdGxlXSA9IHRyZWVfcGFyc2VyKG5pbCwgdHJlZSwgbm9kZUxpc3QpCiAgICBlbmQKICAgIHJldHVybiBwcm9qZWN0X3RyZWUKZW5kCgpmdW5jdGlvbiBCMzpzZXRfdHJlZShkYXRhKQogICAgc2VsZi5pZCA9IGRhdGEuZGF0YV9pZCBvciB1dWlkNC5nZW5lcmF0ZSgpCiAgICBzZWxmLnRpdGxlID0gZGF0YS50aXRsZSBvciBzZWxmLnRpdGxlCiAgICBzZWxmLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiBvciBzZWxmLmRlc2NyaXB0aW9uCiAgICBzZWxmLnByb3BlcnRpZXMgPSB7fQogICAgc2VsZi5yb290ID0gbmlsCiAgICBzZWxmLnJvb3QgPSBkYXRhCmVuZAoKZnVuY3Rpb24gQjM6ZHVtcCgpCiAgICBsb2NhbCBkYXRhID0ge30KICAgIGxvY2FsIGN1c3RvbU5hbWVzID0ge30KCiAgICBkYXRhLnRpdGxlID0gc2VsZi50aXRsZQogICAgZGF0YS5kZXNjcmlwdGlvbiA9IHNlbGYuZGVzY3JpcHRpb24KICAgIGRhdGEucHJvcGVydGllcyA9IHNlbGYucHJvcGVydGllcwogICAgZGF0YS5ub2RlcyA9IHt9CiAgICBkYXRhLmN1c3RvbV9ub2RlcyA9IHt9CgogICAgaWYgc2VsZi5yb290IHRoZW4KICAgICAgICBkYXRhLnJvb3QgPSBzZWxmLnJvb3QuaWQKICAgIGVsc2UKICAgICAgICByZXR1cm4gZGF0YQogICAgZW5kCgogICAgbG9jYWwgc3RhY2sgPSB7IHNlbGYucm9vdCB9CgogICAgd2hpbGUgI3N0YWNrID4gMCBkbwogICAgICAgIGxvY2FsIG5vZGUgPSB0YWJsZS5yZW1vdmUoc3RhY2ssICNzdGFjaykKICAgICAgICBsb2NhbCBub2RlRGF0YSA9IHt9CiAgICAgICAgbm9kZURhdGEuaWQgPSBub2RlLmlkCiAgICAgICAgbm9kZURhdGEubmFtZSA9IG5vZGUubmFtZQogICAgICAgIG5vZGVEYXRhLnRpdGxlID0gbm9kZS50aXRsZQogICAgICAgIG5vZGVEYXRhLmRlc2NyaXB0aW9uID0gbm9kZS5kZXNjcmlwdGlvbgogICAgICAgIG5vZGVEYXRhLnByb3BlcnRpZXMgPSBub2RlLnByb3BlcnRpZXMKICAgICAgICBub2RlRGF0YS5wYXJhbWV0ZXJzID0gbm9kZS5wYXJhbWV0ZXJzCgogICAgICAgIC0tdmVyaWZ5IGN1c3RvbSBub2RlCiAgICAgICAgbG9jYWwgcHJvdG8KICAgICAgICBpZiBub2RlLmNvbnN0cnVjdG9yIHRoZW4KICAgICAgICAgICAgcHJvdG8gPSBub2RlLmNvbnN0cnVjdG9yLnByb3RvdHlwZQogICAgICAgIGVuZAogICAgICAgIGxvY2FsIG5vZGVOYW1lID0gKHByb3RvIGFuZCBwcm90by5uYW1lKSBvciBub2RlLm5hbWUKICAgICAgICBpZiBub3QgQjNbbm9kZU5hbWVdIGFuZCBub3QgY3VzdG9tTmFtZXNbbm9kZU5hbWVdIHRoZW4KICAgICAgICAgICAgbG9jYWwgc3ViZGF0YSA9IHt9CiAgICAgICAgICAgIHN1YmRhdGEubmFtZSA9IG5vZGVOYW1lCiAgICAgICAgICAgIHN1YmRhdGEudGl0bGUgPSAocHJvdG8gYW5kIHByb3RvLnRpdGxlKSBvciBub2RlLnRpdGxlCiAgICAgICAgICAgIHN1YmRhdGEuY2F0ZWdvcnkgPSBub2RlLmNhdGVnb3J5CiAgICAgICAgICAgIGN1c3RvbU5hbWVzW25vZGVOYW1lXSA9IHRydWUKICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGRhdGEuY3VzdG9tX25vZGVzLCBzdWJkYXRhKQogICAgICAgIGVuZAoKICAgICAgICAtLXN0b3JlIGNoaWxkcmVuL2NoaWxkCiAgICAgICAgbG9jYWwgY2F0ZWdvcnkgPSBub2RlLmNhdGVnb3J5CiAgICAgICAgaWYgY2F0ZWdvcnkgPT0gY29uc3QuQ09NUE9TSVRFIGFuZCBub2RlLmNoaWxkcmVuIHRoZW4KICAgICAgICAgICAgbG9jYWwgY2hpbGRyZW4gPSB7fQogICAgICAgICAgICBmb3IgaSA9IDEsICNub2RlLmNoaWxkcmVuIGRvCiAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoY2hpbGRyZW4sIG5vZGUuY2hpbGRyZW5baV0uaWQpCiAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoc3RhY2ssIG5vZGUuY2hpbGRyZW5baV0pCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBub2RlRGF0YS5jaGlsZHJlbiA9IGNoaWxkcmVuCiAgICAgICAgZWxzZWlmIGNhdGVnb3J5ID09IGNvbnN0LkRFQ09SQVRPUiBhbmQgbm9kZS5jaGlsZCB0aGVuCiAgICAgICAgICAgIHRhYmxlLmluc2VydChzdGFjaywgbm9kZS5jaGlsZCkKICAgICAgICAgICAgbm9kZURhdGEuY2hpbGQgPSBub2RlLmNoaWxkLmlkCiAgICAgICAgZW5kCiAgICAgICAgZGF0YS5ub2Rlc1tub2RlLmlkXSA9IG5vZGVEYXRhCiAgICBlbmQKICAgIHJldHVybiBkYXRhCmVuZAoKZnVuY3Rpb24gQjM6dGljayh0aWNrKQogICAgYXNzZXJ0KHRpY2ssICJ0aWNrIG9iamVjdCBpcyBpbXBvcnRhbnQgZm9yIHRpY2sgbWV0aG9kIikKICAgIGFzc2VydCh0aWNrLmFnZW50LCAiYWdlbnQgaXMgaW1wb3J0YW50IGZvciB0aWNrIG1ldGhvZCIpCiAgICBhc3NlcnQodGljay53b3JsZEJsYWNrYm9hcmQsICJ3b3JsZEJsYWNrYm9hcmQgaXMgaW1wb3J0YW50IGZvciB0aWNrIG1ldGhvZCIpCgogICAgdGljay5kZWJ1ZyA9IHNlbGYuZGVidWcKICAgIHRpY2sudHJlZSA9IHNlbGYKCiAgICAtLVRJQ0sgTk9ERQogICAgbG9jYWwgc3RhdGUgPSBzZWxmLnJvb3Q6ZXhlY3V0ZSh0aWNrKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gdGljay5hZ2VudAogICAgbG9jYWwgbGFzdE9wZW5Ob2RlcyA9IGFnZW50QmxhY2tib2FyZDpnZXQoIm9wZW5Ob2RlcyIsIHNlbGYuaWQpCiAgICBsb2NhbCBjdXJyT3Blbk5vZGVzID0gdGljay5vcGVuTm9kZXMKCiAgICAtLWRvZXMgbm90IGNsb3NlIGlmIGl0IGlzIHN0aWxsIG9wZW4gaW4gdGhpcyB0aWNrCiAgICBsb2NhbCBzdGFydCA9IDEKICAgIGxvY2FsIGxhc3RPcGVuTm9kZXNOdW0gPSAjbGFzdE9wZW5Ob2RlcwogICAgZm9yIGkgPSAxLCBtYXRoLm1pbihsYXN0T3Blbk5vZGVzTnVtLCAjY3Vyck9wZW5Ob2RlcykgZG8KICAgICAgICBzdGFydCA9IGkgKyAxCiAgICAgICAgaWYgbGFzdE9wZW5Ob2Rlc1tpXSB+PSBjdXJyT3Blbk5vZGVzW2ldIHRoZW4KICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbmQKICAgIGVuZAoKICAgIC0tY2xvc2UgdGhlIG5vZGVzCiAgICBpZiBsYXN0T3Blbk5vZGVzTnVtID4gMCB0aGVuCiAgICAgICAgZm9yIGkgPSBsYXN0T3Blbk5vZGVzTnVtLCBzdGFydCwgLTEgZG8KICAgICAgICAgICAgbGFzdE9wZW5Ob2Rlc1tpXTpjbG9zZSh0aWNrKQogICAgICAgIGVuZAogICAgZW5kCgogICAgLS1wb3B1bGF0ZSBibGFja2JvYXJkCiAgICBhZ2VudEJsYWNrYm9hcmQ6c2V0KCJvcGVuTm9kZXMiLCBjdXJyT3Blbk5vZGVzLCBzZWxmLmlkKQogICAgYWdlbnRCbGFja2JvYXJkOnNldCgibm9kZUNvdW50IiwgdGljay5ub2RlQ291bnQsIHNlbGYuaWQpCgogICAgcmV0dXJuIHN0YXRlCmVuZAoKcmV0dXJuIEIzCg",
					"AQAAAAAAAAABAAAAxgUAAAAAAADGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1759,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local class = require(\"b3.core.middleclass\")\nlocal const = require(\"b3.const\")\n\n-- Class Declaration\nlocal B3 = class(\"B3\")\n\n-- Core\nB3.BlackBoard = require(\"b3.core.blackboard\")\nB3.Tick = require(\"b3.core.tick\")\n\n-- Actions\nB3.Failer = require(\"b3.actions.failer\")\nB3.Succeeder = require(\"b3.actions.succeeder\")\nB3.Runner = require(\"b3.actions.runner\")\nB3.Error = require(\"b3.actions.error\")\nB3.Wait = require(\"b3.actions.wait\")\n\n--Composites\nB3.Sequence = require(\"b3.composites.sequence\")\nB3.Priority = require(\"b3.composites.selector\")\nB3.MemSequence = require(\"b3.composites.mem_sequence\")\nB3.MemPriority = require(\"b3.composites.mem_selector\")\nB3.WeightPriority = require(\"b3.composites.weight_selector\") -- ??\n\n--Decorators\nB3.Repeater = require(\"b3.decorators.repeater\")\nB3.RepeatUntilFailure = require(\"b3.decorators.repeat_until_failure\")\nB3.RepeatUntilSuccess = require(\"b3.decorators.repeat_until_success\")\nB3.MaxTime = require(\"b3.decorators.max_time\")\nB3.Inverter = require(\"b3.decorators.inverter\")\nB3.Limiter = require(\"b3.decorators.limiter\")\n\n---@param data table Behavior Tree data\n---@param customNodeList table Table contain custom node classes\n---@param debug boolean Tick debug print\nfunction B3:initialize(data, customNodeList, debug)\n    self.title = \"The behavior tree\"\n    self.description = \"Default description\"\n    self.properties = {}\n    self.root = nil\n\n    self.debug = debug or nil\n\n    -- self:load(data, customNodeList)\n    B3:set_tree(data)\nend\n\nlocal function tree_parser(self, data, nodeList)\n    if type(data) ~= \"table\" then\n        return false\n    end\n\n    nodeList = nodeList or {}\n    local nodes = {}\n    local node\n\n    local data_id = data.id or uuid4.generate()\n    local title = data.title or self.title\n    local description = data.description or self.description\n\n\n\n    for id, nodeData in pairs(data.nodes) do\n        local Cls = nodeList[nodeData.name] or B3[nodeData.name]\n        assert(Cls, string.format(\"unkonw node name:%s\", nodeData.name))\n        node = Cls:new(nodeData)\n        nodes[id] = node\n    end\n\n    for id, nodeData in pairs(data.nodes) do\n        node = nodes[id]\n        if node.category == const.COMPOSITE and nodeData.children then\n            for i = 1, #nodeData.children do\n                local cid = nodeData.children[i]\n                node.children[i] = nodes[cid]\n            end\n        elseif node.category == const.DECORATOR and nodeData.child then\n            node.child = nodes[nodeData.child]\n            assert(node.child, \"not have a child\")\n        end\n    end\n\n    if self ~= nil then\n        self.id = data_id\n        self.title = title\n        self.description = description\n        self.root = nodes[data.root]\n    else\n        nodes['data_id'] = data_id\n        nodes['title'] = title\n        nodes['description'] = description\n        print('NODEID:', nodes['data_id'])\n    end\n\n    return nodes[data.root]\nend\n\n---@param data table Behavior Tree data table\n---@param nodeList table Table contain custom node classes\nfunction B3:load(data, nodeList)\n    tree_parser(self, data, nodeList)\nend\n\nfunction B3:parse_tree(data, nodeList)\n    return tree_parser(nil, data, nodeList)\nend\n\nfunction B3:parse_project(data, nodeList)\n    local project_tree = {}\n    for i, tree in ipairs(data['trees']) do\n        project_tree[tree.title] = tree_parser(nil, tree, nodeList)\n    end\n    return project_tree\nend\n\nfunction B3:set_tree(data)\n    self.id = data.data_id or uuid4.generate()\n    self.title = data.title or self.title\n    self.description = data.description or self.description\n    self.properties = {}\n    self.root = nil\n    self.root = data\nend\n\nfunction B3:dump()\n    local data = {}\n    local customNames = {}\n\n    data.title = self.title\n    data.description = self.description\n    data.properties = self.properties\n    data.nodes = {}\n    data.custom_nodes = {}\n\n    if self.root then\n        data.root = self.root.id\n    else\n        return data\n    end\n\n    local stack = { self.root }\n\n    while #stack > 0 do\n        local node = table.remove(stack, #stack)\n        local nodeData = {}\n        nodeData.id = node.id\n        nodeData.name = node.name\n        nodeData.title = node.title\n        nodeData.description = node.description\n        nodeData.properties = node.properties\n        nodeData.parameters = node.parameters\n\n        --verify custom node\n        local proto\n        if node.constructor then\n            proto = node.constructor.prototype\n        end\n        local nodeName = (proto and proto.name) or node.name\n        if not B3[nodeName] and not customNames[nodeName] then\n            local subdata = {}\n            subdata.name = nodeName\n            subdata.title = (proto and proto.title) or node.title\n            subdata.category = node.category\n            customNames[nodeName] = true\n            table.insert(data.custom_nodes, subdata)\n        end\n\n        --store children/child\n        local category = node.category\n        if category == const.COMPOSITE and node.children then\n            local children = {}\n            for i = 1, #node.children do\n                table.insert(children, node.children[i].id)\n                table.insert(stack, node.children[i])\n            end\n            nodeData.children = children\n        elseif category == const.DECORATOR and node.child then\n            table.insert(stack, node.child)\n            nodeData.child = node.child.id\n        end\n        data.nodes[node.id] = nodeData\n    end\n    return data\nend\n\nfunction B3:tick(tick)\n    assert(tick, \"tick object is important for tick method\")\n    assert(tick.agent, \"agent is important for tick method\")\n    assert(tick.worldBlackboard, \"worldBlackboard is important for tick method\")\n\n    tick.debug = self.debug\n    tick.tree = self\n\n    --TICK NODE\n    local state = self.root:execute(tick)\n    local agentBlackboard = tick.agent\n    local lastOpenNodes = agentBlackboard:get(\"openNodes\", self.id)\n    local currOpenNodes = tick.openNodes\n\n    --does not close if it is still open in this tick\n    local start = 1\n    local lastOpenNodesNum = #lastOpenNodes\n    for i = 1, math.min(lastOpenNodesNum, #currOpenNodes) do\n        start = i + 1\n        if lastOpenNodes[i] ~= currOpenNodes[i] then\n            break\n        end\n    end\n\n    --close the nodes\n    if lastOpenNodesNum > 0 then\n        for i = lastOpenNodesNum, start, -1 do\n            lastOpenNodes[i]:close(tick)\n        end\n    end\n\n    --populate blackboard\n    agentBlackboard:set(\"openNodes\", currOpenNodes, self.id)\n    agentBlackboard:set(\"nodeCount\", tick.nodeCount, self.id)\n\n    return state\nend\n\nreturn B3\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 224
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"AQAAAAAAAAABAAAAxgUAAAAAAADGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1795,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local class = require(\"b3.core.middleclass\")\nlocal const = require(\"b3.const\")\n\n-- Class Declaration\nlocal B3 = class(\"B3\")\n\n-- Core\nB3.BlackBoard = require(\"b3.core.blackboard\")\nB3.Tick = require(\"b3.core.tick\")\n\n-- Actions\nB3.Failer = require(\"b3.actions.failer\")\nB3.Succeeder = require(\"b3.actions.succeeder\")\nB3.Runner = require(\"b3.actions.runner\")\nB3.Error = require(\"b3.actions.error\")\nB3.Wait = require(\"b3.actions.wait\")\n\n--Composites\nB3.Sequence = require(\"b3.composites.sequence\")\nB3.Priority = require(\"b3.composites.selector\")\nB3.MemSequence = require(\"b3.composites.mem_sequence\")\nB3.MemPriority = require(\"b3.composites.mem_selector\")\nB3.WeightPriority = require(\"b3.composites.weight_selector\") -- ??\n\n--Decorators\nB3.Repeater = require(\"b3.decorators.repeater\")\nB3.RepeatUntilFailure = require(\"b3.decorators.repeat_until_failure\")\nB3.RepeatUntilSuccess = require(\"b3.decorators.repeat_until_success\")\nB3.MaxTime = require(\"b3.decorators.max_time\")\nB3.Inverter = require(\"b3.decorators.inverter\")\nB3.Limiter = require(\"b3.decorators.limiter\")\n\n---@param data table Behavior Tree data\n---@param customNodeList table Table contain custom node classes\n---@param debug boolean Tick debug print\nfunction B3:initialize(data, customNodeList, debug)\n    self.title = \"The behavior tree\"\n    self.description = \"Default description\"\n    self.properties = {}\n    self.root = nil\n\n    self.debug = debug or nil\n\n    -- self:load(data, customNodeList)\n    B3:set_tree(data)\nend\n\nlocal function tree_parser(self, data, nodeList)\n    if type(data) ~= \"table\" then\n        return false\n    end\n\n    nodeList = nodeList or {}\n    local nodes = {}\n    local node\n\n    local data_id = data.id or uuid4.generate()\n    local title = data.title or self.title\n    local description = data.description or self.description\n\n\n\n    for id, nodeData in pairs(data.nodes) do\n        local Cls = nodeList[nodeData.name] or B3[nodeData.name]\n        assert(Cls, string.format(\"unkonw node name:%s\", nodeData.name))\n        node = Cls:new(nodeData)\n        nodes[id] = node\n    end\n\n    for id, nodeData in pairs(data.nodes) do\n        node = nodes[id]\n        if node.category == const.COMPOSITE and nodeData.children then\n            for i = 1, #nodeData.children do\n                local cid = nodeData.children[i]\n                node.children[i] = nodes[cid]\n            end\n        elseif node.category == const.DECORATOR and nodeData.child then\n            node.child = nodes[nodeData.child]\n            assert(node.child, \"not have a child\")\n        end\n    end\n\n    if self ~= nil then\n        self.id = data_id\n        self.title = title\n        self.description = description\n        self.root = nodes[data.root]\n    else\n        nodes['data_id'] = data_id\n        nodes['title'] = title\n        nodes['description'] = description\n        print('NODEID:', nodes['data_id'])\n    end\n\n    return nodes[data.root]\nend\n\n---@param data table Behavior Tree data table\n---@param nodeList table Table contain custom node classes\nfunction B3:load(data, nodeList)\n    tree_parser(self, data, nodeList)\nend\n\nfunction B3:parse_tree(data, nodeList)\n    return tree_parser(nil, data, nodeList)\nend\n\nfunction B3:parse_project(data, nodeList)\n    local project_tree = {}\n    for i, tree in ipairs(data['trees']) do\n        project_tree[tree.title] = tree_parser(nil, tree, nodeList)\n    end\n    return project_tree\nend\n\nfunction B3:set_tree(data)\n    self.id = data.data_id or uuid4.generate()\n    self.title = data.title or self.title\n    self.description = data.description or self.description\n    self.properties = {}\n    self.root = nil\n    self.root = data\nend\n\nfunction B3:dump()\n    local data = {}\n    local customNames = {}\n\n    data.title = self.title\n    data.description = self.description\n    data.properties = self.properties\n    data.nodes = {}\n    data.custom_nodes = {}\n\n    if self.root then\n        data.root = self.root.id\n    else\n        return data\n    end\n\n    local stack = { self.root }\n\n    while #stack > 0 do\n        local node = table.remove(stack, #stack)\n        local nodeData = {}\n        nodeData.id = node.id\n        nodeData.name = node.name\n        nodeData.title = node.title\n        nodeData.description = node.description\n        nodeData.properties = node.properties\n        nodeData.parameters = node.parameters\n\n        --verify custom node\n        local proto\n        if node.constructor then\n            proto = node.constructor.prototype\n        end\n        local nodeName = (proto and proto.name) or node.name\n        if not B3[nodeName] and not customNames[nodeName] then\n            local subdata = {}\n            subdata.name = nodeName\n            subdata.title = (proto and proto.title) or node.title\n            subdata.category = node.category\n            customNames[nodeName] = true\n            table.insert(data.custom_nodes, subdata)\n        end\n\n        --store children/child\n        local category = node.category\n        if category == const.COMPOSITE and node.children then\n            local children = {}\n            for i = 1, #node.children do\n                table.insert(children, node.children[i].id)\n                table.insert(stack, node.children[i])\n            end\n            nodeData.children = children\n        elseif category == const.DECORATOR and node.child then\n            table.insert(stack, node.child)\n            nodeData.child = node.child.id\n        end\n        data.nodes[node.id] = nodeData\n    end\n    return data\nend\n\nfunction B3:tick(tick)\n    assert(tick, \"tick object is important for tick method\")\n    assert(tick.agent, \"agent is important for tick method\")\n    assert(tick.worldBlackboard, \"worldBlackboard is important for tick method\")\n\n    tick.debug = self.debug\n    tick.tree = self\n\n    --TICK NODE\n    local state = self.root:execute(tick)\n    local agentBlackboard = tick.agent\n    local lastOpenNodes = agentBlackboard:get(\"openNodes\", self.id)\n    local currOpenNodes = tick.openNodes\n\n    --does not close if it is still open in this tick\n    local start = 1\n    local lastOpenNodesNum = #lastOpenNodes\n    for i = 1, math.min(lastOpenNodesNum, #currOpenNodes) do\n        start = i + 1\n        if lastOpenNodes[i] ~= currOpenNodes[i] then\n            break\n        end\n    end\n\n    --close the nodes\n    if lastOpenNodesNum > 0 then\n        for i = lastOpenNodesNum, start, -1 do\n            lastOpenNodes[i]:close(tick)\n        end\n    end\n\n    --populate blackboard\n    agentBlackboard:set(\"openNodes\", currOpenNodes, self.id)\n    agentBlackboard:set(\"nodeCount\", tick.nodeCount, self.id)\n\n    return state\nend\n\nreturn B3\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 224
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"AQAAAAAAAAABAAAAbwYAAAAAAABvBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "b3/const.lua",
			"settings":
			{
				"buffer_size": 295,
				"line_ending": "Unix"
			}
		},
		{
			"file": "b3/core/base_node.lua",
			"settings":
			{
				"buffer_size": 1622,
				"line_ending": "Unix"
			}
		},
		{
			"file": "main/json/test_project.json",
			"settings":
			{
				"buffer_size": 5009,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAkRMAAAAAAAAAAAAAkRMAAAAAAACREwAAAAAAAHMTAAB7CiAgInZlcnNpb24iOiAiMC4zLjEiLAogICJzY29wZSI6ICJwcm9qZWN0IiwKICAic2VsZWN0ZWRUcmVlIjogIjRkM2Y1NGY0LTIwYWQtNGQxZi04MWFhLWQyMzA3NmY3NDVjMSIsCiAgInRyZWVzIjogWwogICAgewogICAgICAidmVyc2lvbiI6ICIwLjMuMSIsCiAgICAgICJzY29wZSI6ICJ0cmVlIiwKICAgICAgImlkIjogIjYzMmRiNDA4LTU2ZjEtNDQ2Yy05ZGY5LTNkNWU4Nzc1NGQ5ZSIsCiAgICAgICJ0aXRsZSI6ICJtb3ZlIiwKICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICJyb290IjogIjM0NjcyZDA1LTc2MTItNDI3Mi04Yjc2LWVmNjkzZTQ0ZDliNyIsCiAgICAgICJwcm9wZXJ0aWVzIjoge30sCiAgICAgICJub2RlcyI6IHsKICAgICAgICAiZGU0ZjAwMDctZTMxZC00NDhjLTllNGUtNTM4MTAwNTVhNjEzIjogewogICAgICAgICAgImlkIjogImRlNGYwMDA3LWUzMWQtNDQ4Yy05ZTRlLTUzODEwMDU1YTYxMyIsCiAgICAgICAgICAibmFtZSI6ICJTZXF1ZW5jZSIsCiAgICAgICAgICAidGl0bGUiOiAiU2VxdWVuY2UiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICAgICAicHJvcGVydGllcyI6IHt9LAogICAgICAgICAgImRpc3BsYXkiOiB7CiAgICAgICAgICAgICJ4IjogLTMxMiwKICAgICAgICAgICAgInkiOiA4NAogICAgICAgICAgfSwKICAgICAgICAgICJjaGlsZHJlbiI6IFsKICAgICAgICAgICAgImZmMDQ2OGYzLWZjZDktNGQyYi1iZDI2LWVlZDg4MmI3NzhiNiIsCiAgICAgICAgICAgICI2OTlmZjA0Zi02YzQ4LTQ2ODMtODgyNC02YzZiYmZhMTk3MzUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiNjk5ZmYwNGYtNmM0OC00NjgzLTg4MjQtNmM2YmJmYTE5NzM1IjogewogICAgICAgICAgImlkIjogIjY5OWZmMDRmLTZjNDgtNDY4My04ODI0LTZjNmJiZmExOTczNSIsCiAgICAgICAgICAibmFtZSI6ICJTdWNjZWVkZXIiLAogICAgICAgICAgInRpdGxlIjogIlN1Y2NlZWRlciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiIiwKICAgICAgICAgICJwcm9wZXJ0aWVzIjoge30sCiAgICAgICAgICAiZGlzcGxheSI6IHsKICAgICAgICAgICAgIngiOiAtMjE2LAogICAgICAgICAgICAieSI6IDIxNgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImZmMDQ2OGYzLWZjZDktNGQyYi1iZDI2LWVlZDg4MmI3NzhiNiI6IHsKICAgICAgICAgICJpZCI6ICJmZjA0NjhmMy1mY2Q5LTRkMmItYmQyNi1lZWQ4ODJiNzc4YjYiLAogICAgICAgICAgIm5hbWUiOiAidGVzdF9hY3Rpb24iLAogICAgICAgICAgInRpdGxlIjogIlRlc3QgQWN0aW9uIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJ0ZXN0aW5nIiwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAidGVzdF92YWx1ZSI6IDEKICAgICAgICAgIH0sCiAgICAgICAgICAiZGlzcGxheSI6IHsKICAgICAgICAgICAgIngiOiAtNDIwLAogICAgICAgICAgICAieSI6IDIxNgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgIjM0NjcyZDA1LTc2MTItNDI3Mi04Yjc2LWVmNjkzZTQ0ZDliNyI6IHsKICAgICAgICAgICJpZCI6ICIzNDY3MmQwNS03NjEyLTQyNzItOGI3Ni1lZjY5M2U0NGQ5YjciLAogICAgICAgICAgIm5hbWUiOiAiUHJpb3JpdHkiLAogICAgICAgICAgInRpdGxlIjogIlByaW9yaXR5IiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7fSwKICAgICAgICAgICJkaXNwbGF5IjogewogICAgICAgICAgICAieCI6IC0xNTYsCiAgICAgICAgICAgICJ5IjogLTQ4CiAgICAgICAgICB9LAogICAgICAgICAgImNoaWxkcmVuIjogWwogICAgICAgICAgICAiZGU0ZjAwMDctZTMxZC00NDhjLTllNGUtNTM4MTAwNTVhNjEzIiwKICAgICAgICAgICAgIjQ3MjJjYzU3LWYzOTYtNDVmMi05MWRkLTliMzAyYzMzNWZlNSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICI0NzIyY2M1Ny1mMzk2LTQ1ZjItOTFkZC05YjMwMmMzMzVmZTUiOiB7CiAgICAgICAgICAiaWQiOiAiNDcyMmNjNTctZjM5Ni00NWYyLTkxZGQtOWIzMDJjMzM1ZmU1IiwKICAgICAgICAgICJuYW1lIjogIkZhaWxlciIsCiAgICAgICAgICAidGl0bGUiOiAiRmFpbGVyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7fSwKICAgICAgICAgICJkaXNwbGF5IjogewogICAgICAgICAgICAieCI6IDAsCiAgICAgICAgICAgICJ5IjogODQKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJkaXNwbGF5IjogewogICAgICAgICJjYW1lcmFfeCI6IDkyMSwKICAgICAgICAiY2FtZXJhX3kiOiAzOTcuNSwKICAgICAgICAiY2FtZXJhX3oiOiAxLAogICAgICAgICJ4IjogLTE1NiwKICAgICAgICAieSI6IC0xNjgKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInZlcnNpb24iOiAiMC4zLjEiLAogICAgICAic2NvcGUiOiAidHJlZSIsCiAgICAgICJpZCI6ICI0ZDNmNTRmNC0yMGFkLTRkMWYtODFhYS1kMjMwNzZmNzQ1YzEiLAogICAgICAidGl0bGUiOiAiaWRsZSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAicm9vdCI6ICI5ODk5MjE5My01YmUzLTQ2MTMtOGRiOC1kM2I4OTJiMzliZDYiLAogICAgICAicHJvcGVydGllcyI6IHt9LAogICAgICAibm9kZXMiOiB7CiAgICAgICAgIjExZTRjZTc5LWY0ZWEtNGYyZi05YTY2LWM2Zjc4OWRiMTM0MSI6IHsKICAgICAgICAgICJpZCI6ICIxMWU0Y2U3OS1mNGVhLTRmMmYtOWE2Ni1jNmY3ODlkYjEzNDEiLAogICAgICAgICAgIm5hbWUiOiAiU2VxdWVuY2UiLAogICAgICAgICAgInRpdGxlIjogIlNlcXVlbmNlIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7fSwKICAgICAgICAgICJkaXNwbGF5IjogewogICAgICAgICAgICAieCI6IC0yNjQsCiAgICAgICAgICAgICJ5IjogMTMyCiAgICAgICAgICB9LAogICAgICAgICAgImNoaWxkcmVuIjogWwogICAgICAgICAgICAiMWNiNjFlZWMtMTg1Ny00MjJlLTgwM2MtNmE2MDYxNjlmMzZhIiwKICAgICAgICAgICAgImE3NzFjZTE5LTJhNDktNDJjOS04YjA1LTU3OTc1MmQwOWRmMSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJhNzcxY2UxOS0yYTQ5LTQyYzktOGIwNS01Nzk3NTJkMDlkZjEiOiB7CiAgICAgICAgICAiaWQiOiAiYTc3MWNlMTktMmE0OS00MmM5LThiMDUtNTc5NzUyZDA5ZGYxIiwKICAgICAgICAgICJuYW1lIjogIlN1Y2NlZWRlciIsCiAgICAgICAgICAidGl0bGUiOiAiU3VjY2VlZGVyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7fSwKICAgICAgICAgICJkaXNwbGF5IjogewogICAgICAgICAgICAieCI6IC0xNjgsCiAgICAgICAgICAgICJ5IjogMjY0CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiMWNiNjFlZWMtMTg1Ny00MjJlLTgwM2MtNmE2MDYxNjlmMzZhIjogewogICAgICAgICAgImlkIjogIjFjYjYxZWVjLTE4NTctNDIyZS04MDNjLTZhNjA2MTY5ZjM2YSIsCiAgICAgICAgICAibmFtZSI6ICJ0ZXN0X2FjdGlvbiIsCiAgICAgICAgICAidGl0bGUiOiAiVGVzdCBBY3Rpb24iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogInRlc3RpbmciLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJ0ZXN0X3ZhbHVlIjogMQogICAgICAgICAgfSwKICAgICAgICAgICJkaXNwbGF5IjogewogICAgICAgICAgICAieCI6IC0zNzIsCiAgICAgICAgICAgICJ5IjogMjY0CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiOTg5OTIxOTMtNWJlMy00NjEzLThkYjgtZDNiODkyYjM5YmQ2IjogewogICAgICAgICAgImlkIjogIjk4OTkyMTkzLTViZTMtNDYxMy04ZGI4LWQzYjg5MmIzOWJkNiIsCiAgICAgICAgICAibmFtZSI6ICJQcmlvcml0eSIsCiAgICAgICAgICAidGl0bGUiOiAiUHJpb3JpdHkiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICAgICAicHJvcGVydGllcyI6IHt9LAogICAgICAgICAgImRpc3BsYXkiOiB7CiAgICAgICAgICAgICJ4IjogLTEwOCwKICAgICAgICAgICAgInkiOiAwCiAgICAgICAgICB9LAogICAgICAgICAgImNoaWxkcmVuIjogWwogICAgICAgICAgICAiMTFlNGNlNzktZjRlYS00ZjJmLTlhNjYtYzZmNzg5ZGIxMzQxIiwKICAgICAgICAgICAgIjA2ODBhZGU3LTg2YWYtNGYwNS05NjgzLTRiNDAxNWVlZGE2ZiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICIwNjgwYWRlNy04NmFmLTRmMDUtOTY4My00YjQwMTVlZWRhNmYiOiB7CiAgICAgICAgICAiaWQiOiAiMDY4MGFkZTctODZhZi00ZjA1LTk2ODMtNGI0MDE1ZWVkYTZmIiwKICAgICAgICAgICJuYW1lIjogIkZhaWxlciIsCiAgICAgICAgICAidGl0bGUiOiAiRmFpbGVyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7fSwKICAgICAgICAgICJkaXNwbGF5IjogewogICAgICAgICAgICAieCI6IDQ4LAogICAgICAgICAgICAieSI6IDEzMgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgImRpc3BsYXkiOiB7CiAgICAgICAgImNhbWVyYV94IjogODM4LjUsCiAgICAgICAgImNhbWVyYV95IjogNDg1LAogICAgICAgICJjYW1lcmFfeiI6IDEsCiAgICAgICAgIngiOiAtMTU2LAogICAgICAgICJ5IjogLTIwNAogICAgICB9CiAgICB9CiAgXSwKICAiY3VzdG9tX25vZGVzIjogWwogICAgewogICAgICAidmVyc2lvbiI6ICIwLjMuMSIsCiAgICAgICJzY29wZSI6ICJub2RlIiwKICAgICAgIm5hbWUiOiAidGVzdF9hY3Rpb24iLAogICAgICAiY2F0ZWdvcnkiOiAiYWN0aW9uIiwKICAgICAgInRpdGxlIjogIlRlc3QgQWN0aW9uIiwKICAgICAgImRlc2NyaXB0aW9uIjogInRlc3RpbmciLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAidGVzdF92YWx1ZSI6IDEKICAgICAgfQogICAgfQogIF0KfQ",
					"AQAAAAAAAAABAAAAAAAAAAAAAABzEwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "main/test_action.lua",
			"settings":
			{
				"buffer_size": 578,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					29,
					1,
					"paste",
					null,
					"AgAAAPUBAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAAKAgAAAAAAAAQAAAAxMDAx",
					"AQAAAAAAAAABAAAA9QEAAAAAAAD5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAoCAAAAAAAACwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgIAAAAAAAAKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "+19"
					},
					"AwAAAAsCAAAAAAAADAIAAAAAAAAAAAAADAIAAAAAAAANAgAAAAAAAAAAAAANAgAAAAAAAA4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwIAAAAAAAALAgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAA0CAAAAAAAADQIAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAADgIAAAAAAAAOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "00"
					},
					"AgAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQIAAAAAAAANAgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local class = require(\"b3.core.middleclass\")\nlocal Action = require(\"b3.core.action\")\nlocal const = require(\"b3.const\")\n\nlocal TestAction = class(\"TestAction\", Action)\n\n\nfunction TestAction:onCreate(properties)\n    pprint(properties)\nend\n\nfunction TestAction:onTick(tick)\n    print('On Test Action')\n    pprint(tick.worldBlackboard:get('test_blackboard_value'))\n\n    local test_blackboard_value = tick.worldBlackboard:get('test_blackboard_value')\n    tick.worldBlackboard:set('test_blackboard_value', test_blackboard_value + 100)\n    return const.SUCCESS\nend\n\nreturn TestAction\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 21
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAQgIAAAAAAABBAgAAbG9jYWwgY2xhc3MgPSByZXF1aXJlKCJiMy5jb3JlLm1pZGRsZWNsYXNzIikKbG9jYWwgQWN0aW9uID0gcmVxdWlyZSgiYjMuY29yZS5hY3Rpb24iKQpsb2NhbCBjb25zdCA9IHJlcXVpcmUoImIzLmNvbnN0IikKCmxvY2FsIFRlc3RBY3Rpb24gPSBjbGFzcygiVGVzdEFjdGlvbiIsIEFjdGlvbikKCgpmdW5jdGlvbiBUZXN0QWN0aW9uOm9uQ3JlYXRlKHByb3BlcnRpZXMpCiAgICBwcHJpbnQocHJvcGVydGllcykKZW5kCgpmdW5jdGlvbiBUZXN0QWN0aW9uOm9uVGljayh0aWNrKQogICAgcHJpbnQoJ09uIFRlc3QgQWN0aW9uJykKICAgIHBwcmludCh0aWNrLndvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKICAgIGxvY2FsIHRlc3RfYmxhY2tib2FyZF92YWx1ZSA9IHRpY2sud29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykKICAgIHRpY2sud29ybGRCbGFja2JvYXJkOnNldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJywgdGVzdF9ibGFja2JvYXJkX3ZhbHVlICsxMDApCiAgICByZXR1cm4gY29uc3QuU1VDQ0VTUwplbmQKCnJldHVybiBUZXN0QWN0aW9uCg",
					"AQAAAAAAAAABAAAADwIAAAAAAAAPAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "{\n  \"version\": \"0.3.1\",\n  \"scope\": \"tree\",\n  \"id\": \"632db408-56f1-446c-9df9-3d5e87754d9e\",\n  \"title\": \"move\",\n  \"description\": \"\",\n  \"root\": \"34672d05-7612-4272-8b76-ef693e44d9b7\",\n  \"properties\": {},\n  \"nodes\": {\n    \"de4f0007-e31d-448c-9e4e-53810055a613\": {\n      \"id\": \"de4f0007-e31d-448c-9e4e-53810055a613\",\n      \"name\": \"Sequence\",\n      \"title\": \"Sequence\",\n      \"description\": \"\",\n      \"properties\": {},\n      \"display\": {\n        \"x\": -312,\n        \"y\": 84\n      },\n      \"children\": [\n        \"ff0468f3-fcd9-4d2b-bd26-eed882b778b6\",\n        \"699ff04f-6c48-4683-8824-6c6bbfa19735\"\n      ]\n    },\n    \"699ff04f-6c48-4683-8824-6c6bbfa19735\": {\n      \"id\": \"699ff04f-6c48-4683-8824-6c6bbfa19735\",\n      \"name\": \"Succeeder\",\n      \"title\": \"Succeeder\",\n      \"description\": \"\",\n      \"properties\": {},\n      \"display\": {\n        \"x\": -216,\n        \"y\": 216\n      }\n    },\n    \"ff0468f3-fcd9-4d2b-bd26-eed882b778b6\": {\n      \"id\": \"ff0468f3-fcd9-4d2b-bd26-eed882b778b6\",\n      \"name\": \"test_action\",\n      \"title\": \"Test Action\",\n      \"description\": \"testing\",\n      \"properties\": {\n        \"test_value\": 1\n      },\n      \"display\": {\n        \"x\": -420,\n        \"y\": 216\n      }\n    },\n    \"34672d05-7612-4272-8b76-ef693e44d9b7\": {\n      \"id\": \"34672d05-7612-4272-8b76-ef693e44d9b7\",\n      \"name\": \"Priority\",\n      \"title\": \"Priority\",\n      \"description\": \"\",\n      \"properties\": {},\n      \"display\": {\n        \"x\": -156,\n        \"y\": -48\n      },\n      \"children\": [\n        \"de4f0007-e31d-448c-9e4e-53810055a613\",\n        \"4722cc57-f396-45f2-91dd-9b302c335fe5\"\n      ]\n    },\n    \"4722cc57-f396-45f2-91dd-9b302c335fe5\": {\n      \"id\": \"4722cc57-f396-45f2-91dd-9b302c335fe5\",\n      \"name\": \"Failer\",\n      \"title\": \"Failer\",\n      \"description\": \"\",\n      \"properties\": {},\n      \"display\": {\n        \"x\": 0,\n        \"y\": 84\n      }\n    }\n  },\n  \"display\": {\n    \"camera_x\": 921,\n    \"camera_y\": 397.5,\n    \"camera_z\": 1,\n    \"x\": -156,\n    \"y\": -168\n  },\n  \"custom_nodes\": [\n    {\n      \"version\": \"0.3.1\",\n      \"scope\": \"node\",\n      \"name\": \"test_action\",\n      \"category\": \"action\",\n      \"title\": \"Test Action\",\n      \"description\": \"testing\",\n      \"properties\": {\n        \"test_value\": 1\n      }\n    }\n  ]\n}",
			"settings":
			{
				"buffer_size": 2224,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAsAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "main/main.script",
			"settings":
			{
				"buffer_size": 2027,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1860,
					1,
					"left_delete",
					null,
					"AQAAAB8DAAAAAAAAHwMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAIAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1898,
					1,
					"reindent",
					null,
					"AQAAALYCAAAAAAAAugIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgIAAAAAAAC2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					1899,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAALoCAAAAAAAAuwIAAAAAAAAAAAAAuwIAAAAAAAC/AgAAAAAAAAAAAAC2AgAAAAAAALYCAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAAugIAAAAAAAC6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					1916,
					1,
					"insert",
					{
						"characters": "_data"
					},
					"BgAAADkCAAAAAAAAOgIAAAAAAAAAAAAAuAIAAAAAAAC4AgAAAAAAAAQAAAAgICAgOgIAAAAAAAA7AgAAAAAAAAAAAAA7AgAAAAAAADwCAAAAAAAAAAAAADwCAAAAAAAAPQIAAAAAAAAAAAAAPQIAAAAAAAA+AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQIAAAAAAAA5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					1923,
					1,
					"insert",
					{
						"characters": "_data"
					},
					"BQAAAIQCAAAAAAAAhQIAAAAAAAAAAAAAhQIAAAAAAACGAgAAAAAAAAAAAACGAgAAAAAAAIcCAAAAAAAAAAAAAIcCAAAAAAAAiAIAAAAAAAAAAAAAiAIAAAAAAACJAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAIAAAAAAACEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1946,
					1,
					"paste",
					null,
					"AgAAAEEFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABNBQAAAAAAAAcAAABpZGxlX2Iz",
					"AQAAAAAAAAABAAAAQQUAAAAAAABIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1950,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n    tick = b3.Tick:new()\n\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 71
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAtAYAAAAAAAC0BgAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgoKCiAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGxvY2FsIGR1bXAgPSBiZWhhdmlvcnRyZWU6ZHVtcCgpCiAgICBsb2NhbCB3b3JsZEJsYWNrYm9hcmQgPSBiMy5CbGFja0JvYXJkOm5ldygpCiAgICBsb2NhbCBhZ2VudEJsYWNrYm9hcmQgPSBiMy5CbGFja0JvYXJkOm5ldygpCgogICAgd29ybGRCbGFja2JvYXJkOnNldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJywgOTk5KQogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKCiAgICB0aWNrLmFnZW50ID0gYWdlbnRCbGFja2JvYXJkCiAgICB0aWNrLndvcmxkQmxhY2tib2FyZCA9IHdvcmxkQmxhY2tib2FyZAoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKICAgIC0tICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgYmVoYXZpb3J0cmVlOnNldF90cmVlKGlkbGVfYjNfZGF0YSkKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKZW5kCgpmdW5jdGlvbiB1cGRhdGUoc2VsZiwgZHQpCiAgICAtLVtbICBpZiBzdGF0ZSB+PSAxIHRoZW4KICAgICAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBlbmQKICAgIGlmIHN0YXRlID09IDEgdGhlbgogICAgICAgIHByaW50KCJzdGF0ZTogIiwgc3RhdGUpCiAgICBlbmRdXQplbmQK",
					"AQAAAAAAAAABAAAAcgUAAAAAAAByBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1960,
					1,
					"cut",
					null,
					"AQAAAC4DAAAAAAAALgMAAAAAAABcAAAAIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCk",
					"AQAAAAAAAAABAAAALgMAAAAAAACKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1963,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAL4CAAAAAAAAvwIAAAAAAAAAAAAAvwIAAAAAAADAAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgIAAAAAAAC+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					1964,
					1,
					"reindent",
					null,
					"AQAAAMACAAAAAAAAxAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAIAAAAAAADAAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1965,
					1,
					"paste",
					null,
					"AQAAAMQCAAAAAAAAIAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAIAAAAAAADEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1966,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACADAAAAAAAAIQMAAAAAAAAAAAAAIQMAAAAAAAAlAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1968,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n\n\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n\n    worldBlackboard:set('test_blackboard_value', 999)\n    tick = b3.Tick:new()\n\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 74
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAtwYAAAAAAAC/BgAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIAoKCgogICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQogICAKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCiAgICB0aWNrID0gYjMuVGljazpuZXcoKQoKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCgogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUoaWRsZV9iM19kYXRhKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAAJQMAAAAAAAAlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1971,
					1,
					"cut",
					null,
					"AQAAAMgDAAAAAAAAyAMAAAAAAABiAAAAIHRpY2sgPSBiMy5UaWNrOm5ldygpCgogICAgdGljay5hZ2VudCA9IGFnZW50QmxhY2tib2FyZAogICAgdGljay53b3JsZEJsYWNrYm9hcmQgPSB3b3JsZEJsYWNrYm9hcmQ",
					"AQAAAAAAAAABAAAAyAMAAAAAAAAqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1974,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB8DAAAAAAAAIAMAAAAAAAAAAAAAIAMAAAAAAAAkAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwMAAAAAAAAfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1975,
					1,
					"paste",
					null,
					"AQAAACQDAAAAAAAAhgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAMAAAAAAAAkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1977,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n    tick = b3.Tick:new()\n\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n\n\n\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 75
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAuAYAAAAAAAC8BgAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgIHRpY2sgPSBiMy5UaWNrOm5ldygpCgogICAgdGljay5hZ2VudCA9IGFnZW50QmxhY2tib2FyZAogICAgdGljay53b3JsZEJsYWNrYm9hcmQgPSB3b3JsZEJsYWNrYm9hcmQKCgoKCiAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGxvY2FsIGR1bXAgPSBiZWhhdmlvcnRyZWU6ZHVtcCgpCgoKICAgIHdvcmxkQmxhY2tib2FyZDpzZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScsIDk5OSkKICAgCgogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUoaWRsZV9iM19kYXRhKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAAhgMAAAAAAACGAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1984,
					1,
					"left_delete",
					null,
					"AQAAADgDAAAAAAAAOAMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAOQMAAAAAAAA5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1987,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB8DAAAAAAAAIAMAAAAAAAAAAAAAIAMAAAAAAAAkAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwMAAAAAAAAfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2003,
					1,
					"reindent",
					null,
					"AQAAAIsDAAAAAAAAjwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwMAAAAAAACLAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2004,
					1,
					"paste",
					null,
					"AQAAAI8DAAAAAAAAzwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwMAAAAAAACPAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2011,
					1,
					"insert",
					{
						"characters": "move_b"
					},
					"CAAAAJADAAAAAAAAkQMAAAAAAAAAAAAAkQMAAAAAAACRAwAAAAAAAAwAAABiZWhhdmlvcnRyZWUgAwAAAAAAACADAAAAAAAABAAAACAgICCNAwAAAAAAAI4DAAAAAAAAAAAAAI4DAAAAAAAAjwMAAAAAAAAAAAAAjwMAAAAAAACQAwAAAAAAAAAAAACQAwAAAAAAAJEDAAAAAAAAAAAAAJEDAAAAAAAAkgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAMAAAAAAACcAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2012,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAJIDAAAAAAAAkwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgMAAAAAAACSAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2019,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMYDAAAAAAAAxwMAAAAAAAAAAAAAxwMAAAAAAADMAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgMAAAAAAADGAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2020,
					1,
					"paste",
					null,
					"AQAAAMwDAAAAAAAABgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAMAAAAAAADMAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2025,
					1,
					"insert",
					{
						"characters": "idle"
					},
					"BQAAAMwDAAAAAAAAzQMAAAAAAAAAAAAAzQMAAAAAAADNAwAAAAAAAAQAAABtb3ZlzQMAAAAAAADOAwAAAAAAAAAAAADOAwAAAAAAAM8DAAAAAAAAAAAAAM8DAAAAAAAA0AMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAMAAAAAAADQAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2048,
					1,
					"paste",
					null,
					"AgAAAN0DAAAAAAAA7wMAAAAAAAAAAAAA7wMAAAAAAADvAwAAAAAAABIAAABtb3ZlX2IzX2RhdGFfdGFibGU",
					"AQAAAAAAAAABAAAA3QMAAAAAAADvAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2052,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 76
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAANQcAAAAAAAA3BwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgIHRpY2sgPSBiMy5UaWNrOm5ldygpCiAgICB0aWNrLmFnZW50ID0gYWdlbnRCbGFja2JvYXJkCiAgICB0aWNrLndvcmxkQmxhY2tib2FyZCA9IHdvcmxkQmxhY2tib2FyZAoKICAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICAgaWRsZV9iMyA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQoKCiAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGxvY2FsIGR1bXAgPSBiZWhhdmlvcnRyZWU6ZHVtcCgpCgoKICAgIHdvcmxkQmxhY2tib2FyZDpzZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScsIDk5OSkKCgogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUoaWRsZV9iM19kYXRhKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAAxgMAAAAAAADGAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2068,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAIMGAAAAAAAAhQYAAAAAAAAAAAAABgQAAAAAAAAKBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgQAAAAAAACDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2073,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    --[[\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))]]\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 76
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAPwcAAAAAAAA7BwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgIHRpY2sgPSBiMy5UaWNrOm5ldygpCiAgICB0aWNrLmFnZW50ID0gYWdlbnRCbGFja2JvYXJkCiAgICB0aWNrLndvcmxkQmxhY2tib2FyZCA9IHdvcmxkQmxhY2tib2FyZAoKICAgIG1vdmVfYjMgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGlkbGVfYjMgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKCi0tW1sKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgbG9jYWwgZHVtcCA9IGJlaGF2aW9ydHJlZTpkdW1wKCkKCgogICAgd29ybGRCbGFja2JvYXJkOnNldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJywgOTk5KQoKCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKCiAgICAtLSAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGJlaGF2aW9ydHJlZTpzZXRfdHJlZShpZGxlX2IzX2RhdGEpCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCgogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpXV0KZW5kCgpmdW5jdGlvbiB1cGRhdGUoc2VsZiwgZHQpCiAgICAtLVtbICBpZiBzdGF0ZSB+PSAxIHRoZW4KICAgICAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBlbmQKICAgIGlmIHN0YXRlID09IDEgdGhlbgogICAgICAgIHByaW50KCJzdGF0ZTogIiwgc3RhdGUpCiAgICBlbmRdXQplbmQK",
					"AQAAAAAAAAABAAAABQQAAAAAAAAFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2078,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAUEAAAAAAAABgQAAAAAAAAAAAAABgQAAAAAAAAHBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQQAAAAAAAAFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2087,
					1,
					"cut",
					null,
					"AQAAAAkEAAAAAAAACQQAAAAAAAAHAAAAICAgLS1bWw",
					"AQAAAAAAAAABAAAAEAQAAAAAAAAJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2090,
					1,
					"left_delete",
					null,
					"AQAAAIYGAAAAAAAAhgYAAAAAAAACAAAAXV0",
					"AQAAAAAAAAABAAAAhgYAAAAAAACIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2097,
					1,
					"left_delete",
					null,
					"AQAAAHMEAAAAAAAAcwQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					2103,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAB8DAAAAAAAAIAMAAAAAAAAAAAAAIAMAAAAAAAAkAwAAAAAAAAAAAAAkAwAAAAAAACUDAAAAAAAAAAAAACUDAAAAAAAAKQMAAAAAAAAAAAAAIAMAAAAAAAAgAwAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAHwMAAAAAAAAfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2104,
					1,
					"paste",
					null,
					"AQAAACUDAAAAAAAAVwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQMAAAAAAAAlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2106,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n\n\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 79
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAbQcAAAAAAABvBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCgogICAgbW92ZV9iMyA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgaWRsZV9iMyA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQoKCgogCiAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGxvY2FsIGR1bXAgPSBiZWhhdmlvcnRyZWU6ZHVtcCgpCgogICAgd29ybGRCbGFja2JvYXJkOnNldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJywgOTk5KQoKCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKCiAgICAtLSAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGJlaGF2aW9ydHJlZTpzZXRfdHJlZShpZGxlX2IzX2RhdGEpCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCgogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCmVuZAoKZnVuY3Rpb24gdXBkYXRlKHNlbGYsIGR0KQogICAgLS1bWyAgaWYgc3RhdGUgfj0gMSB0aGVuCiAgICAgICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgZW5kCiAgICBpZiBzdGF0ZSA9PSAxIHRoZW4KICAgICAgICBwcmludCgic3RhdGU6ICIsIHN0YXRlKQogICAgZW5kXV0KZW5kCg",
					"AQAAAAAAAAABAAAAVwMAAAAAAABXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2109,
					1,
					"cut",
					null,
					"AQAAAK4EAAAAAAAArgQAAAAAAAAxAAAAd29ybGRCbGFja2JvYXJkOnNldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJywgOTk5KQ",
					"AQAAAAAAAAABAAAArgQAAAAAAADfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2115,
					1,
					"reindent",
					null,
					"AQAAAD0EAAAAAAAAQQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQQAAAAAAAA9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					2116,
					1,
					"paste",
					null,
					"AQAAAEEEAAAAAAAAYAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQQAAAAAAABBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2126,
					1,
					"paste",
					null,
					"AgAAAEkEAAAAAAAAUAQAAAAAAAAAAAAAUAQAAAAAAABQBAAAAAAAAAwAAABiZWhhdmlvcnRyZWU",
					"AQAAAAAAAAABAAAASQQAAAAAAABVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2139,
					1,
					"paste",
					null,
					"AQAAAFwEAAAAAAAAeAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAQAAAAAAABcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2151,
					1,
					"paste",
					null,
					"AgAAAGYEAAAAAAAAbQQAAAAAAAAAAAAAbQQAAAAAAABtBAAAAAAAAAcAAABtb3ZlX2Iz",
					"AQAAAAAAAAABAAAAZgQAAAAAAABtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2155,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n\n\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 79
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAdAcAAAAAAAB2BwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgIHdvcmxkQmxhY2tib2FyZDpzZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScsIDk5OSkKCiAgICB0aWNrID0gYjMuVGljazpuZXcoKQogICAgdGljay5hZ2VudCA9IGFnZW50QmxhY2tib2FyZAogICAgdGljay53b3JsZEJsYWNrYm9hcmQgPSB3b3JsZEJsYWNrYm9hcmQKCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICBzdGF0ZSA9IGlkbGVfYjM6dGljayh0aWNrKQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgbG9jYWwgZHVtcCA9IGJlaGF2aW9ydHJlZTpkdW1wKCkKCiAgICAKCgogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUoaWRsZV9iM19kYXRhKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					2164,
					1,
					"left_delete",
					null,
					"AQAAAOUEAAAAAAAA5QQAAAAAAAADAAAACgoK",
					"AQAAAAAAAAABAAAA6AQAAAAAAADlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2167,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHsEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAAB9BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewQAAAAAAAB7BAAAAAAAAAAAAAAAAPC/"
				],
				[
					2206,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAHwEAAAAAAAAfgQAAAAAAAAAAAAAvQMAAAAAAADBAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAQAAAAAAAC9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					2211,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 78
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAfQcAAAAAAAB5BwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgIHdvcmxkQmxhY2tib2FyZDpzZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScsIDk5OSkKCiAgICB0aWNrID0gYjMuVGljazpuZXcoKQogICAgdGljay5hZ2VudCA9IGFnZW50QmxhY2tib2FyZAogICAgdGljay53b3JsZEJsYWNrYm9hcmQgPSB3b3JsZEJsYWNrYm9hcmQKLS1bWwogICAgbW92ZV9iMyA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgaWRsZV9iMyA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQoKICAgIHN0YXRlID0gbW92ZV9iMzp0aWNrKHRpY2spCiAgICBzdGF0ZSA9IGlkbGVfYjM6dGljayh0aWNrKQoKXV0KCiAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGxvY2FsIGR1bXAgPSBiZWhhdmlvcnRyZWU6ZHVtcCgpCgogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUoaWRsZV9iM19kYXRhKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAAagMAAAAAAABqAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2233,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAMsGAAAAAAAAzAYAAAAAAAAAAAAAzAYAAAAAAADQBgAAAAAAAAAAAADQBgAAAAAAANEGAAAAAAAAAAAAANEGAAAAAAAA1QYAAAAAAAAAAAAAzAYAAAAAAADMBgAAAAAAAAQAAAAgICAg0QYAAAAAAADSBgAAAAAAAAAAAADSBgAAAAAAANYGAAAAAAAAAAAAAM0GAAAAAAAAzQYAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAywYAAAAAAADLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2236,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAAGsFAAAAAAAAbAUAAAAAAAAAAAAAzwYAAAAAAADPBgAAAAAAAAQAAAAgICAgbAUAAAAAAABtBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawUAAAAAAABrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2239,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAM8GAAAAAAAA0QYAAAAAAAAAAAAAbAUAAAAAAABwBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAUAAAAAAADPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2242,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    --[[\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n]]\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 83
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAiwcAAAAAAACIBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgIHdvcmxkQmxhY2tib2FyZDpzZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScsIDk5OSkKCiAgICB0aWNrID0gYjMuVGljazpuZXcoKQogICAgdGljay5hZ2VudCA9IGFnZW50QmxhY2tib2FyZAogICAgdGljay53b3JsZEJsYWNrYm9hcmQgPSB3b3JsZEJsYWNrYm9hcmQKICAgIC0tW1sKICAgIG1vdmVfYjMgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGlkbGVfYjMgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKCiAgICBzdGF0ZSA9IG1vdmVfYjM6dGljayh0aWNrKQogICAgc3RhdGUgPSBpZGxlX2IzOnRpY2sodGljaykKCl1dCgogICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgotLVtbCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKICAgIC0tICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgYmVoYXZpb3J0cmVlOnNldF90cmVlKGlkbGVfYjNfZGF0YSkKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKCl1dCgplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAAcAUAAAAAAABwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2245,
					1,
					"cut",
					null,
					"AQAAAGwFAAAAAAAAbAUAAAAAAAAIAAAAICAgIC0tW1s",
					"AQAAAAAAAAABAAAAdAUAAAAAAABsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2248,
					1,
					"cut",
					null,
					"AQAAAM8GAAAAAAAAzwYAAAAAAAACAAAAXV0",
					"AQAAAAAAAAABAAAA0QYAAAAAAADPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2250,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 82
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAfwcAAAAAAACBBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgIHdvcmxkQmxhY2tib2FyZDpzZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScsIDk5OSkKCiAgICB0aWNrID0gYjMuVGljazpuZXcoKQogICAgdGljay5hZ2VudCA9IGFnZW50QmxhY2tib2FyZAogICAgdGljay53b3JsZEJsYWNrYm9hcmQgPSB3b3JsZEJsYWNrYm9hcmQKICAgIC0tW1sKICAgIG1vdmVfYjMgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGlkbGVfYjMgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKCiAgICBzdGF0ZSA9IG1vdmVfYjM6dGljayh0aWNrKQogICAgc3RhdGUgPSBpZGxlX2IzOnRpY2sodGljaykKCl1dCgogICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgoKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUoaWRsZV9iM19kYXRhKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKCmVuZAoKZnVuY3Rpb24gdXBkYXRlKHNlbGYsIGR0KQogICAgLS1bWyAgaWYgc3RhdGUgfj0gMSB0aGVuCiAgICAgICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgZW5kCiAgICBpZiBzdGF0ZSA9PSAxIHRoZW4KICAgICAgICBwcmludCgic3RhdGU6ICIsIHN0YXRlKQogICAgZW5kXV0KZW5kCg",
					"AQAAAAAAAAABAAAAzwYAAAAAAADPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2300,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 80
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAfwcAAAAAAAB/BwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgIHdvcmxkQmxhY2tib2FyZDpzZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScsIDk5OSkKCiAgICB0aWNrID0gYjMuVGljazpuZXcoKQogICAgdGljay5hZ2VudCA9IGFnZW50QmxhY2tib2FyZAogICAgdGljay53b3JsZEJsYWNrYm9hcmQgPSB3b3JsZEJsYWNrYm9hcmQKICAgIC0tW1sKICAgIG1vdmVfYjMgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGlkbGVfYjMgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKCiAgICBzdGF0ZSA9IG1vdmVfYjM6dGljayh0aWNrKQogICAgc3RhdGUgPSBpZGxlX2IzOnRpY2sodGljaykKCl1dCgogICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgoKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUoaWRsZV9iM19kYXRhKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAAvwIAAAAAAADNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2308,
					1,
					"reindent",
					null,
					"AQAAAJsBAAAAAAAAnwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2309,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJ8BAAAAAAAAoAEAAAAAAAAAAAAAoAEAAAAAAACkAQAAAAAAAAAAAACbAQAAAAAAAJsBAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAAnwEAAAAAAACfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2311,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AgAAAJsBAAAAAAAAnAEAAAAAAAAAAAAAnQEAAAAAAACdAQAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAEJA"
				],
				[
					2312,
					1,
					"insert",
					{
						"characters": "ocal"
					},
					"BAAAAJwBAAAAAAAAnQEAAAAAAAAAAAAAnQEAAAAAAACeAQAAAAAAAAAAAACeAQAAAAAAAJ8BAAAAAAAAAAAAAJ8BAAAAAAAAoAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2313,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKABAAAAAAAAoQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAEAAAAAAACgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2320,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAAKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAACjAQAAAAAAAKQBAAAAAAAAAAAAAKQBAAAAAAAApQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQEAAAAAAAChAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2321,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "data_table"
					},
					"AgAAAKEBAAAAAAAAoQEAAAAAAAAEAAAAZGF0YaEBAAAAAAAAqwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2322,
					10,
					"left_delete",
					null,
					"CgAAAKoBAAAAAAAAqgEAAAAAAAABAAAAZakBAAAAAAAAqQEAAAAAAAABAAAAbKgBAAAAAAAAqAEAAAAAAAABAAAAYqcBAAAAAAAApwEAAAAAAAABAAAAYaYBAAAAAAAApgEAAAAAAAABAAAAdKUBAAAAAAAApQEAAAAAAAABAAAAX6QBAAAAAAAApAEAAAAAAAABAAAAYaMBAAAAAAAAowEAAAAAAAABAAAAdKIBAAAAAAAAogEAAAAAAAABAAAAYaEBAAAAAAAAoQEAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAqwEAAAAAAACrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2323,
					1,
					"insert",
					{
						"characters": "prp"
					},
					"AwAAAKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAACjAQAAAAAAAKQBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQEAAAAAAAChAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2324,
					1,
					"left_delete",
					null,
					"AQAAAKMBAAAAAAAAowEAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAApAEAAAAAAACkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2325,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAKMBAAAAAAAApAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowEAAAAAAACjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2326,
					1,
					"left_delete",
					null,
					"AQAAAKMBAAAAAAAAowEAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAApAEAAAAAAACkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2327,
					1,
					"insert",
					{
						"characters": "oject"
					},
					"BQAAAKMBAAAAAAAApAEAAAAAAAAAAAAApAEAAAAAAAClAQAAAAAAAAAAAAClAQAAAAAAAKYBAAAAAAAAAAAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACoAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowEAAAAAAACjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2328,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgBAAAAAAAAqQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAEAAAAAAACoAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2329,
					1,
					"left_delete",
					null,
					"AQAAAKgBAAAAAAAAqAEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAqQEAAAAAAACpAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2330,
					1,
					"insert",
					{
						"characters": "_data"
					},
					"BQAAAKgBAAAAAAAAqQEAAAAAAAAAAAAAqQEAAAAAAACqAQAAAAAAAAAAAACqAQAAAAAAAKsBAAAAAAAAAAAAAKsBAAAAAAAArAEAAAAAAAAAAAAArAEAAAAAAACtAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAEAAAAAAACoAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2331,
					1,
					"insert",
					{
						"characters": "_table"
					},
					"BgAAAK0BAAAAAAAArgEAAAAAAAAAAAAArgEAAAAAAACvAQAAAAAAAAAAAACvAQAAAAAAALABAAAAAAAAAAAAALABAAAAAAAAsQEAAAAAAAAAAAAAsQEAAAAAAACyAQAAAAAAAAAAAACyAQAAAAAAALMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2332,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAALMBAAAAAAAAtAEAAAAAAAAAAAAAtAEAAAAAAAC1AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2333,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALUBAAAAAAAAtgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					2336,
					1,
					"insert",
					{
						"characters": "b3:"
					},
					"AwAAALYBAAAAAAAAtwEAAAAAAAAAAAAAtwEAAAAAAAC4AQAAAAAAAAAAAAC4AQAAAAAAALkBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgEAAAAAAAC2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					2341,
					1,
					"insert",
					{
						"characters": "parse_"
					},
					"BgAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAC7AQAAAAAAALwBAAAAAAAAAAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAC+AQAAAAAAAL8BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQEAAAAAAAC5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					2342,
					1,
					"insert",
					{
						"characters": "project"
					},
					"BwAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADBAQAAAAAAAAAAAADBAQAAAAAAAMIBAAAAAAAAAAAAAMIBAAAAAAAAwwEAAAAAAAAAAAAAwwEAAAAAAADEAQAAAAAAAAAAAADEAQAAAAAAAMUBAAAAAAAAAAAAAMUBAAAAAAAAxgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwEAAAAAAAC/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					2343,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMYBAAAAAAAAyAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgEAAAAAAADGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2351,
					1,
					"paste",
					null,
					"AQAAAMcBAAAAAAAA0QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwEAAAAAAADHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2363,
					1,
					"paste",
					null,
					"AQAAANEBAAAAAAAA4QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QEAAAAAAADRAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2367,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 81
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAywcAAAAAAADHBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKbG9jYWwgcHJvamVjdF9kYXRhX3RhYmxlID0gYjM6cGFyc2VfcHJvamVjdChkYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzFdCiAgICBsb2NhbCBpZGxlX2IzX2RhdGFfdGFibGUgPSBkYXRhX3RhYmxlWyd0cmVlcyddWzJdCgoKICAgIC0tICBwcHJpbnQobW92ZV9iM190YWJsZSkKICAgIGxvY2FsIG1vdmVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKICAgIGxvY2FsIGlkbGVfYjNfZGF0YSA9IGIzOnBhcnNlX3RyZWUoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCkKCgogICAgbG9jYWwgd29ybGRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQogICAgbG9jYWwgYWdlbnRCbGFja2JvYXJkID0gYjMuQmxhY2tCb2FyZDpuZXcoKQoKICAgIHdvcmxkQmxhY2tib2FyZDpzZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScsIDk5OSkKCiAgICB0aWNrID0gYjMuVGljazpuZXcoKQogICAgdGljay5hZ2VudCA9IGFnZW50QmxhY2tib2FyZAogICAgdGljay53b3JsZEJsYWNrYm9hcmQgPSB3b3JsZEJsYWNrYm9hcmQKICAgIC0tW1sKICAgIG1vdmVfYjMgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGlkbGVfYjMgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKCiAgICBzdGF0ZSA9IG1vdmVfYjM6dGljayh0aWNrKQogICAgc3RhdGUgPSBpZGxlX2IzOnRpY2sodGljaykKCl1dCgogICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgoKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUoaWRsZV9iM19kYXRhKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAA4wEAAAAAAADjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2388,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 81
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAywcAAAAAAADLBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgbG9jYWwgZHVtcCA9IGJlaGF2aW9ydHJlZTpkdW1wKCkKCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKICAgIC0tICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgYmVoYXZpb3J0cmVlOnNldF90cmVlKGlkbGVfYjNfZGF0YSkKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKZW5kCgpmdW5jdGlvbiB1cGRhdGUoc2VsZiwgZHQpCiAgICAtLVtbICBpZiBzdGF0ZSB+PSAxIHRoZW4KICAgICAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBlbmQKICAgIGlmIHN0YXRlID09IDEgdGhlbgogICAgICAgIHByaW50KCJzdGF0ZTogIiwgc3RhdGUpCiAgICBlbmRdXQplbmQK",
					"AQAAAAAAAAABAAAA4QEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2396,
					1,
					"insert",
					{
						"characters": "\npp"
					},
					"BAAAAOYBAAAAAAAA5wEAAAAAAAAAAAAA5wEAAAAAAADrAQAAAAAAAAAAAADrAQAAAAAAAOwBAAAAAAAAAAAAAOwBAAAAAAAA7QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gEAAAAAAADmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2397,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":6,\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pprint(...)"
					},
					"AgAAAOsBAAAAAAAA6wEAAAAAAAACAAAAcHDrAQAAAAAAAPEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QEAAAAAAADtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2398,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPEBAAAAAAAA8wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QEAAAAAAADxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2399,
					1,
					"paste",
					null,
					"AQAAAPIBAAAAAAAABAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gEAAAAAAADyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2401,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table)\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 82
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA6gcAAAAAAADqBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlKQoKICAgIGxvY2FsIG1vdmVfYjNfZGF0YV90YWJsZSA9IGRhdGFfdGFibGVbJ3RyZWVzJ11bMV0KICAgIGxvY2FsIGlkbGVfYjNfZGF0YV90YWJsZSA9IGRhdGFfdGFibGVbJ3RyZWVzJ11bMl0KCgogICAgLS0gIHBwcmludChtb3ZlX2IzX3RhYmxlKQogICAgbG9jYWwgbW92ZV9iM19kYXRhID0gYjM6cGFyc2VfdHJlZShtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0KQogICAgbG9jYWwgaWRsZV9iM19kYXRhID0gYjM6cGFyc2VfdHJlZShpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0KQoKCiAgICBsb2NhbCB3b3JsZEJsYWNrYm9hcmQgPSBiMy5CbGFja0JvYXJkOm5ldygpCiAgICBsb2NhbCBhZ2VudEJsYWNrYm9hcmQgPSBiMy5CbGFja0JvYXJkOm5ldygpCgogICAgd29ybGRCbGFja2JvYXJkOnNldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJywgOTk5KQoKICAgIHRpY2sgPSBiMy5UaWNrOm5ldygpCiAgICB0aWNrLmFnZW50ID0gYWdlbnRCbGFja2JvYXJkCiAgICB0aWNrLndvcmxkQmxhY2tib2FyZCA9IHdvcmxkQmxhY2tib2FyZAogICAgLS1bWwogICAgbW92ZV9iMyA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgaWRsZV9iMyA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQoKICAgIHN0YXRlID0gbW92ZV9iMzp0aWNrKHRpY2spCiAgICBzdGF0ZSA9IGlkbGVfYjM6dGljayh0aWNrKQoKXV0KCiAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGxvY2FsIGR1bXAgPSBiZWhhdmlvcnRyZWU6ZHVtcCgpCgogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCgoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKCiAgICAtLSAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGJlaGF2aW9ydHJlZTpzZXRfdHJlZShpZGxlX2IzX2RhdGEpCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCgogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCmVuZAoKZnVuY3Rpb24gdXBkYXRlKHNlbGYsIGR0KQogICAgLS1bWyAgaWYgc3RhdGUgfj0gMSB0aGVuCiAgICAgICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgZW5kCiAgICBpZiBzdGF0ZSA9PSAxIHRoZW4KICAgICAgICBwcmludCgic3RhdGU6ICIsIHN0YXRlKQogICAgZW5kXV0KZW5kCg",
					"AQAAAAAAAAABAAAABAIAAAAAAAAEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					2408,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAQCAAAAAAAABgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAIAAAAAAAAEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					2409,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAUCAAAAAAAABwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQIAAAAAAAAFAgAAAAAAAAAAAAAAAPC/"
				],
				[
					2410,
					1,
					"insert",
					{
						"characters": "move"
					},
					"BAAAAAYCAAAAAAAABwIAAAAAAAAAAAAABwIAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAkCAAAAAAAAAAAAAAkCAAAAAAAACgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgIAAAAAAAAGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					2412,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['move'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 82
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA8gcAAAAAAADyBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydtb3ZlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgbG9jYWwgZHVtcCA9IGJlaGF2aW9ydHJlZTpkdW1wKCkKCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKICAgIC0tICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgYmVoYXZpb3J0cmVlOnNldF90cmVlKGlkbGVfYjNfZGF0YSkKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKZW5kCgpmdW5jdGlvbiB1cGRhdGUoc2VsZiwgZHQpCiAgICAtLVtbICBpZiBzdGF0ZSB+PSAxIHRoZW4KICAgICAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBlbmQKICAgIGlmIHN0YXRlID09IDEgdGhlbgogICAgICAgIHByaW50KCJzdGF0ZTogIiwgc3RhdGUpCiAgICBlbmRdXQplbmQK",
					"AQAAAAAAAAABAAAACgIAAAAAAAAKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					2425,
					1,
					"insert",
					{
						"characters": "idle"
					},
					"BQAAAAYCAAAAAAAABwIAAAAAAAAAAAAABwIAAAAAAAAHAgAAAAAAAAQAAABtb3ZlBwIAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAkCAAAAAAAAAAAAAAkCAAAAAAAACgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgIAAAAAAAAKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					2430,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['idle'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(idle_b3_data)\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 82
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA8gcAAAAAAADyBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgbG9jYWwgZHVtcCA9IGJlaGF2aW9ydHJlZTpkdW1wKCkKCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKICAgIC0tICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgYmVoYXZpb3J0cmVlOnNldF90cmVlKGlkbGVfYjNfZGF0YSkKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKZW5kCgpmdW5jdGlvbiB1cGRhdGUoc2VsZiwgZHQpCiAgICAtLVtbICBpZiBzdGF0ZSB+PSAxIHRoZW4KICAgICAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBlbmQKICAgIGlmIHN0YXRlID09IDEgdGhlbgogICAgICAgIHByaW50KCJzdGF0ZTogIiwgc3RhdGUpCiAgICBlbmRdXQplbmQK",
					"AQAAAAAAAAABAAAA8gEAAAAAAAAMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					2441,
					1,
					"paste",
					null,
					"AgAAAH8GAAAAAAAAmQYAAAAAAAAAAAAAmQYAAAAAAACZBgAAAAAAAAwAAABpZGxlX2IzX2RhdGE",
					"AQAAAAAAAAABAAAAfwYAAAAAAACLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2443,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['idle'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(project_data_table['idle'])\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 82
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAAAgAAAAAAAAACAAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgbG9jYWwgZHVtcCA9IGJlaGF2aW9ydHJlZTpkdW1wKCkKCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKICAgIC0tICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgYmVoYXZpb3J0cmVlOnNldF90cmVlKHByb2plY3RfZGF0YV90YWJsZVsnaWRsZSddKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAAmQYAAAAAAACZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2447,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['idle'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(move_b3_data_table, customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(project_data_table['idle'])\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 82
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAAAgAAAAAAAAACAAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhtb3ZlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgbG9jYWwgZHVtcCA9IGJlaGF2aW9ydHJlZTpkdW1wKCkKCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQoKICAgIC0tICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhpZGxlX2IzX2RhdGFfdGFibGUsIGN1c3RvbU5vZGVMaXN0LCB0cnVlKQogICAgYmVoYXZpb3J0cmVlOnNldF90cmVlKHByb2plY3RfZGF0YV90YWJsZVsnaWRsZSddKQogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQoKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgogICAgcHByaW50KHdvcmxkQmxhY2tib2FyZDpnZXQoJ3Rlc3RfYmxhY2tib2FyZF92YWx1ZScpKQplbmQKCmZ1bmN0aW9uIHVwZGF0ZShzZWxmLCBkdCkKICAgIC0tW1sgIGlmIHN0YXRlIH49IDEgdGhlbgogICAgICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIGVuZAogICAgaWYgc3RhdGUgPT0gMSB0aGVuCiAgICAgICAgcHJpbnQoInN0YXRlOiAiLCBzdGF0ZSkKICAgIGVuZF1dCmVuZAo",
					"AQAAAAAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					2476,
					1,
					"paste",
					null,
					"AgAAABUFAAAAAAAALwUAAAAAAAAAAAAALwUAAAAAAAAvBQAAAAAAABIAAABtb3ZlX2IzX2RhdGFfdGFibGU",
					"AQAAAAAAAAABAAAAFQUAAAAAAAAnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2483,
					1,
					"insert",
					{
						"characters": "move"
					},
					"BQAAACkFAAAAAAAAKgUAAAAAAAAAAAAAKgUAAAAAAAAqBQAAAAAAAAQAAABpZGxlKgUAAAAAAAArBQAAAAAAAAAAAAArBQAAAAAAACwFAAAAAAAAAAAAACwFAAAAAAAALQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQUAAAAAAAAtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2485,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['idle'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(project_data_table['move'], customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(project_data_table['idle'])\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 82
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAACAgAAAAAAAAICAAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhwcm9qZWN0X2RhdGFfdGFibGVbJ21vdmUnXSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgoKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCgogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCmVuZAoKZnVuY3Rpb24gdXBkYXRlKHNlbGYsIGR0KQogICAgLS1bWyAgaWYgc3RhdGUgfj0gMSB0aGVuCiAgICAgICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgZW5kCiAgICBpZiBzdGF0ZSA9PSAxIHRoZW4KICAgICAgICBwcmludCgic3RhdGU6ICIsIHN0YXRlKQogICAgZW5kXV0KZW5kCg",
					"AQAAAAAAAAABAAAALQUAAAAAAAAtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2519,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    else\n        print(error)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['idle'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(project_data_table['move'], customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(project_data_table['idle'])\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 82
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAACAgAAAAAAAAICAAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoZXJyb3IpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhwcm9qZWN0X2RhdGFfdGFibGVbJ21vdmUnXSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgoKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCgogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCmVuZAoKZnVuY3Rpb24gdXBkYXRlKHNlbGYsIGR0KQogICAgLS1bWyAgaWYgc3RhdGUgfj0gMSB0aGVuCiAgICAgICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgZW5kCiAgICBpZiBzdGF0ZSA9PSAxIHRoZW4KICAgICAgICBwcmludCgic3RhdGU6ICIsIHN0YXRlKQogICAgZW5kXV0KZW5kCg",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2539,
					1,
					"cut",
					null,
					"AQAAACEBAAAAAAAAIQEAAAAAAAAaAAAAIGVsc2UKICAgICAgICBwcmludChlcnJvcik",
					"AQAAAAAAAAABAAAAIQEAAAAAAAA7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					2542,
					2,
					"left_delete",
					null,
					"AgAAAB4BAAAAAAAAHgEAAAAAAAADAAAAICAgHQEAAAAAAAAdAQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAIQEAAAAAAAAhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2587,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['idle'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(project_data_table['move'], customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(project_data_table['idle'])\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 80
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA6gcAAAAAAADqBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhwcm9qZWN0X2RhdGFfdGFibGVbJ21vdmUnXSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgoKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCgogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCmVuZAoKZnVuY3Rpb24gdXBkYXRlKHNlbGYsIGR0KQogICAgLS1bWyAgaWYgc3RhdGUgfj0gMSB0aGVuCiAgICAgICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgZW5kCiAgICBpZiBzdGF0ZSA9PSAxIHRoZW4KICAgICAgICBwcmludCgic3RhdGU6ICIsIHN0YXRlKQogICAgZW5kXV0KZW5kCg",
					"AQAAAAAAAAABAAAAYAMAAAAAAABgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2631,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['idle'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(project_data_table['move'], customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(project_data_table['idle'])\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 80
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA6gcAAAAAAADqBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAtLVtbCiAgICBtb3ZlX2IzID0gYjM6bmV3KG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBpZGxlX2IzID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCgogICAgc3RhdGUgPSBtb3ZlX2IzOnRpY2sodGljaykKICAgIHN0YXRlID0gaWRsZV9iMzp0aWNrKHRpY2spCgpdXQoKICAgIGJlaGF2aW9ydHJlZSA9IGIzOm5ldyhwcm9qZWN0X2RhdGFfdGFibGVbJ21vdmUnXSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBsb2NhbCBkdW1wID0gYmVoYXZpb3J0cmVlOmR1bXAoKQoKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKICAgIHByaW50KHN0YXRlKQogICAgaWYgc3RhdGUgPT0gY29uc3QuU1VDQ0VTUyB0aGVuCiAgICAgICAgcHJpbnQoJ1NVQ0NFU1MnKQogICAgZW5kCgoKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCgogICAgLS0gICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QsIHRydWUpCiAgICBiZWhhdmlvcnRyZWU6c2V0X3RyZWUocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCiAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCgogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCiAgICBwcHJpbnQod29ybGRCbGFja2JvYXJkOmdldCgndGVzdF9ibGFja2JvYXJkX3ZhbHVlJykpCmVuZAoKZnVuY3Rpb24gdXBkYXRlKHNlbGYsIGR0KQogICAgLS1bWyAgaWYgc3RhdGUgfj0gMSB0aGVuCiAgICAgICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgZW5kCiAgICBpZiBzdGF0ZSA9PSAxIHRoZW4KICAgICAgICBwcmludCgic3RhdGU6ICIsIHN0YXRlKQogICAgZW5kXV0KZW5kCg",
					"AQAAAAAAAAABAAAAAgQAAAAAAAARBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2641,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABEEAAAAAAAAEgQAAAAAAAAAAAAAEgQAAAAAAAAWBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQQAAAAAAAARBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2642,
					1,
					"paste",
					null,
					"AQAAABYEAAAAAAAAGgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgQAAAAAAAAWBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2643,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAABoEAAAAAAAAGwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgQAAAAAAAAaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2644,
					5,
					"left_delete",
					null,
					"BQAAABoEAAAAAAAAGgQAAAAAAAABAAAALhkEAAAAAAAAGQQAAAAAAAABAAAAaxgEAAAAAAAAGAQAAAAAAAABAAAAYxcEAAAAAAAAFwQAAAAAAAABAAAAaRYEAAAAAAAAFgQAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAGwQAAAAAAAAbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2646,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "local b3 = require(\"b3.b3\")\nlocal const = require(\"b3.const\")\n\n\nlocal behaviortree\nlocal tick\nlocal state = 0\nfunction init(self)\n    local data, error = sys.load_resource(\"/main/json/test_project.json\")\n    local data_table = {}\n    if data then\n        data_table = json.decode(data)\n    end\n\n    local customNodeList = {\n        test_action = require(\"main.test_action\")\n    }\n\n    local project_data_table = b3:parse_project(data_table, customNodeList)\n    pprint(project_data_table['idle'])\n\n    local move_b3_data_table = data_table['trees'][1]\n    local idle_b3_data_table = data_table['trees'][2]\n\n\n    --  pprint(move_b3_table)\n    local move_b3_data = b3:parse_tree(move_b3_data_table, customNodeList)\n    local idle_b3_data = b3:parse_tree(idle_b3_data_table, customNodeList)\n\n\n    local worldBlackboard = b3.BlackBoard:new()\n    local agentBlackboard = b3.BlackBoard:new()\n\n    worldBlackboard:set('test_blackboard_value', 999)\n\n    tick = b3.Tick:new()\n    tick.agent = agentBlackboard\n    tick.worldBlackboard = worldBlackboard\n\n    --[[\n    move_b3 = b3:new(move_b3_data_table, customNodeList, true)\n    idle_b3 = b3:new(idle_b3_data_table, customNodeList, true)\n\n    state = move_b3:tick(tick)\n    state = idle_b3:tick(tick)\n\n]]\n\n    behaviortree = b3:new(project_data_table['move'], customNodeList, true)\n    local dump = behaviortree:dump()\n\n    state = behaviortree:tick(tick)\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\n\n    --    behaviortree = b3:new(idle_b3_data_table, customNodeList, true)\n    behaviortree:set_tree(project_data_table['idle'])\n    state = behaviortree:tick(tick)\n\n    print(state)\n    if state == const.SUCCESS then\n        print('SUCCESS')\n    end\n\n    pprint(worldBlackboard:get('test_blackboard_value'))\nend\n\nfunction update(self, dt)\n    --[[  if state ~= 1 then\n        state = behaviortree:tick(tick)\n    end\n    if state == 1 then\n        print(\"state: \", state)\n    end]]\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 81
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA6wcAAAAAAADvBwAAbG9jYWwgYjMgPSByZXF1aXJlKCJiMy5iMyIpCmxvY2FsIGNvbnN0ID0gcmVxdWlyZSgiYjMuY29uc3QiKQoKCmxvY2FsIGJlaGF2aW9ydHJlZQpsb2NhbCB0aWNrCmxvY2FsIHN0YXRlID0gMApmdW5jdGlvbiBpbml0KHNlbGYpCiAgICBsb2NhbCBkYXRhLCBlcnJvciA9IHN5cy5sb2FkX3Jlc291cmNlKCIvbWFpbi9qc29uL3Rlc3RfcHJvamVjdC5qc29uIikKICAgIGxvY2FsIGRhdGFfdGFibGUgPSB7fQogICAgaWYgZGF0YSB0aGVuCiAgICAgICAgZGF0YV90YWJsZSA9IGpzb24uZGVjb2RlKGRhdGEpCiAgICBlbmQKCiAgICBsb2NhbCBjdXN0b21Ob2RlTGlzdCA9IHsKICAgICAgICB0ZXN0X2FjdGlvbiA9IHJlcXVpcmUoIm1haW4udGVzdF9hY3Rpb24iKQogICAgfQoKICAgIGxvY2FsIHByb2plY3RfZGF0YV90YWJsZSA9IGIzOnBhcnNlX3Byb2plY3QoZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBwcHJpbnQocHJvamVjdF9kYXRhX3RhYmxlWydpZGxlJ10pCgogICAgbG9jYWwgbW92ZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsxXQogICAgbG9jYWwgaWRsZV9iM19kYXRhX3RhYmxlID0gZGF0YV90YWJsZVsndHJlZXMnXVsyXQoKCiAgICAtLSAgcHByaW50KG1vdmVfYjNfdGFibGUpCiAgICBsb2NhbCBtb3ZlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKG1vdmVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCiAgICBsb2NhbCBpZGxlX2IzX2RhdGEgPSBiMzpwYXJzZV90cmVlKGlkbGVfYjNfZGF0YV90YWJsZSwgY3VzdG9tTm9kZUxpc3QpCgoKICAgIGxvY2FsIHdvcmxkQmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKICAgIGxvY2FsIGFnZW50QmxhY2tib2FyZCA9IGIzLkJsYWNrQm9hcmQ6bmV3KCkKCiAgICB3b3JsZEJsYWNrYm9hcmQ6c2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnLCA5OTkpCgogICAgdGljayA9IGIzLlRpY2s6bmV3KCkKICAgIHRpY2suYWdlbnQgPSBhZ2VudEJsYWNrYm9hcmQKICAgIHRpY2sud29ybGRCbGFja2JvYXJkID0gd29ybGRCbGFja2JvYXJkCiAgICAKICAgIC0tW1sKICAgIG1vdmVfYjMgPSBiMzpuZXcobW92ZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGlkbGVfYjMgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKCiAgICBzdGF0ZSA9IG1vdmVfYjM6dGljayh0aWNrKQogICAgc3RhdGUgPSBpZGxlX2IzOnRpY2sodGljaykKCl1dCgogICAgYmVoYXZpb3J0cmVlID0gYjM6bmV3KHByb2plY3RfZGF0YV90YWJsZVsnbW92ZSddLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGxvY2FsIGR1bXAgPSBiZWhhdmlvcnRyZWU6ZHVtcCgpCgogICAgc3RhdGUgPSBiZWhhdmlvcnRyZWU6dGljayh0aWNrKQogICAgcHJpbnQoc3RhdGUpCiAgICBpZiBzdGF0ZSA9PSBjb25zdC5TVUNDRVNTIHRoZW4KICAgICAgICBwcmludCgnU1VDQ0VTUycpCiAgICBlbmQKCgoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKCiAgICAtLSAgICBiZWhhdmlvcnRyZWUgPSBiMzpuZXcoaWRsZV9iM19kYXRhX3RhYmxlLCBjdXN0b21Ob2RlTGlzdCwgdHJ1ZSkKICAgIGJlaGF2aW9ydHJlZTpzZXRfdHJlZShwcm9qZWN0X2RhdGFfdGFibGVbJ2lkbGUnXSkKICAgIHN0YXRlID0gYmVoYXZpb3J0cmVlOnRpY2sodGljaykKCiAgICBwcmludChzdGF0ZSkKICAgIGlmIHN0YXRlID09IGNvbnN0LlNVQ0NFU1MgdGhlbgogICAgICAgIHByaW50KCdTVUNDRVNTJykKICAgIGVuZAoKICAgIHBwcmludCh3b3JsZEJsYWNrYm9hcmQ6Z2V0KCd0ZXN0X2JsYWNrYm9hcmRfdmFsdWUnKSkKZW5kCgpmdW5jdGlvbiB1cGRhdGUoc2VsZiwgZHQpCiAgICAtLVtbICBpZiBzdGF0ZSB+PSAxIHRoZW4KICAgICAgICBzdGF0ZSA9IGJlaGF2aW9ydHJlZTp0aWNrKHRpY2spCiAgICBlbmQKICAgIGlmIHN0YXRlID09IDEgdGhlbgogICAgICAgIHByaW50KCJzdGF0ZTogIiwgc3RhdGUpCiAgICBlbmRdXQplbmQK",
					"AQAAAAAAAAABAAAAFgQAAAAAAAAWBAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "b3/core/blackboard.lua",
			"settings":
			{
				"buffer_size": 1850,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "b3/core/tick.lua",
			"settings":
			{
				"buffer_size": 1095,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"i",
				"Package Control: Install Package"
			],
			[
				"tit",
				"Convert Case: Title Case"
			],
			[
				"lowe",
				"Convert Case: Lower Case"
			],
			[
				"ti",
				"Convert Case: Title Case"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"title",
				"Convert Case: Title Case"
			],
			[
				"tr",
				"Trim Trailing White Space"
			],
			[
				"upda",
				"Package Control: Upgrade All Packages"
			],
			[
				"case",
				"Convert Case: Title Case"
			],
			[
				"tra",
				"Trim Trailing White Space"
			],
			[
				"pa",
				"Package Control: Upgrade Package"
			],
			[
				"pac",
				"Package Control: Upgrade Package"
			],
			[
				"up",
				"Package Control: Upgrade Package"
			],
			[
				"Tit",
				"Convert Case: Title Case"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"lo",
				"Convert Case: Lower Case"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"t",
				"Convert Case: Title Case"
			],
			[
				"Title",
				"Convert Case: Title Case"
			],
			[
				"Title ",
				"Convert Case: Title Case"
			],
			[
				"",
				"Bookmarks: Select Next"
			],
			[
				"Snippet: ",
				"Snippet: Lorem ipsum"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
			"cd ..",
			"ls"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/actions",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/composites",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/decorators",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/main",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/main/json"
	],
	"file_history":
	[
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/decorators/repeater.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/middleclass.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/main/test_action.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/blackboard.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/main/json/test_project.json",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/composites/selector.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/composites/sequence.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/const.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/tick.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/b3.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/main/json/test_simple.json",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/composites/weight_selector.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/.gitignore",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/game.project",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/actions/succeeder.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/actions/failer.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/actions/error.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/actions/wait.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/actions/runner.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/composites/mem_selector.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/composites/mem_sequence.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/decorators/repeat_until_failure.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/decorators/repeat_until_success.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/decorators/limiter.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/decorators/max_time.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/decorators/inverter.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/action.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/composite.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/base_node.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/decorator.lua",
		"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/condition.lua",
		"/Users/selimanac/Documents/tarif.txt",
		"/Users/selimanac/Documents/HEMEN AL.txt",
		"/Users/selimanac/Documents/TUR LİSTESİ.txt",
		"/Users/selimanac/Development/defold/defold-extender/START-STOP-README.txt",
		"/Users/selimanac/Documents/Finansbank.txt",
		"/Users/selimanac/Documents/connectvpn.vodafone.txt",
		"/Users/selimanac/Development/defold/repo-case/tint-w/main/main.script",
		"/Users/selimanac/Development/defold/EXTENSIONS/defold-astar-examples/defold-astar example-hex-template/compile_commands.json",
		"/Users/selimanac/Development/defold/EXTENSIONS/defold-astar-examples/defold-astar example-hex-template/test.appmanifest",
		"/Users/selimanac/Development/defold/EXTENSIONS/defold-astar-examples/defold-astar example-hex-template/main/hex_even_r.script",
		"/Volumes/Work/Downloads/superheros-master 2/.defold_api/aabb.lua",
		"/Volumes/Work/Downloads/superheros-master 2/scripts/libs/pathfinder/hexagonal_patfinder_alt.lua",
		"/Volumes/Work/Downloads/slasher-prototype-master/",
		"/Users/selimanac/Development/defold/LookAtMouse/main/main.script",
		"/Users/selimanac/Development/defold/LookAtMouse/main/tiled_import.lua",
		"/Users/selimanac/Development/defold/Dungeon/main/dungen.lua",
		"/Users/selimanac/Development/defold/Side scroller tutorial/main/main.script",
		"/Volumes/Work/Downloads/defold-examples-master/alien-world/main/main.script",
		"/Volumes/Work/Downloads/defold-examples-master/alien-world/player/camera.script",
		"/Users/selimanac/Development/defold/bsp/test1/Desktop game/main/main.script",
		"/Users/selimanac/Development/defold/LookAtMouse/main/rendercam-main.script",
		"/Volumes/Work/Downloads/defold-orbit-camera-main/orbit-cam/orbit.script",
		"/Volumes/Work/Downloads/defold-orbit-camera-main/main/main.script",
		"/Applications/MAMP/bin/php/php8.2.0/conf/php.ini",
		"/Applications/MAMP/conf/php8.2.0/php.ini",
		"/Users/selimanac/Development/www/tokyo-booking/colorsalone-cron-dns.txt",
		"/Users/selimanac/Library/Application Support/Sublime Merge/Packages/User/Preferences.sublime-settings",
		"/Users/selimanac/Development/www/van-eck-trailers/van-eck-website/.htaccess",
		"/Users/selimanac/Development/www/van-eck-trailers/backup/.htaccess",
		"/Users/selimanac/Documents/ixir-host/tokyo-ixir-host.md",
		"/etc/hosts",
		"/Volumes/Work/Design/tvv/mailling/dogum-gunu/yavuz_canevi.html",
		"/Users/selimanac/SDK/defold-localextender/start-stop.txt",
		"/Users/selimanac/Desktop/connectvpn.vodafone.txt",
		"/Users/selimanac/Documents/mastodon.txt",
		"/Users/selimanac/Documents/GOG.md",
		"/Users/selimanac/Development/www/GoG/gog_web/public/.htaccess",
		"/Users/selimanac/Development/www/GoG/gog_web/sass/package.json",
		"/Users/selimanac/Development/www/GoG/gog_web/public/goblet_cms/robot.txt",
		"/Users/selimanac/SDK/defold-localextender/stop.sh",
		"/Users/selimanac/Documents/yaratim-com.txt",
		"/Users/selimanac/Desktop/vaneck-form-submit.txt",
		"/Users/selimanac/Documents/Tokyo-Fatura.txt",
		"/Users/selimanac/Desktop/dollar",
		"/Users/selimanac/Development/www/van-eck-trailers/van-eck-website/wp-content/plugins/vaneck-contact-form/views/tco-calculator-message-sent.view.php",
		"/Users/selimanac/Development/www/test/test.php",
		"/Users/selimanac/Development/www/van-eck-trailers/van-eck-website/wp-content/themes/vaneck/layouts-tco.php",
		"/Users/selimanac/Development/www/van-eck-trailers/van-eck-website/wp-content/themes/vaneck/layouts-tco-result-form.php",
		"/Users/selimanac/Development/www/van-eck-trailers/van-eck-website/wp-content/plugins/vaneck-contact-form/views/tco-calculator-form.view.php",
		"/Users/selimanac/Development/www/van-eck-trailers/van-eck-website/wp-content/plugins/vaneck-contact-form/views/tco-calculator-message-not-sent.view.php",
		"/Users/selimanac/Documents/ebay.txt",
		"/Users/selimanac/Development/Tokyo/ixir-host/tokyo-ixir-host.txt",
		"/Users/selimanac/Desktop/Hugo dev",
		"/Users/selimanac/Downloads/comment-form-csrf-protection/comment-form-csrf-protection.php",
		"/Users/selimanac/Development/Defold/Native Extension/defold-vsc-snippets/defold-vsc-snippets-git/defold-vsc-snippets/docs.txt",
		"/Users/selimanac/Development/www/cys.zone/wp-content/themes/neighborhood/functions.php",
		"/Users/selimanac/SDK/win10-key.txt",
		"/Users/selimanac/Downloads/pt-15.1.2.47123-linux-5.6.txt",
		"/Users/selimanac/Development/Behavior3/behavior3-defold/main/test_project.json",
		"/Users/selimanac/Documents/pinarogunc.txt",
		"/Applications/Games/Darkest Dungeon.app/Contents/Resources/Data/fx/attack_overlay/attack_overlay.sprite.atlas",
		"/Users/selimanac/Development/Behavior3/behavior3-defold/build/default/behavior3/b3.luac",
		"/Volumes/Backup/Backups/17012021/Development/C++/BTDesigner/Makefile",
		"/Users/selimanac/Downloads/raycaster_flat.cpp",
		"/Users/selimanac/Development/www/social-widget/backend/cache/instagram.050a5244bbd1b217c0960f0c9ded333e.json",
		"/Users/selimanac/Development/Defold/sandbox/defold-pixel-planets/render/pixelplanet.render_script",
		"/Users/selimanac/Downloads/LightFS.txt",
		"/Users/selimanac/Development/www/TOKYO/Vodafone/tvv/wp-content/themes/vtv/shortcodes/custom-shortcodes.php",
		"/Users/selimanac/DefaultKeyBinding.Dict",
		"/Users/selimanac/Downloads/PixelPlanets-main/Planets/NoAtmosphere/NoAtmosphere.tscn",
		"/Users/selimanac/Downloads/PixelPlanets-main/Planets/NoAtmosphere/NoAtmosphere.shader",
		"/Applications/MAMP/conf/nginx/nginx.conf",
		"/Volumes/Adobe Photoshop 2021 v22.2/Extra/Neural Filters v22.2/How to install.txt",
		"/Users/selimanac/SDK/aseprite/build/bin/aseprite",
		"/Users/selimanac/SDK/aseprite-build.txt",
		"/Volumes/GoogleDrive/My Drive/Vodafone/tvv/updates/outbound/functions.php",
		"/Users/selimanac/Desktop/tvv-link.txt",
		"/Users/selimanac/Development/www/selimanac.github.io/run.sh ",
		"/Volumes/GoogleDrive/My Drive/Vodafone/tvv/updates/outbound/wp-config.php",
		"/Applications/MAMP/conf/apache/httpd.conf",
		"/Users/selimanac/Design/Tokyo/tirsan/vaneck/Eckspert_New_Design_02_FinalWork_Folder/Eckspert_New_Design_02_FinalWork Report.txt",
		"/Users/selimanac/Documents/StandartFMVPS.txt",
		"/Users/Shared/Relocated Items/Configuration/private/etc/paths.system_default",
		"/Users/selimanac/Development/www/TOKYO/Vodafone/vfmm/Input.php",
		"/Users/selimanac/Development/www/TOKYO/Vodafone/vfmm/app/vendor/codeigniter/framework/system/core/Input.php",
		"/Users/selimanac/Development/www/van-eck-trailers/van-eck-frontend/pages/Ecko Co2mbi Series.html",
		"/Users/selimanac/Documents/godaddy.txt"
	],
	"find":
	{
		"height": 45.0
	},
	"find_in_files":
	{
		"height": 119.0,
		"where_history":
		[
			"/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"const",
			"self.properties",
			"self.root",
			"self.id",
			"<a",
			" align=\"justify\"",
			" align=\"center\"",
			"initialize",
			"In seqsss",
			"worldBlackboard",
			"agent",
			"worldBlackboard",
			"self.worldBlackboard",
			"self.agent",
			"const.",
			"const",
			"self.agent",
			"new(",
			"new",
			"require(\"behavior3."
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"require(\"b3."
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 352,
						"regions":
						{
						},
						"selection":
						[
							[
								350,
								302
							]
						],
						"settings":
						{
							"auto_complete": false,
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"default_dir": "/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3",
							"gutter": false,
							"lsp_uri": "buffer:926",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3488,
						"regions":
						{
						},
						"selection":
						[
							[
								3488,
								3488
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/README.md",
							"mde.match_heading_hashes": false,
							"syntax": "Packages/MarkdownEditing/syntaxes/MultiMarkdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2337.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37,
						"regions":
						{
						},
						"selection":
						[
							[
								37,
								37
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"default_dir": "/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3",
							"lsp_uri": "buffer:899",
							"syntax": "Packages/MarkdownEditing/syntaxes/MultiMarkdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "b3/b3.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6616,
						"regions":
						{
						},
						"selection":
						[
							[
								4402,
								4407
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4474,
										4477
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										4394,
										4396
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/b3.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "b3/const.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 295,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/const.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "b3/core/base_node.lua",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1622,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/base_node.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 807.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "main/json/test_project.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5009,
						"regions":
						{
						},
						"selection":
						[
							[
								231,
								236
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"selector": "- comment - punctuation.separator - punctuation.definition.string.end - constant.character.escape - invalid.illegal - punctuation.section.mapping - punctuation.section.sequence",
									"server": "LSP-json"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										236,
										237
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										230,
										231
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/main/json/test_project.json",
							"show_definitions": false,
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "main/test_action.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 578,
						"regions":
						{
						},
						"selection":
						[
							[
								233,
								233
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										232,
										233
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										221,
										222
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/main/test_action.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2224,
						"regions":
						{
						},
						"selection":
						[
							[
								413,
								413
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										604,
										605
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										258,
										259
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"default_dir": "/Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3",
							"lsp_uri": "buffer:727",
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 9,
					"file": "main/main.script",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2027,
						"regions":
						{
						},
						"selection":
						[
							[
								817,
								836
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1850,
										1853
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										110,
										118
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/main/main.script",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 343.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "b3/core/blackboard.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1850,
						"regions":
						{
						},
						"selection":
						[
							[
								109,
								109
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										169,
										172
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										86,
										94
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/blackboard.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "b3/core/tick.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1095,
						"regions":
						{
						},
						"selection":
						[
							[
								230,
								230
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										240,
										243
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"region.yellowish brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										73,
										81
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"lsp_active": true,
							"lsp_uri": "file:///Users/selimanac/Development/defold/EXTENSIONS/behavior3/defold-b3/b3/core/tick.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 45.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.diagnostics":
	{
		"height": 162.0
	},
	"output.exec":
	{
		"height": 162.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "defold-b3.sublime-project",
	"replace":
	{
		"height": 82.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 454.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
